#line 1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 6 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#pragma warning(disable:4008)
#line 7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 43 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 44 "/Engine/Public/Platform.ush"
#line 595 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }
#line 8 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"






	const static float PI = 3.1415926535897932f;

	const static float TWO_PI = 3.1415926535897932f*2.0f;
#line 18 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/Definitions.usf"
#line 19 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){ return x - y * (x/y); }



float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }









bool NiagaraAll(bool2 b) { return b.x && b.y; }
bool NiagaraAll(bool3 b) { return b.x && b.y && b.z; }
bool NiagaraAll(bool4 b) { return b.x && b.y && b.z && b.w; }
bool NiagaraAny(bool2 b) { return b.x || b.y; }
bool NiagaraAny(bool3 b) { return b.x || b.y || b.z; }
bool NiagaraAny(bool4 b) { return b.x || b.y || b.z || b.w; }
#line 193 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;






	return float4((v >> 8) & 0x00ffffff) / 16777216.0;

}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0;
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{


	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}
#line 323 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float rand(float x);

	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x)
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}

	int rand(int x);



float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x)
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{



	return rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{


	return rand(x.x-1, Seed1, Seed2, Seed3);
}
#line 405 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);



	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);


	int ExecIndex();



	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
#line 683 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
#line 698 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			return AcquireIndex(DataSetID, bIsValid);
	}
#line 702 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Generated/NiagaraEmitterInstance.ush"




struct NiagaraRandInfo
{
	int Seed1;
	int Seed2;
	int Seed3;
};

struct NiagaraID
{
	int Index;
	int AcquireTag;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
}

cbuffer FNiagaraSystemParameters
{
	float Engine_Owner_TimeSinceRendered;
	float Engine_Owner_LODDistance;
	float Engine_Owner_LODDistanceFraction;
	float Engine_System_Age;
	int Engine_Owner_ExecutionState;
	int Engine_System_TickCount;
	int Engine_System_NumEmitters;
	int Engine_System_NumEmittersAlive;
}

cbuffer FNiagaraOwnerParameters
{
	float4x4 Engine_Owner_SystemLocalToWorld;
	float4x4 Engine_Owner_SystemWorldToLocal;
	float4x4 Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 Engine_Owner_SystemWorldToLocalNoScale;
	float4 Engine_Owner_Rotation;
	float4 Engine_Owner_Position;
	float4 Engine_Owner_Velocity;
	float4 Engine_Owner_SystemXAxis;
	float4 Engine_Owner_SystemYAxis;
	float4 Engine_Owner_SystemZAxis;
	float4 Engine_Owner_Scale;
}

cbuffer FNiagaraEmitterParameters
{
	int Engine_Emitter_NumParticles;
	int Engine_Emitter_TotalSpawnedParticles;
	float Engine_Emitter_SpawnCountScale;
	float Emitter_Age;
	int Emitter_RandomSeed;
	int Engine_Emitter_PaddingInt32_0;
	int Engine_Emitter_PaddingInt32_1;
	int Engine_Emitter_PaddingInt32_2;
}

cbuffer FNiagaraExternalParameters
{
	float User_Z_Gravity_Minimum;
	float User_Z_Gravity_Maximum;
	float Constants_Emitter_BreakVector_X;
	float Constants_Emitter_BreakVector_Y;
	float Constants_Emitter_BreakVector001_X;
	float Constants_Emitter_BreakVector001_Y;
	int Constants_Emitter_UniformRangedVector_RandomSeed;
	float Constants_Emitter_FloatFromCurve001_ScaleCurve;
	float3 User_SparksColor;
	float Constants_Emitter_Collision_ParticleRadiusScale;
	float Constants_Emitter_Collision_Friction;
	float Constants_Emitter_Collision_StaticFriction;
	float Constants_Emitter_Collision_StaticFrictionEngagementSpeed;
	float Constants_Emitter_Collision_Restitution;
	float Constants_Emitter_Collision_RandomizeCollisionNormal;
	float Constants_Emitter_Collision_FrictionDuringaBounce;
	float Constants_Emitter_Collision_CPUTraceVectorLengthMultiplier;
	float Constants_Emitter_Collision_MaxCPUTraceLength;
	float Constants_Emitter_Collision_PercentageofPenetrationBeforeRest;
	float Constants_Emitter_Collision_RestStateTimeRange;
	float Constants_Emitter_Collision_MaximumPenetrationCorrectionDistance;
	float3 Constants_Emitter_Collision_ValidCollisionPlaneNormalForRest;
	float Constants_Emitter_Collision_MinimumCollisionNormalASC47RestNormalAlignmentPercentage;
	float Constants_Emitter_Collision_AdvancedAgingRate;
	float Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	float Constants_Emitter_ScaleSpriteSizeBySpeed_VelocityThreshold;
	float2 Constants_Emitter_ScaleSpriteSizeBySpeed_MinScaleFactor;
	float2 Constants_Emitter_ScaleSpriteSizeBySpeed_MaxScaleFactor;
}

struct FParamMap0_User
{
	float3 SparksColor;
	float Z_Gravity_Maximum;
	float Z_Gravity_Minimum;
};

struct FParamMap0_UniformRangedVector
{
	bool FixedRandomSeed;
	float3 Maximum;
	float3 Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_Transient
{
	float CollisionDistanceToCollision;
	float CollisionFriction;
	bool CollisionIsResting;
	float3 CollisionNormal;
	float3 CollisionParticleRelativeCollisionLocation;
	float3 CollisionParticleWorldPosition;
	float CollisionRestitution;
	float CollisionSize;
	bool CollisionValid;
	float3 CollisionVelocity;
	float3 CollisionWorldPosition;
	float4 ParticleColorScaleFactor;
	float PhysicsDeltaTime;
	float PhysicsDrag;
	float3 PhysicsForce;
	float2 SpriteSizeScaleFactor;
};

struct FParamMap0_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float DeltaTime;
	float3 Force;
	float Mass;
	float3 Position;
	float3 PreviousVelocity;
	float SpeedLimit;
	float3 Velocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_ScaleSpriteSizeBySpeed
{
	float2 InitialSpriteSize;
	float2 MaxScaleFactor;
	float2 MinScaleFactor;
	bool SampleScaleFactorByCurve;
	float3 SourceVelocity;
	float VelocityThreshold;
};

struct FParamMap0_ScaleColor
{
	float4 ColorValueToScale;
	float ScaleAlpha;
	float3 ScaleRGB;
};

struct FParamMap0_ParticleState
{
	float DeltaTime;
	float Lifetime;
};

struct FParamMap0_Particles_Initial
{
	float4 Color;
	float2 SpriteSize;
};

struct FParamMap0_Particles_Collision_CollisionQueryAndResponse001
{
	int CollisionID;
};

struct FParamMap0_Particles_Collision_CollisionQueryAndResponse
{
	int CollisionID;
};

struct FParamMap0_Particles_Collision
{
	FParamMap0_Particles_Collision_CollisionQueryAndResponse CollisionQueryAndResponse;
	FParamMap0_Particles_Collision_CollisionQueryAndResponse001 CollisionQueryAndResponse001;
};

struct FParamMap0_Particles
{
	float Age;
	FParamMap0_Particles_Collision Collision;
	float4 Color;
	bool HasCollided;
	FParamMap0_Particles_Initial Initial;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float NormalizedAge;
	int NumberOfCollisions;
	float3 Position;
	float3 PreviousVelocity;
	float RestCounter;
	float3 Scale;
	float SpriteRotation;
	float2 SpriteSize;
	int UniqueID;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity
{
	float IncomingPhysicsDrag;
	float3 IncomingPhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_ParticleState
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR_Collision_CollisionQueryAndResponse001
{
	float CollisionPenetrationDistance;
	bool DepthBasedCollisionParticleOccluded;
	bool ParticleOnScreen;
	bool PhysicsCollidesThisFrame;
};

struct FParamMap0_OUTPUT_VAR_Collision_CollisionQueryAndResponse
{
	float CollisionPenetrationDistance;
	bool DepthBasedCollisionParticleOccluded;
	bool ParticleOnScreen;
	bool PhysicsCollidesThisFrame;
};

struct FParamMap0_OUTPUT_VAR_Collision
{
	FParamMap0_OUTPUT_VAR_Collision_CollisionQueryAndResponse CollisionQueryAndResponse;
	FParamMap0_OUTPUT_VAR_Collision_CollisionQueryAndResponse001 CollisionQueryAndResponse001;
	bool CollisionValid;
	float3 ModuleCollision1Normal;
	bool ModuleCollision1Valid;
	float3 ModuleCollision2Normal;
	bool ModuleCollision2Valid;
	float3 ModuleCombinedCollisionNormal;
	float3 TempPreviousForce;
	float3 TempPreviousPosition;
	float3 TempPreviousVelocity;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_Collision Collision;
	FParamMap0_OUTPUT_VAR_ParticleState ParticleState;
	FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_Local_SolveForcesAndVelocity
{
	float DeltaTime;
	float Mass;
	float3 PhysicsForce;
};

struct FParamMap0_Local_ScaleSpriteSizeBySpeed
{
	float NormalizedVelocityRange;
};

struct FParamMap0_Local_Collision_CollisionQueryAndResponse001
{
	float3 ModuleAttemptedMovementThisUpdate;
	float3 ModuleForceContribution;
	float3 ModuleFrictionForceVectorInNewtons;
	float3 ModuleFrictionForceVelocityVector;
	bool ModuleInitialDataInstanceAlive;
	float3 ModuleInitialForceDividedByMass;
	float ModuleNormalForceInNewtons;
	float ModulePercentageOfTickDedicatedToUpdatingPosition;
	float ModulePhysicsDeltaTime;
	float3 ModulePlaneNormal;
	float3 ModulePlanePivotPoint;
	float3 ModuleReflectedVelocity;
	float3 ModuleReflectedVelocityWithFrictionApplied;
	bool ModuleRemoveRestitution;
	float3 ModuleReturnedCollisionNormal;
	bool ModuleReturnedCollisionValidBool;
	float3 ModuleReturnedCollisionWorldPosition;
	float ModuleReturnedFriction;
	float ModuleReturnedRestitution;
	float ModuleTickDeltaForThisCollisionUpdate;
	float3 ModuleTraceDirection;
	float3 ModuleTraceOrigin;
	float3 ModuleTraceVector;
	float3 ModuleTraceWorldEnd;
	float3 ModuleTraceWorldStart;
};

struct FParamMap0_Local_Collision_CollisionQueryAndResponse
{
	float3 ModuleAttemptedMovementThisUpdate;
	float3 ModuleForceContribution;
	float3 ModuleFrictionForceVectorInNewtons;
	float3 ModuleFrictionForceVelocityVector;
	bool ModuleInitialDataInstanceAlive;
	float3 ModuleInitialForceDividedByMass;
	float ModuleNormalForceInNewtons;
	float ModulePercentageOfTickDedicatedToUpdatingPosition;
	float ModulePhysicsDeltaTime;
	float3 ModulePlaneNormal;
	float3 ModulePlanePivotPoint;
	float3 ModuleReflectedVelocity;
	float3 ModuleReflectedVelocityWithFrictionApplied;
	bool ModuleRemoveRestitution;
	float3 ModuleReturnedCollisionNormal;
	bool ModuleReturnedCollisionValidBool;
	float3 ModuleReturnedCollisionWorldPosition;
	float ModuleReturnedFriction;
	float ModuleReturnedRestitution;
	float ModuleTickDeltaForThisCollisionUpdate;
	float3 ModuleTraceDirection;
	float3 ModuleTraceOrigin;
	float3 ModuleTraceVector;
	float3 ModuleTraceWorldEnd;
	float3 ModuleTraceWorldStart;
};

struct FParamMap0_Local_Collision
{
	FParamMap0_Local_Collision_CollisionQueryAndResponse CollisionQueryAndResponse;
	FParamMap0_Local_Collision_CollisionQueryAndResponse001 CollisionQueryAndResponse001;
	float ModuleParticleRadius;
	bool UpdateMeshRotation;
};

struct FParamMap0_Local
{
	FParamMap0_Local_Collision Collision;
	FParamMap0_Local_ScaleSpriteSizeBySpeed ScaleSpriteSizeBySpeed;
	FParamMap0_Local_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_GravityForce
{
	float3 Gravity;
};

struct FParamMap0_FloatFromCurve001
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_Engine_System
{
	float Age;
	int NumEmitters;
	int NumEmittersAlive;
	int TickCount;
};

struct FParamMap0_Engine_Owner
{
	int ExecutionState;
	float LODDistance;
	float LODDistanceFraction;
	float3 Position;
	float4 Rotation;
	float3 Scale;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemLocalToWorldTransposed;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
	float4x4 SystemWorldToLocalTransposed;
	float3 SystemXAxis;
	float3 SystemYAxis;
	float3 SystemZAxis;
	float TimeSinceRendered;
	float3 Velocity;
};

struct FParamMap0_Engine_Emitter
{
	int NumParticles;
	int PaddingInt32_0;
	int PaddingInt32_1;
	int PaddingInt32_2;
	float SpawnCountScale;
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	float InverseDeltaTime;
	FParamMap0_Engine_Owner Owner;
	float RealTime;
	FParamMap0_Engine_System System;
	float Time;
};

struct FParamMap0_Emitter
{
	float Age;
	bool LocalSpace;
	int RandomSeed;
};

struct FParamMap0_DataInstance
{
	bool Alive;
};

struct FParamMap0_Constants_Emitter_UniformRangedVector
{
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float SpeedLimit;
};

struct FParamMap0_Constants_Emitter_ScaleSpriteSizeBySpeed
{
	float2 MaxScaleFactor;
	float2 MinScaleFactor;
	float VelocityThreshold;
};

struct FParamMap0_Constants_Emitter_FloatFromCurve001
{
	float ScaleCurve;
};

struct FParamMap0_Constants_Emitter_Collision
{
	float AdvancedAgingRate;
	float CPUTraceVectorLengthMultiplier;
	float Friction;
	float FrictionDuringaBounce;
	float MaxCPUTraceLength;
	float MaximumPenetrationCorrectionDistance;
	float MinimumCollisionNormalASC47RestNormalAlignmentPercentage;
	float ParticleRadiusScale;
	float PercentageofPenetrationBeforeRest;
	float RandomizeCollisionNormal;
	float Restitution;
	float RestStateTimeRange;
	float StaticFriction;
	float StaticFrictionEngagementSpeed;
	float3 ValidCollisionPlaneNormalForRest;
};

struct FParamMap0_Constants_Emitter_BreakVector001
{
	float X;
	float Y;
};

struct FParamMap0_Constants_Emitter_BreakVector
{
	float X;
	float Y;
};

struct FParamMap0_Constants_Emitter
{
	FParamMap0_Constants_Emitter_BreakVector BreakVector;
	FParamMap0_Constants_Emitter_BreakVector001 BreakVector001;
	FParamMap0_Constants_Emitter_Collision Collision;
	FParamMap0_Constants_Emitter_FloatFromCurve001 FloatFromCurve001;
	FParamMap0_Constants_Emitter_ScaleSpriteSizeBySpeed ScaleSpriteSizeBySpeed;
	FParamMap0_Constants_Emitter_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Constants_Emitter_UniformRangedVector UniformRangedVector;
};

struct FParamMap0_Constants
{
	FParamMap0_Constants_Emitter Emitter;
};

struct FParamMap0_Collision_CollisionQueryAndResponse001
{
	float BounceCollisionFriction;
	bool CollisionEnabled;
	float CollisionNormalRandomizationPercentage;
	int CPUFrictionMergeType;
	float DeltaTime;
	float DynamicFrictionCoefficient;
	float MaxIntersectionCorrectionDistance;
	float MaxTraceLength;
	float ParticleRadius;
	float ParticleRestitutionCoeffiecient;
	bool RandomizeCollisionNormal;
	float StaticFrictionCoefficient;
	float StaticFrictionEngagementSpeed;
	float TraceVectorLengthMultiplier;
	bool UpdateRotationalVelocity;
};

struct FParamMap0_Collision_CollisionQueryAndResponse
{
	float BounceCollisionFriction;
	bool CollisionEnabled;
	float CollisionNormalRandomizationPercentage;
	int CPUFrictionMergeType;
	float DeltaTime;
	float DynamicFrictionCoefficient;
	float MaxIntersectionCorrectionDistance;
	float MaxTraceLength;
	float ParticleRadius;
	float ParticleRestitutionCoeffiecient;
	bool RandomizeCollisionNormal;
	float StaticFrictionCoefficient;
	float StaticFrictionEngagementSpeed;
	float TraceVectorLengthMultiplier;
	bool UpdateRotationalVelocity;
};

struct FParamMap0_Collision
{
	float AdvancedAgingRate;
	bool CollisionEnabled;
	FParamMap0_Collision_CollisionQueryAndResponse CollisionQueryAndResponse;
	FParamMap0_Collision_CollisionQueryAndResponse001 CollisionQueryAndResponse001;
	bool ControlRestStateViaSurfaceNormal;
	bool CorrectInterpenetration;
	float CPUTraceVectorLengthMultiplier;
	bool EnableRestState;
	float Friction;
	float FrictionDuringaBounce;
	float MaxCPUTraceLength;
	float MaximumPenetrationCorrectionDistance;
	float MinimumCollisionNormalASC47RestNormalAlignmentPercentage;
	float ParticleRadiusScale;
	float PercentageofPenetrationBeforeRest;
	float RandomizeCollisionNormal;
	bool RandomizeCollisionNormalVector;
	float Restitution;
	float RestStateTimeRange;
	float StaticFriction;
	float StaticFrictionEngagementSpeed;
	float3 ValidCollisionPlaneNormalForRest;
};

struct FParamMap0_BreakVector001
{
	float X;
	float Y;
	float Z;
};

struct FParamMap0_BreakVector
{
	float X;
	float Y;
	float Z;
};

struct FParamMap0
{
	FParamMap0_BreakVector BreakVector;
	FParamMap0_BreakVector001 BreakVector001;
	FParamMap0_Collision Collision;
	FParamMap0_Constants Constants;
	FParamMap0_DataInstance DataInstance;
	FParamMap0_Emitter Emitter;
	FParamMap0_Engine Engine;
	FParamMap0_FloatFromCurve001 FloatFromCurve001;
	FParamMap0_GravityForce GravityForce;
	FParamMap0_Local Local;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_ParticleState ParticleState;
	FParamMap0_ScaleColor ScaleColor;
	FParamMap0_ScaleSpriteSizeBySpeed ScaleSpriteSizeBySpeed;
	FParamMap0_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Transient Transient;
	FParamMap0_UniformRangedVector UniformRangedVector;
	FParamMap0_User User;
};

struct FSimulationContext
{
	FParamMap0 Map;
};

static float HackSpawnInterp = 1.0;
void BreakVector_Emitter_Func_(out float3 Out_Vec3, inout FSimulationContext Context);
void BreakVector001_Emitter_Func_(out float3 Out_Vec3, inout FSimulationContext Context);
void GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float3 In_Min, float3 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_Result, inout FSimulationContext Context);
void UniformRangedVector_Emitter_Func_(out float3 Out_UniformRangedVector, inout FSimulationContext Context);
void GravityForce_Emitter_Func_(inout FSimulationContext Context);
void ParticleState_Emitter_Func_(inout FSimulationContext Context);
void SampleCurve_EmitterScaleAlphaFloatCurve001(float In_X, out float Out_Value);
void FloatFromCurve001_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void ScaleColor_Emitter_Func_(inout FSimulationContext Context);
void CalculateRadiusFromSpriteSize_Particle_Method_NewEnumerator0_Func_(float2 In_SpriteSize, out float Out_Radius, inout FSimulationContext Context);
void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context);
void Collision_TransformPosition_Emitter_Func_(float3 In_InPosition, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutPosition, inout FSimulationContext Context);
void Collision_TransformVector002_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void Collision_TransformVector003_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void DirectionAndLengthSafe_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, float In_FallbackLength, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context);
void PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQuery(int In_InstanceData, int In_PreviousFrameQueryID, float3 In_TraceStartWorld, float3 In_TraceEndWorld, int In_TraceChannel, out int Out_NextFrameQueryID, out bool Out_CollisionValid, out bool Out_IsTraceInsideMesh, out float3 Out_CollisionPosWorld, out float3 Out_CollisionNormal, out float Out_CollisionMaterialFriction, out float Out_CollisionMaterialRestitution);
void PlaneSphereCollisionDetection_Func_(float3 In_PlaneNormal, float3 In_PlanePivotPoint, float3 In_InitialSphereLocation, float3 In_SpherePositionDelta, float In_CollisionRadius, float In_PhysicsDeltaTime, float In_MaxCorrectiondistance, out bool Out_Collides, out float3 Out_IntersectionLocation, out float3 Out_PreASC45IntersectionSphereCenterLocation, out float3 Out_InitialPositionRelativeCollisionLocation, out float Out_TimeElapsedToCollision, out float Out_RemainingTimePostCollision, out float Out_PercentageofTimeUsedToPerformCollision, out float Out_InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision, out float Out_UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float2 In_Min, float2 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float2 Out_Result, inout FSimulationContext Context);
void CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_(bool In_InputsAreNormalized, float3 In_From, float3 In_To, out float4 Out_Result);
void FindQuatBetween_Func_(float3 In_From, float3 In_To, bool In_InputsAreNormalized, out float4 Out_NewOutput, inout FSimulationContext Context);
void MultiplyVectorWithQuaternion_Func_(float3 In_VECTOR_VAR, float4 In_Quaternion, out float3 Out_Vector, inout FSimulationContext Context);
void RandomizeCollisionNormals_Func_(float3 In_ConeAxis, float In_Scale, float In_Spread, out float3 Out_Ouput, inout FSimulationContext Context);
void ReflectVector_Func_(float3 In_InVector, float3 In_Normal, out float3 Out_Reflected, inout FSimulationContext Context);
void CentimeterMeterConversion_Func_(float3 In_INPUT_VAR, out float3 Out_CentimeterstoMeters, out float3 Out_MeterstoCentimeters, inout FSimulationContext Context);
void ProjectVectorOnPlane_Func_(float3 In_VECTOR_VAR, float3 In_Normal, out float3 Out_Ouput, inout FSimulationContext Context);
void Collision_CollisionQueryAndResponse_Emitter_Func_(inout FSimulationContext Context);
void PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001Query(int In_InstanceData, int In_PreviousFrameQueryID, float3 In_TraceStartWorld, float3 In_TraceEndWorld, int In_TraceChannel, out int Out_NextFrameQueryID, out bool Out_CollisionValid, out bool Out_IsTraceInsideMesh, out float3 Out_CollisionPosWorld, out float3 Out_CollisionNormal, out float Out_CollisionMaterialFriction, out float Out_CollisionMaterialRestitution);
void Collision_CollisionQueryAndResponse001_Emitter_Func_(inout FSimulationContext Context);
void Collision_TransformPosition001_Emitter_Func_(float3 In_InPosition, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutPosition, inout FSimulationContext Context);
void Collision_TransformVector001_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void Collision_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void Collision_Emitter_Func_(inout FSimulationContext Context);
void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context);
void SampleCurve_EmitterScaleFactorCurve(float In_X, out float Out_Value);
void ScaleSpriteSizeBySpeed_Emitter_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void BreakVector_Emitter_Func_(out float3 Out_Vec3, inout FSimulationContext Context)
{
	float3 Output1;
	Output1.x = Context.Map.Constants.Emitter.BreakVector.X;
	Output1.y = Context.Map.Constants.Emitter.BreakVector.Y;
	Output1.z = Context.Map.BreakVector.Z;
	Out_Vec3 = Output1;
}

void BreakVector001_Emitter_Func_(out float3 Out_Vec3, inout FSimulationContext Context)
{
	float3 Output11;
	Output11.x = Context.Map.Constants.Emitter.BreakVector001.X;
	Output11.y = Context.Map.Constants.Emitter.BreakVector001.Y;
	Output11.z = Context.Map.BreakVector001.Z;
	Out_Vec3 = Output11;
}

void GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context)
{
	bool Constant10 = false;
	int Constant11 = 0;
	bool Result = NiagaraAll(In_RandomnessMode == Constant11);
	bool Result1 = Constant10 && Result;
	int Constant12 = 1;
	bool Result2 = NiagaraAll(In_RandomnessMode == Constant12);
	bool Result3 = Result1 || Result2;
	int Seed_IfResult;
	if(In_OverrideSeed)
	{
	Seed_IfResult = In_Seed;
	}
	else
	{
	Seed_IfResult = Context.Map.Emitter.RandomSeed;
	}
	int Constant13 = 0;
	int Constant14 = 0;
	int Seed1_IfResult;
	int Seed2_IfResult;
	int Seed3_IfResult;
	if(In_FixedOverrideSeed)
	{
	Seed1_IfResult = Seed_IfResult;
	Seed2_IfResult = Constant13;
	Seed3_IfResult = Constant14;
	}
	else
	{
	Seed1_IfResult = Context.Map.Particles.UniqueID;
	Seed2_IfResult = Context.Map.Engine.System.TickCount;
	Seed3_IfResult = Seed_IfResult;
	}
	int Constant15 = -1;
	int Constant16 = -1;
	int Constant17 = -1;
	int Seed1_IfResult1;
	int Seed2_IfResult1;
	int Seed3_IfResult1;
	if(Result3)
	{
	Seed1_IfResult1 = Seed1_IfResult;
	Seed2_IfResult1 = Seed2_IfResult;
	Seed3_IfResult1 = Seed3_IfResult;
	}
	else
	{
	Seed1_IfResult1 = Constant15;
	Seed2_IfResult1 = Constant16;
	Seed3_IfResult1 = Constant17;
	}
	NiagaraRandInfo Output12;
	Output12.Seed1 = Seed1_IfResult1;
	Output12.Seed2 = Seed2_IfResult1;
	Output12.Seed3 = Seed3_IfResult1;
	Out_RandomInfo = Output12;
	Out_UseDeterministicRandoms = Result3;
}

void RandomRangeFloat_Func_(float3 In_Min, float3 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_Result, inout FSimulationContext Context)
{
	int Constant6 = (0);
	bool Constant7 = false;
	int Constant8 = 0;
	int Constant9 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo;
	bool GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms;
	GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_(In_Seed, Constant6, In_OverrideSeed, Constant8, Constant9, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo, GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms, Context);
	float3 Result4 = In_Max - In_Min;
	int Seed1;
	int Seed2;
	int Seed3;
	Seed1 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo.Seed1;
	Seed2 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo.Seed2;
	Seed3 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo.Seed3;
	float3 Result5 = rand_float(Result4, Seed1, Seed2, Seed3);
	float3 Result6 = rand_float(Result4);
	float3 Random_IfResult;
	if(GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms)
	{
	Random_IfResult = Result5;
	}
	else
	{
	Random_IfResult = Result6;
	}
	float3 Result7 = In_Min + Random_IfResult;
	Out_Result = Result7;
}

void UniformRangedVector_Emitter_Func_(out float3 Out_UniformRangedVector, inout FSimulationContext Context)
{
	int Constant4 = 0;
	bool Constant5 = false;
	int Mode_IfResult;
	bool Override_IfResult;
	if(Context.Map.UniformRangedVector.OverrideRandomness)
	{
	Mode_IfResult = Context.Map.UniformRangedVector.RandomnessMode;
	Override_IfResult = Context.Map.UniformRangedVector.OverrideSeed;
	}
	else
	{
	Mode_IfResult = Constant4;
	Override_IfResult = Constant5;
	}
	float3 RandomRangeFloat_Func_Output_Result;
	RandomRangeFloat_Func_(Context.Map.UniformRangedVector.Minimum, Context.Map.UniformRangedVector.Maximum, Context.Map.Constants.Emitter.UniformRangedVector.RandomSeed, Mode_IfResult, Override_IfResult, Context.Map.UniformRangedVector.FixedRandomSeed, RandomRangeFloat_Func_Output_Result, Context);
	Out_UniformRangedVector = RandomRangeFloat_Func_Output_Result;
}

void GravityForce_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Result8 = Context.Map.GravityForce.Gravity * Context.Map.Particles.Mass;
	float3 Result9 = Context.Map.Transient.PhysicsForce + Result8;
	Context.Map.Transient.PhysicsForce = Result9;
}

void ParticleState_Emitter_Func_(inout FSimulationContext Context)
{
	bool Result10 = NiagaraAll(Context.Map.Particles.Age <= Context.Map.Engine.DeltaTime);
	Context.Map.OUTPUT_VAR.ParticleState.FirstFrame = Result10;
	float Result11 = Context.Map.Particles.Age + Context.Map.ParticleState.DeltaTime;
	float Constant21 = 1e-05;
	float Result12 = max(Context.Map.ParticleState.Lifetime, Constant21);
	float Constant22 = 0.0001;
	float Result13 = Result12 - Constant22;
	bool Result14 = NiagaraAll(Result11 < Result13);
	bool Constant23 = false;
	bool bool_IfResult;
	if(Result14)
	{
	bool_IfResult = Context.Map.DataInstance.Alive;
	}
	else
	{
	bool_IfResult = Constant23;
	}
	float Result15 = Result11 / Result12;
	Context.Map.DataInstance.Alive = bool_IfResult;
	Context.Map.Particles.Age = Result11;
	Context.Map.Particles.NormalizedAge = Result15;
}

void FloatFromCurve001_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_EmitterScaleAlphaFloatCurve001Output_Value;
	SampleCurve_EmitterScaleAlphaFloatCurve001(Context.Map.FloatFromCurve001.CurveIndex, SampleCurve_EmitterScaleAlphaFloatCurve001Output_Value);
	float Result16 = SampleCurve_EmitterScaleAlphaFloatCurve001Output_Value * Context.Map.Constants.Emitter.FloatFromCurve001.ScaleCurve;
	Out_Value = Result16;
}

void ScaleColor_Emitter_Func_(inout FSimulationContext Context)
{
	float4 Output0;
	Output0.r = Context.Map.ScaleColor.ScaleRGB.x;
	Output0.g = Context.Map.ScaleColor.ScaleRGB.y;
	Output0.b = Context.Map.ScaleColor.ScaleRGB.z;
	Output0.a = Context.Map.ScaleColor.ScaleAlpha;
	float4 Result17 = Context.Map.Transient.ParticleColorScaleFactor * Output0;
	float4 Result18 = Context.Map.ScaleColor.ColorValueToScale * Result17;
	Context.Map.Particles.Color = Result18;
	Context.Map.Transient.ParticleColorScaleFactor = Result17;
}

void CalculateRadiusFromSpriteSize_Particle_Method_NewEnumerator0_Func_(float2 In_SpriteSize, out float Out_Radius, inout FSimulationContext Context)
{
	float Result19 = length(In_SpriteSize);
	float Constant70 = 0.5;
	float Result20 = Result19 * Constant70;
	Out_Radius = Result20;
}

void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context)
{
	int Constant75 = 0;
	bool Result22 = NiagaraAll(In_SourceSpace == Constant75);
	int Constant76 = 0;
	bool Result23 = NiagaraAll(In_DestinationSpace == Constant76);
	bool Result24 = Result22 && Result23;
	int Constant77 = 1;
	bool Result25 = NiagaraAll(In_SourceSpace == Constant77);
	int Constant78 = 1;
	bool Result26 = NiagaraAll(In_DestinationSpace == Constant78);
	bool Result27 = Result25 && Result26;
	bool Result28 = Result24 || Result27;
	int Constant79 = 2;
	bool Result29 = NiagaraAll(In_SourceSpace == Constant79);
	int Constant80 = 2;
	bool Result30 = NiagaraAll(In_DestinationSpace == Constant80);
	bool Result31 = Result29 && Result30;
	bool Result32 = Result28 || Result31;
	bool Result33 = Result22 && Result30;
	bool Result34 = Result29 && Result23;
	bool Result35 = Result33 || Result34;
	bool Result36 = In_bLocalSpace && Result35;
	bool Result37 = Result32 || Result36;
	bool Result38 = !In_bLocalSpace;
	bool Result39 = Result22 && Result26;
	bool Result40 = Result25 && Result23;
	bool Result41 = Result39 || Result40;
	bool Result42 = Result38 && Result41;
	bool Result43 = Result37 || Result42;
	bool Result44 = In_bLocalSpace && Result39;
	bool Result45 = Result29 && Result26;
	bool Result46 = Result44 || Result45;
	bool Result47 = Result38 && Result34;
	bool Result48 = Result46 || Result47;
	float4x4 Matrix_IfResult1;
	if(Result48)
	{
	Matrix_IfResult1 = In_LocalToWorldTransform;
	}
	else
	{
	Matrix_IfResult1 = In_WorldToLocalTransform;
	}
	Out_bUseOriginal = Result43;
	Out_OutTransform = Matrix_IfResult1;
}

void Collision_TransformPosition_Emitter_Func_(float3 In_InPosition, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant74 = false;
	float4x4 Matrix_IfResult;
	float4x4 Matrix001_IfResult;
	if(In_ApplyScale)
	{
	Matrix_IfResult = Context.Map.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult = Context.Map.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult = Context.Map.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult = Context.Map.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal;
	float4x4 TransformBase_Func_Output_OutTransform;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult, Matrix001_IfResult, Constant74, TransformBase_Func_Output_bUseOriginal, TransformBase_Func_Output_OutTransform, Context);
	float3 Result49 = mul(float4(In_InPosition,1.0),TransformBase_Func_Output_OutTransform).xyz;
	float3 Vector_IfResult;
	if(TransformBase_Func_Output_bUseOriginal)
	{
	Vector_IfResult = In_InPosition;
	}
	else
	{
	Vector_IfResult = Result49;
	}
	Out_OutPosition = Vector_IfResult;
}

void Collision_TransformVector002_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant84 = false;
	float4x4 Matrix_IfResult2;
	float4x4 Matrix001_IfResult1;
	if(In_ApplyScale)
	{
	Matrix_IfResult2 = Context.Map.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult1 = Context.Map.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult2 = Context.Map.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult1 = Context.Map.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal1;
	float4x4 TransformBase_Func_Output_OutTransform1;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult2, Matrix001_IfResult1, Constant84, TransformBase_Func_Output_bUseOriginal1, TransformBase_Func_Output_OutTransform1, Context);
	float3 Result50 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform1).xyz;
	float3 Vector_IfResult1;
	if(TransformBase_Func_Output_bUseOriginal1)
	{
	Vector_IfResult1 = In_InVector;
	}
	else
	{
	Vector_IfResult1 = Result50;
	}
	Out_OutVector = Vector_IfResult1;
}

void Collision_TransformVector003_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant88 = false;
	float4x4 Matrix_IfResult3;
	float4x4 Matrix001_IfResult2;
	if(In_ApplyScale)
	{
	Matrix_IfResult3 = Context.Map.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult2 = Context.Map.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult3 = Context.Map.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult2 = Context.Map.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal2;
	float4x4 TransformBase_Func_Output_OutTransform2;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult3, Matrix001_IfResult2, Constant88, TransformBase_Func_Output_bUseOriginal2, TransformBase_Func_Output_OutTransform2, Context);
	float3 Result51 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform2).xyz;
	float3 Vector_IfResult2;
	if(TransformBase_Func_Output_bUseOriginal2)
	{
	Vector_IfResult2 = In_InVector;
	}
	else
	{
	Vector_IfResult2 = Result51;
	}
	Out_OutVector = Vector_IfResult2;
}

void DirectionAndLengthSafe_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, float In_FallbackLength, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context)
{
	float Result56 = length(In_V);
	bool Result57 = NiagaraAll(Result56 < In_Threshold);
	float Result58 = length(In_Fallback);
	float3 Vector_IfResult3;
	float float_IfResult1;
	if(Result57)
	{
	Vector_IfResult3 = In_Fallback;
	float_IfResult1 = In_FallbackLength;
	}
	else
	{
	Vector_IfResult3 = In_V;
	float_IfResult1 = Result56;
	}
	float3 Result59 = Vector_IfResult3 / float_IfResult1;
	float3 Vector_IfResult4;
	float float_IfResult2;
	if(Result57)
	{
	Vector_IfResult4 = In_Fallback;
	float_IfResult2 = Result58;
	}
	else
	{
	Vector_IfResult4 = Result59;
	float_IfResult2 = float_IfResult1;
	}
	Out_Direction = Vector_IfResult4;
	Out_Length = float_IfResult2;
	Out_BelowThreshold = Result57;
}

void PlaneSphereCollisionDetection_Func_(float3 In_PlaneNormal, float3 In_PlanePivotPoint, float3 In_InitialSphereLocation, float3 In_SpherePositionDelta, float In_CollisionRadius, float In_PhysicsDeltaTime, float In_MaxCorrectiondistance, out bool Out_Collides, out float3 Out_IntersectionLocation, out float3 Out_PreASC45IntersectionSphereCenterLocation, out float3 Out_InitialPositionRelativeCollisionLocation, out float Out_TimeElapsedToCollision, out float Out_RemainingTimePostCollision, out float Out_PercentageofTimeUsedToPerformCollision, out float Out_InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision, out float Out_UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane, inout FSimulationContext Context)
{
	float3 Result69 = -(In_PlaneNormal);
	float3 Result70 = In_PlanePivotPoint - In_InitialSphereLocation;
	float Result71 = dot(Result69,Result70);
	float Result72 = Result71 - In_CollisionRadius;
	float Constant125 = 0;
	bool Result73 = NiagaraAll(Result72 < Constant125);
	bool Constant126 = true;
	float3 Result74 = Result69 * Result71;
	float3 Result75 = Result74 + In_InitialSphereLocation;
	float Result76 = max(In_MaxCorrectiondistance, Result72);
	float3 Result77 = Result76 * Result69;
	float3 Result78 = Result77 + In_InitialSphereLocation;
	float Constant127 = 0;
	float Constant128 = 0;
	float3 Result79 = In_InitialSphereLocation + In_SpherePositionDelta;
	float3 Result80 = In_PlanePivotPoint - Result79;
	float Result81 = dot(Result69,Result80);
	float Result82 = Result81 - In_CollisionRadius;
	float Constant129 = 0;
	bool Result83 = NiagaraAll(Result82 <= Constant129);
	float Result84 = abs(Result82);
	float Result85 = Result72 - Result82;
	float Result86 = abs(Result85);
	float Constant130 = 1e-06;
	float Result87 = max(Result86, Constant130);
	float Result88 = Result84 / Result87;
	float Constant131 = 0;
	bool Result89 = NiagaraAll(Result88 == Constant131);
	bool Result90 = Result73 || Result89;
	float Constant132 = 1;
	float float_IfResult3;
	if(Result90)
	{
	float_IfResult3 = Constant132;
	}
	else
	{
	float_IfResult3 = Result88;
	}
	float Result91 = 1 - float_IfResult3;
	float3 Result92 = Result91 * In_SpherePositionDelta;
	float3 Result93 = In_InitialSphereLocation + Result92;
	float3 Result94 = Result69 * In_CollisionRadius;
	float3 Result95 = Result93 + Result94;
	float3 Result96 = Result95 - Result93;
	float Result97 = In_PhysicsDeltaTime * Result91;
	float Result98 = In_PhysicsDeltaTime * float_IfResult3;
	bool Collides_IfResult;
	float3 IntersectionLocation_IfResult;
	float3 PreASC45IntersectionSphereCenterLocation_IfResult;
	float3 InitialPositionRelativeCollisionLocation_IfResult;
	float TimeElapsedToCollision_IfResult;
	float RemainingTimePostCollision_IfResult;
	float PercentageofTimeUsedToPerformCollision_IfResult;
	float InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision_IfResult;
	float UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane_IfResult;
	if(Result73)
	{
	Collides_IfResult = Constant126;
	IntersectionLocation_IfResult = Result75;
	PreASC45IntersectionSphereCenterLocation_IfResult = Result78;
	InitialPositionRelativeCollisionLocation_IfResult = Result74;
	TimeElapsedToCollision_IfResult = Constant127;
	RemainingTimePostCollision_IfResult = In_PhysicsDeltaTime;
	PercentageofTimeUsedToPerformCollision_IfResult = Constant128;
	InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision_IfResult = Result72;
	UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane_IfResult = Result82;
	}
	else
	{
	Collides_IfResult = Result83;
	IntersectionLocation_IfResult = Result95;
	PreASC45IntersectionSphereCenterLocation_IfResult = Result93;
	InitialPositionRelativeCollisionLocation_IfResult = Result96;
	TimeElapsedToCollision_IfResult = Result97;
	RemainingTimePostCollision_IfResult = Result98;
	PercentageofTimeUsedToPerformCollision_IfResult = Result91;
	InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision_IfResult = Result72;
	UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane_IfResult = Result82;
	}
	Out_Collides = Collides_IfResult;
	Out_IntersectionLocation = IntersectionLocation_IfResult;
	Out_PreASC45IntersectionSphereCenterLocation = PreASC45IntersectionSphereCenterLocation_IfResult;
	Out_InitialPositionRelativeCollisionLocation = InitialPositionRelativeCollisionLocation_IfResult;
	Out_TimeElapsedToCollision = TimeElapsedToCollision_IfResult;
	Out_RemainingTimePostCollision = RemainingTimePostCollision_IfResult;
	Out_PercentageofTimeUsedToPerformCollision = PercentageofTimeUsedToPerformCollision_IfResult;
	Out_InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision = InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision_IfResult;
	Out_UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane = UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane_IfResult;
}

void RandomRangeFloat_Func_(float2 In_Min, float2 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float2 Out_Result, inout FSimulationContext Context)
{
	int Constant143 = (0);
	bool Constant144 = false;
	int Constant145 = 0;
	int Constant146 = (0);
	bool Constant147 = false;
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo1;
	bool GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms1;
	GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_(In_Seed, Constant143, In_OverrideSeed, Constant145, Constant146, Constant147, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo1, GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms1, Context);
	float2 Result114 = In_Max - In_Min;
	int Seed11;
	int Seed21;
	int Seed31;
	Seed11 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo1.Seed1;
	Seed21 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo1.Seed2;
	Seed31 = GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_RandomInfo1.Seed3;
	float2 Result115 = rand_float(Result114, Seed11, Seed21, Seed31);
	float2 Result116 = rand_float(Result114);
	float2 Random_IfResult1;
	if(GetRandomInfo_Emitter_Determinism_false_Particle_Particle_Particle_Func_Output_UseDeterministicRandoms1)
	{
	Random_IfResult1 = Result115;
	}
	else
	{
	Random_IfResult1 = Result116;
	}
	float2 Result117 = In_Min + Random_IfResult1;
	Out_Result = Result117;
}

void CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_(bool In_InputsAreNormalized, float3 In_From, float3 In_To, out float4 Out_Result)
{



		float NormAB = 1.0f;
	    float NormFactor = sqrt((In_From.x*In_From.x + In_From.y*In_From.y + In_From.z*In_From.z) * (In_To.x*In_To.x + In_To.y*In_To.y + In_To.z*In_To.z));

	    if (In_InputsAreNormalized)
	    {
	         NormAB = 1.0f;
	    }
	    else
	    {
	         NormAB = NormFactor;
	   }

		float w = NormAB + dot(In_From, In_To);
	    float4 Result1 = float4(In_From.y * In_To.z - In_From.z * In_To.y,
						   In_From.z * In_To.x - In_From.x * In_To.z,
						   In_From.x * In_To.y - In_From.y * In_To.x,
						   w);
		float4 Result2 = float4(-In_From.z, 0.0f, In_From.x, 0.0f);
	    float4 Result3 = float4(0.0f, -In_From.z, In_From.y, 0.0f);


	    if (abs(In_From.x) > abs(In_From.y))
	    {
	        Out_Result = Result2;
	    }
	    else
	    {
	        Out_Result = Result3;
	    }


		if (w >= 3.4e-4f * NormAB)
		{

			Out_Result = Result1;
		}

		Out_Result = normalize(Out_Result);

}

void FindQuatBetween_Func_(float3 In_From, float3 In_To, bool In_InputsAreNormalized, out float4 Out_NewOutput, inout FSimulationContext Context)
{
	float4 CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_Output_Result;
	CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_(In_InputsAreNormalized, In_From, In_To, CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_Output_Result);
	Out_NewOutput = CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_Output_Result;
}

void MultiplyVectorWithQuaternion_Func_(float3 In_VECTOR_VAR, float4 In_Quaternion, out float3 Out_Vector, inout FSimulationContext Context)
{
	float3 Output01;
	float Output15;
	Output01.x = In_Quaternion.x;
	Output01.y = In_Quaternion.y;
	Output01.z = In_Quaternion.z;
	Output15 = In_Quaternion.w;
	float Result129 = dot(Output01,In_VECTOR_VAR);
	float Constant156 = 2;
	float Result130 = Result129 * Constant156;
	float3 Result131 = Output01 * Result130;
	float Result132 = Output15 * Output15;
	float Result133 = dot(Output01,Output01);
	float Result134 = Result132 - Result133;
	float3 Result135 = Result134 * In_VECTOR_VAR;
	float3 Result136 = Result131 + Result135;
	float3 Result137 = cross(Output01,In_VECTOR_VAR);
	float Constant157 = 2;
	float Result138 = Output15 * Constant157;
	float3 Result139 = Result137 * Result138;
	float3 Result140 = Result136 + Result139;
	Out_Vector = Result140;
}

void RandomizeCollisionNormals_Func_(float3 In_ConeAxis, float In_Scale, float In_Spread, out float3 Out_Ouput, inout FSimulationContext Context)
{
	float Constant137 = 0;
	float Constant138 = 1;
	float Result112 = clamp(In_Spread,Constant137,Constant138);
	float Constant139 = -1;
	float Result113 = Result112 * Constant139;
	float2 Output13;
	Output13.x = Result113;
	Output13.y = Result113;
	float2 Output14;
	Output14.x = Result112;
	Output14.y = Result112;
	int Constant140 = -1;
	int Constant141 = 0;
	bool Constant142 = false;
	float2 RandomRangeFloat_Func_Output_Result1;
	RandomRangeFloat_Func_(Output13, Output14, Constant140, Constant141, Constant142, RandomRangeFloat_Func_Output_Result1, Context);
	float X;
	float Y;
	X = RandomRangeFloat_Func_Output_Result1.x;
	Y = RandomRangeFloat_Func_Output_Result1.y;
	float3 Constant148 = float3(1,0,0);
	float3 Result118 = X * Constant148;
	float3 Constant149 = float3(0,1,0);
	float3 Result119 = Y * Constant149;
	float3 Result120 = Result118 + Result119;
	float Result121 = abs(X);
	float Result122 = abs(Y);
	float Result123 = max(Result121, Result122);
	float Result124 = 1 - Result123;
	float3 Constant150 = float3(0,0,1);
	float3 Result125 = Result124 * Constant150;
	float3 Result126 = Result120 + Result125;
	float3 Result127 = normalize(Result126);
	float3 Result128 = Result127 * In_Scale;
	float3 Constant151 = float3(0,0,1);
	float3 Constant152 = float3(0,0,1);
	float Constant153 = 1e-05;
	float Constant154 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction2;
	float DirectionAndLengthSafe_Func_Output_Length2;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold2;
	DirectionAndLengthSafe_Func_(In_ConeAxis, Constant152, Constant153, Constant154, DirectionAndLengthSafe_Func_Output_Direction2, DirectionAndLengthSafe_Func_Output_Length2, DirectionAndLengthSafe_Func_Output_BelowThreshold2, Context);
	bool Constant155 = false;
	float4 FindQuatBetween_Func_Output_NewOutput;
	FindQuatBetween_Func_(Constant151, DirectionAndLengthSafe_Func_Output_Direction2, Constant155, FindQuatBetween_Func_Output_NewOutput, Context);
	float3 MultiplyVectorWithQuaternion_Func_Output_Vector;
	MultiplyVectorWithQuaternion_Func_(Result128, FindQuatBetween_Func_Output_NewOutput, MultiplyVectorWithQuaternion_Func_Output_Vector, Context);
	Out_Ouput = MultiplyVectorWithQuaternion_Func_Output_Vector;
}

void ReflectVector_Func_(float3 In_InVector, float3 In_Normal, out float3 Out_Reflected, inout FSimulationContext Context)
{
	float Result141 = dot(In_InVector,In_Normal);
	float Result142 = Result141 + Result141;
	float3 Result143 = Result142 * In_Normal;
	float3 Result144 = In_InVector - Result143;
	Out_Reflected = Result144;
}

void CentimeterMeterConversion_Func_(float3 In_INPUT_VAR, out float3 Out_CentimeterstoMeters, out float3 Out_MeterstoCentimeters, inout FSimulationContext Context)
{
	float Constant158 = 0.01;
	float3 Result145 = In_INPUT_VAR * Constant158;
	float Constant159 = 100;
	float3 Result146 = In_INPUT_VAR * Constant159;
	Out_CentimeterstoMeters = Result145;
	Out_MeterstoCentimeters = Result146;
}

void ProjectVectorOnPlane_Func_(float3 In_VECTOR_VAR, float3 In_Normal, out float3 Out_Ouput, inout FSimulationContext Context)
{
	float Result150 = dot(In_VECTOR_VAR,In_Normal);
	float3 Result151 = Result150 * In_Normal;
	float3 Result152 = In_VECTOR_VAR - Result151;
	Out_Ouput = Result152;
}

void Collision_CollisionQueryAndResponse_Emitter_Func_(inout FSimulationContext Context)
{
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleInitialDataInstanceAlive = Context.Map.DataInstance.Alive;
	Context.Map.Collision.CollisionQueryAndResponse.DeltaTime = Context.Map.Collision.CollisionQueryAndResponse.DeltaTime;
	float3 Result52 = Context.Map.Transient.PhysicsForce / Context.Map.Particles.Mass;
	float3 Result53 = Result52 * Context.Map.Collision.CollisionQueryAndResponse.DeltaTime;
	float3 Result54 = Result53 + Context.Map.Particles.Velocity;
	float3 Result55 = Result54 * Context.Map.Collision.CollisionQueryAndResponse.DeltaTime;
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleTraceOrigin = Context.Map.Particles.Position;
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleForceContribution = Result53;
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleAttemptedMovementThisUpdate = Result55;
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleInitialForceDividedByMass = Result52;
	float3 Constant114 = float3(0,0,-1);
	float Constant115 = 1e-05;
	float Constant116 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction;
	float DirectionAndLengthSafe_Func_Output_Length;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold;
	DirectionAndLengthSafe_Func_(Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleForceContribution, Constant114, Constant115, Constant116, DirectionAndLengthSafe_Func_Output_Direction, DirectionAndLengthSafe_Func_Output_Length, DirectionAndLengthSafe_Func_Output_BelowThreshold, Context);
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleTraceVector = Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleForceContribution;
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleTraceDirection = DirectionAndLengthSafe_Func_Output_Direction;
	float3 Result60 = DirectionAndLengthSafe_Func_Output_Direction * Context.Map.Collision.CollisionQueryAndResponse.ParticleRadius;
	float3 Result61 = Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleTraceOrigin - Result60;
	float3 Result62 = Context.Map.Collision.CollisionQueryAndResponse.TraceVectorLengthMultiplier * Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleForceContribution;
	float3 Result63 = Result60 + Result62;
	float3 Constant117 = float3(0,0,-1);
	float Constant118 = 1e-05;
	float Constant119 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction1;
	float DirectionAndLengthSafe_Func_Output_Length1;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold1;
	DirectionAndLengthSafe_Func_(Result63, Constant117, Constant118, Constant119, DirectionAndLengthSafe_Func_Output_Direction1, DirectionAndLengthSafe_Func_Output_Length1, DirectionAndLengthSafe_Func_Output_BelowThreshold1, Context);
	float Result64 = min(DirectionAndLengthSafe_Func_Output_Length1, Context.Map.Collision.CollisionQueryAndResponse.MaxTraceLength);
	float3 Result65 = DirectionAndLengthSafe_Func_Output_Direction1 * Result64;
	float3 Result66 = Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleTraceOrigin + Result65;
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleTraceWorldStart = Result61;
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleTraceWorldEnd = Result66;
	int Constant120 = 1;
	int PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_NextFrameQueryID;
	bool PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_CollisionValid;
	bool PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_IsTraceInsideMesh;
	float3 PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_CollisionPosWorld;
	float3 PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_CollisionNormal;
	float PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_CollisionMaterialFriction;
	float PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_CollisionMaterialRestitution;
	PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQuery(0, Context.Map.Particles.Collision.CollisionQueryAndResponse.CollisionID, Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleTraceWorldStart, Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleTraceWorldEnd, Constant120, PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_NextFrameQueryID, PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_CollisionValid, PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_IsTraceInsideMesh, PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_CollisionPosWorld, PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_CollisionNormal, PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_CollisionMaterialFriction, PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_CollisionMaterialRestitution);
	bool Result67 = !PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_IsTraceInsideMesh;
	bool Result68 = PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_CollisionValid && Result67;
	bool Constant121 = false;
	bool Constant122 = true;
	Context.Map.Particles.Collision.CollisionQueryAndResponse.CollisionID = PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_NextFrameQueryID;
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleReturnedCollisionValidBool = Result68;
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleReturnedCollisionWorldPosition = PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_CollisionPosWorld;
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleReturnedCollisionNormal = PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_CollisionNormal;
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleReturnedFriction = PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponseQueryOutput_CollisionMaterialFriction;
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleReturnedRestitution = Context.Map.Collision.CollisionQueryAndResponse.ParticleRestitutionCoeffiecient;
	Context.Map.DataInstance.Alive = Context.Map.DataInstance.Alive;
	Context.Map.OUTPUT_VAR.Collision.CollisionQueryAndResponse.DepthBasedCollisionParticleOccluded = Constant121;
	Context.Map.OUTPUT_VAR.Collision.CollisionQueryAndResponse.ParticleOnScreen = Constant122;
	float3 Constant123 = float3(0,0,1);
	float3 Constant124 = float3(0,0,-1e+16);
	float3 PlaneNormal_IfResult;
	float3 PlanePivotPoint_IfResult;
	if(Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleReturnedCollisionValidBool)
	{
	PlaneNormal_IfResult = Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleReturnedCollisionNormal;
	PlanePivotPoint_IfResult = Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleReturnedCollisionWorldPosition;
	}
	else
	{
	PlaneNormal_IfResult = Constant123;
	PlanePivotPoint_IfResult = Constant124;
	}
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModulePlaneNormal = PlaneNormal_IfResult;
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModulePlanePivotPoint = PlanePivotPoint_IfResult;
	bool PlaneSphereCollisionDetection_Func_Output_Collides;
	float3 PlaneSphereCollisionDetection_Func_Output_IntersectionLocation;
	float3 PlaneSphereCollisionDetection_Func_Output_PreASC45IntersectionSphereCenterLocation;
	float3 PlaneSphereCollisionDetection_Func_Output_InitialPositionRelativeCollisionLocation;
	float PlaneSphereCollisionDetection_Func_Output_TimeElapsedToCollision;
	float PlaneSphereCollisionDetection_Func_Output_RemainingTimePostCollision;
	float PlaneSphereCollisionDetection_Func_Output_PercentageofTimeUsedToPerformCollision;
	float PlaneSphereCollisionDetection_Func_Output_InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision;
	float PlaneSphereCollisionDetection_Func_Output_UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane;
	PlaneSphereCollisionDetection_Func_(Context.Map.Local.Collision.CollisionQueryAndResponse.ModulePlaneNormal, Context.Map.Local.Collision.CollisionQueryAndResponse.ModulePlanePivotPoint, Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleTraceOrigin, Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleAttemptedMovementThisUpdate, Context.Map.Collision.CollisionQueryAndResponse.ParticleRadius, Context.Map.Collision.CollisionQueryAndResponse.DeltaTime, Context.Map.Collision.CollisionQueryAndResponse.MaxIntersectionCorrectionDistance, PlaneSphereCollisionDetection_Func_Output_Collides, PlaneSphereCollisionDetection_Func_Output_IntersectionLocation, PlaneSphereCollisionDetection_Func_Output_PreASC45IntersectionSphereCenterLocation, PlaneSphereCollisionDetection_Func_Output_InitialPositionRelativeCollisionLocation, PlaneSphereCollisionDetection_Func_Output_TimeElapsedToCollision, PlaneSphereCollisionDetection_Func_Output_RemainingTimePostCollision, PlaneSphereCollisionDetection_Func_Output_PercentageofTimeUsedToPerformCollision, PlaneSphereCollisionDetection_Func_Output_InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision, PlaneSphereCollisionDetection_Func_Output_UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane, Context);
	Context.Map.Transient.CollisionWorldPosition = PlaneSphereCollisionDetection_Func_Output_IntersectionLocation;
	Context.Map.Transient.CollisionParticleWorldPosition = PlaneSphereCollisionDetection_Func_Output_PreASC45IntersectionSphereCenterLocation;
	Context.Map.Transient.CollisionParticleRelativeCollisionLocation = PlaneSphereCollisionDetection_Func_Output_InitialPositionRelativeCollisionLocation;
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleTickDeltaForThisCollisionUpdate = PlaneSphereCollisionDetection_Func_Output_TimeElapsedToCollision;
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModulePhysicsDeltaTime = PlaneSphereCollisionDetection_Func_Output_RemainingTimePostCollision;
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModulePercentageOfTickDedicatedToUpdatingPosition = PlaneSphereCollisionDetection_Func_Output_PercentageofTimeUsedToPerformCollision;
	Context.Map.OUTPUT_VAR.Collision.CollisionQueryAndResponse.CollisionPenetrationDistance = PlaneSphereCollisionDetection_Func_Output_InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision;
	Context.Map.Transient.CollisionDistanceToCollision = PlaneSphereCollisionDetection_Func_Output_UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane;
	float Constant133 = 0;
	bool Result99 = NiagaraAll(Context.Map.Transient.CollisionDistanceToCollision <= Constant133);
	bool Result100 = Context.Map.Collision.CollisionQueryAndResponse.CollisionEnabled && Result99;
	bool Result101 = Result100 || Context.Map.Particles.HasCollided;
	Context.Map.OUTPUT_VAR.Collision.CollisionQueryAndResponse.PhysicsCollidesThisFrame = Result100;
	Context.Map.Particles.HasCollided = Result101;
	float3 Result102 = -(Context.Map.Local.Collision.CollisionQueryAndResponse.ModulePlaneNormal);
	float Result103 = dot(Result102,Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleAttemptedMovementThisUpdate);
	float Result104 = Context.Map.Collision.CollisionQueryAndResponse.DeltaTime * Context.Map.Collision.CollisionQueryAndResponse.DeltaTime;
	float3 Result105 = Result104 * Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleInitialForceDividedByMass;
	float Result106 = dot(Result102,Result105);
	float Result107 = Result103 - Result106;
	float Constant134 = 0.1;
	bool Result108 = NiagaraAll(Result107 < Constant134);
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleRemoveRestitution = Result108;
	float3 Result109 = Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleAttemptedMovementThisUpdate / Context.Map.Collision.CollisionQueryAndResponse.DeltaTime;
	float float_IfResult4;
	if(Context.Map.OUTPUT_VAR.Collision.CollisionQueryAndResponse.PhysicsCollidesThisFrame)
	{
	float_IfResult4 = Context.Map.Local.Collision.CollisionQueryAndResponse.ModulePhysicsDeltaTime;
	}
	else
	{
	float_IfResult4 = Context.Map.Collision.CollisionQueryAndResponse.DeltaTime;
	}
	float Constant135 = 0;
	float float_IfResult5;
	if(Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleRemoveRestitution)
	{
	float_IfResult5 = Constant135;
	}
	else
	{
	float_IfResult5 = Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleReturnedRestitution;
	}
	Context.Map.Transient.CollisionValid = Context.Map.OUTPUT_VAR.Collision.CollisionQueryAndResponse.PhysicsCollidesThisFrame;
	Context.Map.Transient.CollisionSize = Context.Map.Collision.CollisionQueryAndResponse.ParticleRadius;
	Context.Map.Transient.CollisionNormal = Context.Map.Local.Collision.CollisionQueryAndResponse.ModulePlaneNormal;
	Context.Map.Transient.CollisionVelocity = Result109;
	Context.Map.Transient.CollisionFriction = Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleReturnedFriction;
	Context.Map.Transient.PhysicsDeltaTime = float_IfResult4;
	Context.Map.Transient.CollisionRestitution = float_IfResult5;
	bool Result110 = !Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleRemoveRestitution;
	bool Result111 = Result110 && Context.Map.Collision.CollisionQueryAndResponse.RandomizeCollisionNormal;
	float Constant136 = 1;
	float3 RandomizeCollisionNormals_Func_Output_Ouput;
	RandomizeCollisionNormals_Func_(Context.Map.Transient.CollisionNormal, Constant136, Context.Map.Collision.CollisionQueryAndResponse.CollisionNormalRandomizationPercentage, RandomizeCollisionNormals_Func_Output_Ouput, Context);
	float3 Vector_IfResult5;
	if(Result111)
	{
	Vector_IfResult5 = RandomizeCollisionNormals_Func_Output_Ouput;
	}
	else
	{
	Vector_IfResult5 = Context.Map.Transient.CollisionNormal;
	}
	float3 ReflectVector_Func_Output_Reflected;
	ReflectVector_Func_(Context.Map.Transient.CollisionVelocity, Vector_IfResult5, ReflectVector_Func_Output_Reflected, Context);
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleReflectedVelocity = ReflectVector_Func_Output_Reflected;
	float3 CentimeterMeterConversion_Func_Output_CentimeterstoMeters;
	float3 CentimeterMeterConversion_Func_Output_MeterstoCentimeters;
	CentimeterMeterConversion_Func_(Context.Map.Transient.CollisionVelocity, CentimeterMeterConversion_Func_Output_CentimeterstoMeters, CentimeterMeterConversion_Func_Output_MeterstoCentimeters, Context);
	float3 Result147 = Context.Map.Particles.Mass * CentimeterMeterConversion_Func_Output_CentimeterstoMeters;
	float Constant160 = -1;
	float3 Result148 = Result147 * Constant160;
	float Result149 = dot(Result148,Context.Map.Transient.CollisionNormal);
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleNormalForceInNewtons = Result149;
	float3 ProjectVectorOnPlane_Func_Output_Ouput;
	ProjectVectorOnPlane_Func_(Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleReflectedVelocity, Context.Map.Transient.CollisionNormal, ProjectVectorOnPlane_Func_Output_Ouput, Context);
	float3 Constant161 = float3(0,0,0);
	float Constant162 = 1e-05;
	float Constant163 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction3;
	float DirectionAndLengthSafe_Func_Output_Length3;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold3;
	DirectionAndLengthSafe_Func_(ProjectVectorOnPlane_Func_Output_Ouput, Constant161, Constant162, Constant163, DirectionAndLengthSafe_Func_Output_Direction3, DirectionAndLengthSafe_Func_Output_Length3, DirectionAndLengthSafe_Func_Output_BelowThreshold3, Context);
	float3 CentimeterMeterConversion_Func_Output_CentimeterstoMeters1;
	float3 CentimeterMeterConversion_Func_Output_MeterstoCentimeters1;
	CentimeterMeterConversion_Func_(ProjectVectorOnPlane_Func_Output_Ouput, CentimeterMeterConversion_Func_Output_CentimeterstoMeters1, CentimeterMeterConversion_Func_Output_MeterstoCentimeters1, Context);
	float3 Result153 = CentimeterMeterConversion_Func_Output_CentimeterstoMeters1 * Context.Map.Particles.Mass;
	float float_IfResult6;
	if(Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleRemoveRestitution)
	{
	float_IfResult6 = Context.Map.Collision.CollisionQueryAndResponse.DynamicFrictionCoefficient;
	}
	else
	{
	float_IfResult6 = Context.Map.Collision.CollisionQueryAndResponse.BounceCollisionFriction;
	}
	float3 Result154 = DirectionAndLengthSafe_Func_Output_Direction3 * float_IfResult6 * Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleNormalForceInNewtons;
	float3 Result155 = Result153 - Result154;
	float3 Constant164 = float3(0,0,0);
	float Constant165 = 1e-05;
	float Constant166 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction4;
	float DirectionAndLengthSafe_Func_Output_Length4;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold4;
	DirectionAndLengthSafe_Func_(Result155, Constant164, Constant165, Constant166, DirectionAndLengthSafe_Func_Output_Direction4, DirectionAndLengthSafe_Func_Output_Length4, DirectionAndLengthSafe_Func_Output_BelowThreshold4, Context);
	float Result156 = dot(DirectionAndLengthSafe_Func_Output_Direction3,DirectionAndLengthSafe_Func_Output_Direction4);
	float Constant167 = 0;
	bool Result157 = NiagaraAll(Result156 <= Constant167);
	float3 Vector_IfResult6;
	if(Result157)
	{
	Vector_IfResult6 = Result153;
	}
	else
	{
	Vector_IfResult6 = Result154;
	}
	float Constant168 = -1;
	float3 Result158 = Vector_IfResult6 * Constant168;
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleFrictionForceVectorInNewtons = Result158;
	float3 Result159 = Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleFrictionForceVectorInNewtons / Context.Map.Particles.Mass;
	float3 CentimeterMeterConversion_Func_Output_CentimeterstoMeters2;
	float3 CentimeterMeterConversion_Func_Output_MeterstoCentimeters2;
	CentimeterMeterConversion_Func_(Result159, CentimeterMeterConversion_Func_Output_CentimeterstoMeters2, CentimeterMeterConversion_Func_Output_MeterstoCentimeters2, Context);
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleFrictionForceVelocityVector = CentimeterMeterConversion_Func_Output_MeterstoCentimeters2;
	float3 Result160 = Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleReflectedVelocity + Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleFrictionForceVelocityVector;
	float Result161 = dot(Context.Map.Transient.CollisionNormal,Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleReflectedVelocity);
	float3 Result162 = Context.Map.Transient.CollisionNormal * Result161;
	float Result163 = 1 - Context.Map.Transient.CollisionRestitution;
	float3 Result164 = Result162 * Result163;
	float3 Result165 = Result160 - Result164;
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleReflectedVelocityWithFrictionApplied = Result165;
	float3 Particleposition_IfResult;
	if(Context.Map.Transient.CollisionValid)
	{
	Particleposition_IfResult = Context.Map.Transient.CollisionParticleWorldPosition;
	}
	else
	{
	Particleposition_IfResult = Context.Map.Particles.Position;
	}
	Context.Map.Particles.Position = Particleposition_IfResult;
	float3 Constant169 = float3(0,0,1);
	float Constant170 = 1e-05;
	float Constant171 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction5;
	float DirectionAndLengthSafe_Func_Output_Length5;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold5;
	DirectionAndLengthSafe_Func_(Context.Map.Transient.CollisionVelocity, Constant169, Constant170, Constant171, DirectionAndLengthSafe_Func_Output_Direction5, DirectionAndLengthSafe_Func_Output_Length5, DirectionAndLengthSafe_Func_Output_BelowThreshold5, Context);
	float Result166 = dot(DirectionAndLengthSafe_Func_Output_Direction5,Context.Map.Transient.CollisionNormal);
	float Constant172 = 0;
	bool Result167 = NiagaraAll(Result166 < Constant172);
	bool Result168 = Result167 && Context.Map.Transient.CollisionValid;
	float3 Constant173 = float3(0,0,0);
	float3 physicsforce_IfResult;
	float3 Velocity_IfResult;
	if(Result168)
	{
	physicsforce_IfResult = Constant173;
	Velocity_IfResult = Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleReflectedVelocityWithFrictionApplied;
	}
	else
	{
	physicsforce_IfResult = Context.Map.Transient.PhysicsForce;
	Velocity_IfResult = Context.Map.Particles.Velocity;
	}
	Context.Map.Transient.PhysicsForce = physicsforce_IfResult;
	Context.Map.Particles.Velocity = Velocity_IfResult;
}

void Collision_CollisionQueryAndResponse001_Emitter_Func_(inout FSimulationContext Context)
{
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleInitialDataInstanceAlive = Context.Map.DataInstance.Alive;
	Context.Map.Collision.CollisionQueryAndResponse001.DeltaTime = Context.Map.Collision.CollisionQueryAndResponse001.DeltaTime;
	float3 Result169 = Context.Map.Transient.PhysicsForce / Context.Map.Particles.Mass;
	float3 Result170 = Result169 * Context.Map.Collision.CollisionQueryAndResponse001.DeltaTime;
	float3 Result171 = Result170 + Context.Map.Particles.Velocity;
	float3 Result172 = Result171 * Context.Map.Collision.CollisionQueryAndResponse001.DeltaTime;
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleTraceOrigin = Context.Map.Particles.Position;
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleForceContribution = Result170;
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleAttemptedMovementThisUpdate = Result172;
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleInitialForceDividedByMass = Result169;
	float3 Constant197 = float3(0,0,-1);
	float Constant198 = 1e-05;
	float Constant199 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction6;
	float DirectionAndLengthSafe_Func_Output_Length6;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold6;
	DirectionAndLengthSafe_Func_(Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleAttemptedMovementThisUpdate, Constant197, Constant198, Constant199, DirectionAndLengthSafe_Func_Output_Direction6, DirectionAndLengthSafe_Func_Output_Length6, DirectionAndLengthSafe_Func_Output_BelowThreshold6, Context);
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleTraceVector = Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleAttemptedMovementThisUpdate;
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleTraceDirection = DirectionAndLengthSafe_Func_Output_Direction6;
	float3 Result173 = DirectionAndLengthSafe_Func_Output_Direction6 * Context.Map.Collision.CollisionQueryAndResponse001.ParticleRadius;
	float3 Result174 = Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleTraceOrigin - Result173;
	float3 Result175 = Context.Map.Collision.CollisionQueryAndResponse001.TraceVectorLengthMultiplier * Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleAttemptedMovementThisUpdate;
	float3 Result176 = Result173 + Result175;
	float3 Constant200 = float3(0,0,-1);
	float Constant201 = 1e-05;
	float Constant202 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction7;
	float DirectionAndLengthSafe_Func_Output_Length7;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold7;
	DirectionAndLengthSafe_Func_(Result176, Constant200, Constant201, Constant202, DirectionAndLengthSafe_Func_Output_Direction7, DirectionAndLengthSafe_Func_Output_Length7, DirectionAndLengthSafe_Func_Output_BelowThreshold7, Context);
	float Result177 = min(DirectionAndLengthSafe_Func_Output_Length7, Context.Map.Collision.CollisionQueryAndResponse001.MaxTraceLength);
	float3 Result178 = DirectionAndLengthSafe_Func_Output_Direction7 * Result177;
	float3 Result179 = Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleTraceOrigin + Result178;
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleTraceWorldStart = Result174;
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleTraceWorldEnd = Result179;
	int Constant203 = 1;
	int PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_NextFrameQueryID;
	bool PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_CollisionValid;
	bool PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_IsTraceInsideMesh;
	float3 PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_CollisionPosWorld;
	float3 PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_CollisionNormal;
	float PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_CollisionMaterialFriction;
	float PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_CollisionMaterialRestitution;
	PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001Query(1, Context.Map.Particles.Collision.CollisionQueryAndResponse001.CollisionID, Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleTraceWorldStart, Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleTraceWorldEnd, Constant203, PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_NextFrameQueryID, PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_CollisionValid, PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_IsTraceInsideMesh, PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_CollisionPosWorld, PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_CollisionNormal, PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_CollisionMaterialFriction, PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_CollisionMaterialRestitution);
	bool Result180 = !PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_IsTraceInsideMesh;
	bool Result181 = PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_CollisionValid && Result180;
	bool Constant204 = false;
	bool Constant205 = true;
	Context.Map.Particles.Collision.CollisionQueryAndResponse001.CollisionID = PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_NextFrameQueryID;
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleReturnedCollisionValidBool = Result181;
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleReturnedCollisionWorldPosition = PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_CollisionPosWorld;
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleReturnedCollisionNormal = PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_CollisionNormal;
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleReturnedFriction = PerformCollisionQueryAsyncCPU_CollisionCollisionQueryAndResponse001QueryOutput_CollisionMaterialFriction;
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleReturnedRestitution = Context.Map.Collision.CollisionQueryAndResponse001.ParticleRestitutionCoeffiecient;
	Context.Map.DataInstance.Alive = Context.Map.DataInstance.Alive;
	Context.Map.OUTPUT_VAR.Collision.CollisionQueryAndResponse001.DepthBasedCollisionParticleOccluded = Constant204;
	Context.Map.OUTPUT_VAR.Collision.CollisionQueryAndResponse001.ParticleOnScreen = Constant205;
	float3 Constant206 = float3(0,0,1);
	float3 Constant207 = float3(0,0,-1e+16);
	float3 PlaneNormal_IfResult1;
	float3 PlanePivotPoint_IfResult1;
	if(Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleReturnedCollisionValidBool)
	{
	PlaneNormal_IfResult1 = Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleReturnedCollisionNormal;
	PlanePivotPoint_IfResult1 = Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleReturnedCollisionWorldPosition;
	}
	else
	{
	PlaneNormal_IfResult1 = Constant206;
	PlanePivotPoint_IfResult1 = Constant207;
	}
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModulePlaneNormal = PlaneNormal_IfResult1;
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModulePlanePivotPoint = PlanePivotPoint_IfResult1;
	bool PlaneSphereCollisionDetection_Func_Output_Collides1;
	float3 PlaneSphereCollisionDetection_Func_Output_IntersectionLocation1;
	float3 PlaneSphereCollisionDetection_Func_Output_PreASC45IntersectionSphereCenterLocation1;
	float3 PlaneSphereCollisionDetection_Func_Output_InitialPositionRelativeCollisionLocation1;
	float PlaneSphereCollisionDetection_Func_Output_TimeElapsedToCollision1;
	float PlaneSphereCollisionDetection_Func_Output_RemainingTimePostCollision1;
	float PlaneSphereCollisionDetection_Func_Output_PercentageofTimeUsedToPerformCollision1;
	float PlaneSphereCollisionDetection_Func_Output_InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision1;
	float PlaneSphereCollisionDetection_Func_Output_UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane1;
	PlaneSphereCollisionDetection_Func_(Context.Map.Local.Collision.CollisionQueryAndResponse001.ModulePlaneNormal, Context.Map.Local.Collision.CollisionQueryAndResponse001.ModulePlanePivotPoint, Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleTraceOrigin, Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleAttemptedMovementThisUpdate, Context.Map.Collision.CollisionQueryAndResponse001.ParticleRadius, Context.Map.Collision.CollisionQueryAndResponse001.DeltaTime, Context.Map.Collision.CollisionQueryAndResponse001.MaxIntersectionCorrectionDistance, PlaneSphereCollisionDetection_Func_Output_Collides1, PlaneSphereCollisionDetection_Func_Output_IntersectionLocation1, PlaneSphereCollisionDetection_Func_Output_PreASC45IntersectionSphereCenterLocation1, PlaneSphereCollisionDetection_Func_Output_InitialPositionRelativeCollisionLocation1, PlaneSphereCollisionDetection_Func_Output_TimeElapsedToCollision1, PlaneSphereCollisionDetection_Func_Output_RemainingTimePostCollision1, PlaneSphereCollisionDetection_Func_Output_PercentageofTimeUsedToPerformCollision1, PlaneSphereCollisionDetection_Func_Output_InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision1, PlaneSphereCollisionDetection_Func_Output_UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane1, Context);
	Context.Map.Transient.CollisionWorldPosition = PlaneSphereCollisionDetection_Func_Output_IntersectionLocation1;
	Context.Map.Transient.CollisionParticleWorldPosition = PlaneSphereCollisionDetection_Func_Output_PreASC45IntersectionSphereCenterLocation1;
	Context.Map.Transient.CollisionParticleRelativeCollisionLocation = PlaneSphereCollisionDetection_Func_Output_InitialPositionRelativeCollisionLocation1;
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleTickDeltaForThisCollisionUpdate = PlaneSphereCollisionDetection_Func_Output_TimeElapsedToCollision1;
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModulePhysicsDeltaTime = PlaneSphereCollisionDetection_Func_Output_RemainingTimePostCollision1;
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModulePercentageOfTickDedicatedToUpdatingPosition = PlaneSphereCollisionDetection_Func_Output_PercentageofTimeUsedToPerformCollision1;
	Context.Map.OUTPUT_VAR.Collision.CollisionQueryAndResponse001.CollisionPenetrationDistance = PlaneSphereCollisionDetection_Func_Output_InitialDistanceBetweenTheSphereASC39sSurfaceandtheCollision1;
	Context.Map.Transient.CollisionDistanceToCollision = PlaneSphereCollisionDetection_Func_Output_UninterruptedAnimatedSphereASC39sDistancetoCollisionPlane1;
	float Constant208 = 0;
	bool Result182 = NiagaraAll(Context.Map.Transient.CollisionDistanceToCollision <= Constant208);
	bool Result183 = Context.Map.Collision.CollisionQueryAndResponse001.CollisionEnabled && Result182;
	bool Result184 = Result183 || Context.Map.Particles.HasCollided;
	Context.Map.OUTPUT_VAR.Collision.CollisionQueryAndResponse001.PhysicsCollidesThisFrame = Result183;
	Context.Map.Particles.HasCollided = Result184;
	float3 Result185 = -(Context.Map.Local.Collision.CollisionQueryAndResponse001.ModulePlaneNormal);
	float Result186 = dot(Result185,Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleAttemptedMovementThisUpdate);
	float Result187 = Context.Map.Collision.CollisionQueryAndResponse001.DeltaTime * Context.Map.Collision.CollisionQueryAndResponse001.DeltaTime;
	float3 Result188 = Result187 * Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleInitialForceDividedByMass;
	float Result189 = dot(Result185,Result188);
	float Result190 = Result186 - Result189;
	float Constant209 = 0.1;
	bool Result191 = NiagaraAll(Result190 < Constant209);
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleRemoveRestitution = Result191;
	float3 Result192 = Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleAttemptedMovementThisUpdate / Context.Map.Collision.CollisionQueryAndResponse001.DeltaTime;
	float float_IfResult7;
	if(Context.Map.OUTPUT_VAR.Collision.CollisionQueryAndResponse001.PhysicsCollidesThisFrame)
	{
	float_IfResult7 = Context.Map.Local.Collision.CollisionQueryAndResponse001.ModulePhysicsDeltaTime;
	}
	else
	{
	float_IfResult7 = Context.Map.Collision.CollisionQueryAndResponse001.DeltaTime;
	}
	float Constant210 = 0;
	float float_IfResult8;
	if(Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleRemoveRestitution)
	{
	float_IfResult8 = Constant210;
	}
	else
	{
	float_IfResult8 = Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleReturnedRestitution;
	}
	Context.Map.Transient.CollisionValid = Context.Map.OUTPUT_VAR.Collision.CollisionQueryAndResponse001.PhysicsCollidesThisFrame;
	Context.Map.Transient.CollisionSize = Context.Map.Collision.CollisionQueryAndResponse001.ParticleRadius;
	Context.Map.Transient.CollisionNormal = Context.Map.Local.Collision.CollisionQueryAndResponse001.ModulePlaneNormal;
	Context.Map.Transient.CollisionVelocity = Result192;
	Context.Map.Transient.CollisionFriction = Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleReturnedFriction;
	Context.Map.Transient.PhysicsDeltaTime = float_IfResult7;
	Context.Map.Transient.CollisionRestitution = float_IfResult8;
	bool Result193 = !Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleRemoveRestitution;
	bool Result194 = Result193 && Context.Map.Collision.CollisionQueryAndResponse001.RandomizeCollisionNormal;
	float Constant211 = 1;
	float3 RandomizeCollisionNormals_Func_Output_Ouput1;
	RandomizeCollisionNormals_Func_(Context.Map.Transient.CollisionNormal, Constant211, Context.Map.Collision.CollisionQueryAndResponse001.CollisionNormalRandomizationPercentage, RandomizeCollisionNormals_Func_Output_Ouput1, Context);
	float3 Vector_IfResult7;
	if(Result194)
	{
	Vector_IfResult7 = RandomizeCollisionNormals_Func_Output_Ouput1;
	}
	else
	{
	Vector_IfResult7 = Context.Map.Transient.CollisionNormal;
	}
	float3 ReflectVector_Func_Output_Reflected1;
	ReflectVector_Func_(Context.Map.Transient.CollisionVelocity, Vector_IfResult7, ReflectVector_Func_Output_Reflected1, Context);
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleReflectedVelocity = ReflectVector_Func_Output_Reflected1;
	float3 CentimeterMeterConversion_Func_Output_CentimeterstoMeters3;
	float3 CentimeterMeterConversion_Func_Output_MeterstoCentimeters3;
	CentimeterMeterConversion_Func_(Context.Map.Transient.CollisionVelocity, CentimeterMeterConversion_Func_Output_CentimeterstoMeters3, CentimeterMeterConversion_Func_Output_MeterstoCentimeters3, Context);
	float3 Result195 = Context.Map.Particles.Mass * CentimeterMeterConversion_Func_Output_CentimeterstoMeters3;
	float Constant212 = -1;
	float3 Result196 = Result195 * Constant212;
	float Result197 = dot(Result196,Context.Map.Transient.CollisionNormal);
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleNormalForceInNewtons = Result197;
	float3 ProjectVectorOnPlane_Func_Output_Ouput1;
	ProjectVectorOnPlane_Func_(Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleReflectedVelocity, Context.Map.Transient.CollisionNormal, ProjectVectorOnPlane_Func_Output_Ouput1, Context);
	float3 Constant213 = float3(0,0,0);
	float Constant214 = 1e-05;
	float Constant215 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction8;
	float DirectionAndLengthSafe_Func_Output_Length8;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold8;
	DirectionAndLengthSafe_Func_(ProjectVectorOnPlane_Func_Output_Ouput1, Constant213, Constant214, Constant215, DirectionAndLengthSafe_Func_Output_Direction8, DirectionAndLengthSafe_Func_Output_Length8, DirectionAndLengthSafe_Func_Output_BelowThreshold8, Context);
	float3 CentimeterMeterConversion_Func_Output_CentimeterstoMeters4;
	float3 CentimeterMeterConversion_Func_Output_MeterstoCentimeters4;
	CentimeterMeterConversion_Func_(ProjectVectorOnPlane_Func_Output_Ouput1, CentimeterMeterConversion_Func_Output_CentimeterstoMeters4, CentimeterMeterConversion_Func_Output_MeterstoCentimeters4, Context);
	float3 Result198 = CentimeterMeterConversion_Func_Output_CentimeterstoMeters4 * Context.Map.Particles.Mass;
	float float_IfResult9;
	if(Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleRemoveRestitution)
	{
	float_IfResult9 = Context.Map.Collision.CollisionQueryAndResponse001.DynamicFrictionCoefficient;
	}
	else
	{
	float_IfResult9 = Context.Map.Collision.CollisionQueryAndResponse001.BounceCollisionFriction;
	}
	float3 Result199 = DirectionAndLengthSafe_Func_Output_Direction8 * float_IfResult9 * Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleNormalForceInNewtons;
	float3 Result200 = Result198 - Result199;
	float3 Constant216 = float3(0,0,0);
	float Constant217 = 1e-05;
	float Constant218 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction9;
	float DirectionAndLengthSafe_Func_Output_Length9;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold9;
	DirectionAndLengthSafe_Func_(Result200, Constant216, Constant217, Constant218, DirectionAndLengthSafe_Func_Output_Direction9, DirectionAndLengthSafe_Func_Output_Length9, DirectionAndLengthSafe_Func_Output_BelowThreshold9, Context);
	float Result201 = dot(DirectionAndLengthSafe_Func_Output_Direction8,DirectionAndLengthSafe_Func_Output_Direction9);
	float Constant219 = 0;
	bool Result202 = NiagaraAll(Result201 <= Constant219);
	float3 Vector_IfResult8;
	if(Result202)
	{
	Vector_IfResult8 = Result198;
	}
	else
	{
	Vector_IfResult8 = Result199;
	}
	float Constant220 = -1;
	float3 Result203 = Vector_IfResult8 * Constant220;
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleFrictionForceVectorInNewtons = Result203;
	float3 Result204 = Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleFrictionForceVectorInNewtons / Context.Map.Particles.Mass;
	float3 CentimeterMeterConversion_Func_Output_CentimeterstoMeters5;
	float3 CentimeterMeterConversion_Func_Output_MeterstoCentimeters5;
	CentimeterMeterConversion_Func_(Result204, CentimeterMeterConversion_Func_Output_CentimeterstoMeters5, CentimeterMeterConversion_Func_Output_MeterstoCentimeters5, Context);
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleFrictionForceVelocityVector = CentimeterMeterConversion_Func_Output_MeterstoCentimeters5;
	float3 Result205 = Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleReflectedVelocity + Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleFrictionForceVelocityVector;
	float Result206 = dot(Context.Map.Transient.CollisionNormal,Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleReflectedVelocity);
	float3 Result207 = Context.Map.Transient.CollisionNormal * Result206;
	float Result208 = 1 - Context.Map.Transient.CollisionRestitution;
	float3 Result209 = Result207 * Result208;
	float3 Result210 = Result205 - Result209;
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleReflectedVelocityWithFrictionApplied = Result210;
	float3 Particleposition_IfResult1;
	if(Context.Map.Transient.CollisionValid)
	{
	Particleposition_IfResult1 = Context.Map.Transient.CollisionParticleWorldPosition;
	}
	else
	{
	Particleposition_IfResult1 = Context.Map.Particles.Position;
	}
	Context.Map.Particles.Position = Particleposition_IfResult1;
	float3 Constant221 = float3(0,0,1);
	float Constant222 = 1e-05;
	float Constant223 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction10;
	float DirectionAndLengthSafe_Func_Output_Length10;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold10;
	DirectionAndLengthSafe_Func_(Context.Map.Transient.CollisionVelocity, Constant221, Constant222, Constant223, DirectionAndLengthSafe_Func_Output_Direction10, DirectionAndLengthSafe_Func_Output_Length10, DirectionAndLengthSafe_Func_Output_BelowThreshold10, Context);
	float Result211 = dot(DirectionAndLengthSafe_Func_Output_Direction10,Context.Map.Transient.CollisionNormal);
	float Constant224 = 0;
	bool Result212 = NiagaraAll(Result211 < Constant224);
	bool Result213 = Result212 && Context.Map.Transient.CollisionValid;
	float3 Constant225 = float3(0,0,0);
	float3 physicsforce_IfResult1;
	float3 Velocity_IfResult1;
	if(Result213)
	{
	physicsforce_IfResult1 = Constant225;
	Velocity_IfResult1 = Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleReflectedVelocityWithFrictionApplied;
	}
	else
	{
	physicsforce_IfResult1 = Context.Map.Transient.PhysicsForce;
	Velocity_IfResult1 = Context.Map.Particles.Velocity;
	}
	Context.Map.Transient.PhysicsForce = physicsforce_IfResult1;
	Context.Map.Particles.Velocity = Velocity_IfResult1;
}

void Collision_TransformPosition001_Emitter_Func_(float3 In_InPosition, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant245 = false;
	float4x4 Matrix_IfResult4;
	float4x4 Matrix001_IfResult3;
	if(In_ApplyScale)
	{
	Matrix_IfResult4 = Context.Map.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult3 = Context.Map.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult4 = Context.Map.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult3 = Context.Map.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal3;
	float4x4 TransformBase_Func_Output_OutTransform3;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult4, Matrix001_IfResult3, Constant245, TransformBase_Func_Output_bUseOriginal3, TransformBase_Func_Output_OutTransform3, Context);
	float3 Result237 = mul(float4(In_InPosition,1.0),TransformBase_Func_Output_OutTransform3).xyz;
	float3 Vector_IfResult11;
	if(TransformBase_Func_Output_bUseOriginal3)
	{
	Vector_IfResult11 = In_InPosition;
	}
	else
	{
	Vector_IfResult11 = Result237;
	}
	Out_OutPosition = Vector_IfResult11;
}

void Collision_TransformVector001_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant249 = false;
	float4x4 Matrix_IfResult5;
	float4x4 Matrix001_IfResult4;
	if(In_ApplyScale)
	{
	Matrix_IfResult5 = Context.Map.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult4 = Context.Map.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult5 = Context.Map.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult4 = Context.Map.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal4;
	float4x4 TransformBase_Func_Output_OutTransform4;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult5, Matrix001_IfResult4, Constant249, TransformBase_Func_Output_bUseOriginal4, TransformBase_Func_Output_OutTransform4, Context);
	float3 Result238 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform4).xyz;
	float3 Vector_IfResult12;
	if(TransformBase_Func_Output_bUseOriginal4)
	{
	Vector_IfResult12 = In_InVector;
	}
	else
	{
	Vector_IfResult12 = Result238;
	}
	Out_OutVector = Vector_IfResult12;
}

void Collision_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant253 = false;
	float4x4 Matrix_IfResult6;
	float4x4 Matrix001_IfResult5;
	if(In_ApplyScale)
	{
	Matrix_IfResult6 = Context.Map.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult5 = Context.Map.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult6 = Context.Map.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult5 = Context.Map.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal5;
	float4x4 TransformBase_Func_Output_OutTransform5;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult6, Matrix001_IfResult5, Constant253, TransformBase_Func_Output_bUseOriginal5, TransformBase_Func_Output_OutTransform5, Context);
	float3 Result239 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform5).xyz;
	float3 Vector_IfResult13;
	if(TransformBase_Func_Output_bUseOriginal5)
	{
	Vector_IfResult13 = In_InVector;
	}
	else
	{
	Vector_IfResult13 = Result239;
	}
	Out_OutVector = Vector_IfResult13;
}

void Collision_Emitter_Func_(inout FSimulationContext Context)
{
	float CalculateRadiusFromSpriteSize_Particle_Method_NewEnumerator0_Func_Output_Radius;
	CalculateRadiusFromSpriteSize_Particle_Method_NewEnumerator0_Func_(Context.Map.Particles.SpriteSize, CalculateRadiusFromSpriteSize_Particle_Method_NewEnumerator0_Func_Output_Radius, Context);
	float Result21 = Context.Map.Constants.Emitter.Collision.ParticleRadiusScale * CalculateRadiusFromSpriteSize_Particle_Method_NewEnumerator0_Func_Output_Radius;
	Context.Map.Local.Collision.ModuleParticleRadius = Result21;
	int Constant71 = 0;
	int Constant72 = 1;
	bool Constant73 = false;
	float3 Collision_TransformPosition_Emitter_Func_Output_OutPosition;
	Collision_TransformPosition_Emitter_Func_(Context.Map.Particles.Position, Constant71, Constant72, Constant73, Collision_TransformPosition_Emitter_Func_Output_OutPosition, Context);
	int Constant81 = 0;
	int Constant82 = 1;
	bool Constant83 = false;
	float3 Collision_TransformVector002_Emitter_Func_Output_OutVector;
	Collision_TransformVector002_Emitter_Func_(Context.Map.Transient.PhysicsForce, Constant81, Constant82, Constant83, Collision_TransformVector002_Emitter_Func_Output_OutVector, Context);
	int Constant85 = 0;
	int Constant86 = 1;
	bool Constant87 = false;
	float3 Collision_TransformVector003_Emitter_Func_Output_OutVector;
	Collision_TransformVector003_Emitter_Func_(Context.Map.Particles.Velocity, Constant85, Constant86, Constant87, Collision_TransformVector003_Emitter_Func_Output_OutVector, Context);
	Context.Map.OUTPUT_VAR.Collision.TempPreviousPosition = Collision_TransformPosition_Emitter_Func_Output_OutPosition;
	Context.Map.OUTPUT_VAR.Collision.TempPreviousForce = Collision_TransformVector002_Emitter_Func_Output_OutVector;
	Context.Map.OUTPUT_VAR.Collision.TempPreviousVelocity = Collision_TransformVector003_Emitter_Func_Output_OutVector;
	Context.Map.Particles.Position = Collision_TransformPosition_Emitter_Func_Output_OutPosition;
	Context.Map.Transient.PhysicsForce = Collision_TransformVector002_Emitter_Func_Output_OutVector;
	Context.Map.Particles.Velocity = Collision_TransformVector003_Emitter_Func_Output_OutVector;
	float Constant89 = -1e+07;
	float Constant90 = 0;
	float float_IfResult;
	if(Context.Map.Collision.CorrectInterpenetration)
	{
	float_IfResult = Constant89;
	}
	else
	{
	float_IfResult = Constant90;
	}
	Context.Map.Collision.CollisionQueryAndResponse.DynamicFrictionCoefficient = Context.Map.Constants.Emitter.Collision.Friction;
	Context.Map.Collision.CollisionQueryAndResponse001.DynamicFrictionCoefficient = Context.Map.Constants.Emitter.Collision.Friction;
	Context.Map.Collision.CollisionQueryAndResponse.StaticFrictionCoefficient = Context.Map.Constants.Emitter.Collision.StaticFriction;
	Context.Map.Collision.CollisionQueryAndResponse001.StaticFrictionCoefficient = Context.Map.Constants.Emitter.Collision.StaticFriction;
	Context.Map.Collision.CollisionQueryAndResponse.StaticFrictionEngagementSpeed = Context.Map.Constants.Emitter.Collision.StaticFrictionEngagementSpeed;
	Context.Map.Collision.CollisionQueryAndResponse001.StaticFrictionEngagementSpeed = Context.Map.Constants.Emitter.Collision.StaticFrictionEngagementSpeed;
	Context.Map.Collision.CollisionQueryAndResponse.ParticleRadius = Context.Map.Local.Collision.ModuleParticleRadius;
	Context.Map.Collision.CollisionQueryAndResponse001.ParticleRadius = Context.Map.Local.Collision.ModuleParticleRadius;
	Context.Map.Collision.CollisionQueryAndResponse.ParticleRestitutionCoeffiecient = Context.Map.Constants.Emitter.Collision.Restitution;
	Context.Map.Collision.CollisionQueryAndResponse001.ParticleRestitutionCoeffiecient = Context.Map.Constants.Emitter.Collision.Restitution;
	Context.Map.Collision.CollisionQueryAndResponse.CollisionNormalRandomizationPercentage = Context.Map.Constants.Emitter.Collision.RandomizeCollisionNormal;
	Context.Map.Collision.CollisionQueryAndResponse001.CollisionNormalRandomizationPercentage = Context.Map.Constants.Emitter.Collision.RandomizeCollisionNormal;
	Context.Map.Collision.CollisionQueryAndResponse.CollisionEnabled = Context.Map.Collision.CollisionEnabled;
	Context.Map.Collision.CollisionQueryAndResponse001.CollisionEnabled = Context.Map.Collision.CollisionEnabled;
	Context.Map.Collision.CollisionQueryAndResponse.RandomizeCollisionNormal = Context.Map.Collision.RandomizeCollisionNormalVector;
	Context.Map.Collision.CollisionQueryAndResponse001.RandomizeCollisionNormal = Context.Map.Collision.RandomizeCollisionNormalVector;
	Context.Map.Collision.CollisionQueryAndResponse.UpdateRotationalVelocity = Context.Map.Local.Collision.UpdateMeshRotation;
	Context.Map.Collision.CollisionQueryAndResponse001.UpdateRotationalVelocity = Context.Map.Local.Collision.UpdateMeshRotation;
	Context.Map.Collision.CollisionQueryAndResponse001.BounceCollisionFriction = Context.Map.Constants.Emitter.Collision.FrictionDuringaBounce;
	Context.Map.Collision.CollisionQueryAndResponse.BounceCollisionFriction = Context.Map.Constants.Emitter.Collision.FrictionDuringaBounce;
	Context.Map.Collision.CollisionQueryAndResponse.MaxIntersectionCorrectionDistance = float_IfResult;
	Context.Map.Collision.CollisionQueryAndResponse001.MaxIntersectionCorrectionDistance = float_IfResult;
	Context.Map.Collision.CollisionQueryAndResponse.TraceVectorLengthMultiplier = Context.Map.Constants.Emitter.Collision.CPUTraceVectorLengthMultiplier;
	Context.Map.Collision.CollisionQueryAndResponse001.TraceVectorLengthMultiplier = Context.Map.Constants.Emitter.Collision.CPUTraceVectorLengthMultiplier;
	Context.Map.Collision.CollisionQueryAndResponse.MaxTraceLength = Context.Map.Constants.Emitter.Collision.MaxCPUTraceLength;
	Context.Map.Collision.CollisionQueryAndResponse001.MaxTraceLength = Context.Map.Constants.Emitter.Collision.MaxCPUTraceLength;
	Context.Map.Collision.CollisionQueryAndResponse.DeltaTime = Context.Map.Transient.PhysicsDeltaTime;
	float3 Constant91 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleTraceOrigin = Constant91;
	float3 Constant92 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleForceContribution = Constant92;
	float3 Constant93 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleAttemptedMovementThisUpdate = Constant93;
	float3 Constant94 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleInitialForceDividedByMass = Constant94;
	float3 Constant95 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleTraceWorldStart = Constant95;
	float3 Constant96 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleTraceWorldEnd = Constant96;
	bool Constant97 = (false);
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleReturnedCollisionValidBool = Constant97;
	float3 Constant98 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleReturnedCollisionWorldPosition = Constant98;
	float3 Constant99 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleReturnedCollisionNormal = Constant99;
	float Constant100 = (0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleReturnedFriction = Constant100;
	float Constant101 = (0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleReturnedRestitution = Constant101;
	float3 Constant102 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModulePlaneNormal = Constant102;
	float3 Constant103 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModulePlanePivotPoint = Constant103;
	float Constant104 = (0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModulePhysicsDeltaTime = Constant104;
	float Constant105 = (0.0);
	Context.Map.OUTPUT_VAR.Collision.CollisionQueryAndResponse.CollisionPenetrationDistance = Constant105;
	bool Constant106 = (false);
	Context.Map.OUTPUT_VAR.Collision.CollisionQueryAndResponse.PhysicsCollidesThisFrame = Constant106;
	bool Constant107 = false;
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleRemoveRestitution = Constant107;
	float3 Constant108 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleReflectedVelocity = Constant108;
	float Constant109 = (0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleNormalForceInNewtons = Constant109;
	int Constant110 = 0;
	Context.Map.Collision.CollisionQueryAndResponse.CPUFrictionMergeType = Constant110;
	float3 Constant111 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleFrictionForceVectorInNewtons = Constant111;
	float3 Constant112 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleFrictionForceVelocityVector = Constant112;
	float3 Constant113 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse.ModuleReflectedVelocityWithFrictionApplied = Constant113;
	Collision_CollisionQueryAndResponse_Emitter_Func_(Context);
	Context.Map.OUTPUT_VAR.Collision.ModuleCollision1Valid = Context.Map.Transient.CollisionValid;
	Context.Map.OUTPUT_VAR.Collision.ModuleCollision1Normal = Context.Map.Transient.CollisionNormal;
	Context.Map.Collision.CollisionQueryAndResponse001.DeltaTime = Context.Map.Transient.PhysicsDeltaTime;
	float3 Constant174 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleTraceOrigin = Constant174;
	float3 Constant175 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleForceContribution = Constant175;
	float3 Constant176 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleAttemptedMovementThisUpdate = Constant176;
	float3 Constant177 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleInitialForceDividedByMass = Constant177;
	float3 Constant178 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleTraceWorldStart = Constant178;
	float3 Constant179 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleTraceWorldEnd = Constant179;
	bool Constant180 = (false);
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleReturnedCollisionValidBool = Constant180;
	float3 Constant181 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleReturnedCollisionWorldPosition = Constant181;
	float3 Constant182 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleReturnedCollisionNormal = Constant182;
	float Constant183 = (0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleReturnedFriction = Constant183;
	float Constant184 = (0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleReturnedRestitution = Constant184;
	float3 Constant185 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModulePlaneNormal = Constant185;
	float3 Constant186 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModulePlanePivotPoint = Constant186;
	float Constant187 = (0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModulePhysicsDeltaTime = Constant187;
	float Constant188 = (0.0);
	Context.Map.OUTPUT_VAR.Collision.CollisionQueryAndResponse001.CollisionPenetrationDistance = Constant188;
	bool Constant189 = (false);
	Context.Map.OUTPUT_VAR.Collision.CollisionQueryAndResponse001.PhysicsCollidesThisFrame = Constant189;
	bool Constant190 = false;
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleRemoveRestitution = Constant190;
	float3 Constant191 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleReflectedVelocity = Constant191;
	float Constant192 = (0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleNormalForceInNewtons = Constant192;
	int Constant193 = 0;
	Context.Map.Collision.CollisionQueryAndResponse001.CPUFrictionMergeType = Constant193;
	float3 Constant194 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleFrictionForceVectorInNewtons = Constant194;
	float3 Constant195 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleFrictionForceVelocityVector = Constant195;
	float3 Constant196 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.Collision.CollisionQueryAndResponse001.ModuleReflectedVelocityWithFrictionApplied = Constant196;
	Collision_CollisionQueryAndResponse001_Emitter_Func_(Context);
	Context.Map.OUTPUT_VAR.Collision.ModuleCollision2Valid = Context.Map.Transient.CollisionValid;
	Context.Map.OUTPUT_VAR.Collision.ModuleCollision2Normal = Context.Map.Transient.CollisionNormal;
	bool Result214 = Context.Map.Transient.CollisionValid || Context.Map.OUTPUT_VAR.Collision.ModuleCollision1Valid;
	int Constant226 = 1;
	int Result215 = Context.Map.Particles.NumberOfCollisions + Constant226;
	int int32_IfResult;
	if(Result214)
	{
	int32_IfResult = Result215;
	}
	else
	{
	int32_IfResult = Context.Map.Particles.NumberOfCollisions;
	}
	Context.Map.Transient.CollisionValid = Result214;
	Context.Map.OUTPUT_VAR.Collision.CollisionValid = Result214;
	Context.Map.Particles.NumberOfCollisions = int32_IfResult;
	float Constant227 = 0;
	bool Result216 = NiagaraAll(Context.Map.OUTPUT_VAR.Collision.CollisionQueryAndResponse.CollisionPenetrationDistance < Constant227);
	float Constant228 = 0;
	bool Result217 = NiagaraAll(Context.Map.OUTPUT_VAR.Collision.CollisionQueryAndResponse001.CollisionPenetrationDistance < Constant228);
	bool Result218 = Result216 && Result217;
	float PenetrationFixed1;
	float PenetrationFixed2;
	PenetrationFixed1 = Result216;
	PenetrationFixed2 = Result217;
	float Result219 = PenetrationFixed1 + PenetrationFixed2;
	float Constant229 = 0.5;
	float Result220 = Result219 * Constant229;
	float Result221 = Context.Map.Engine.DeltaTime * Context.Map.Constants.Emitter.Collision.RestStateTimeRange;
	float Result222 = lerp(Context.Map.Particles.RestCounter,Result220,Result221);
	bool Result223 = NiagaraAll(Result222 > Context.Map.Constants.Emitter.Collision.PercentageofPenetrationBeforeRest);
	float Constant230 = -1;
	float Result224 = Context.Map.OUTPUT_VAR.Collision.CollisionQueryAndResponse.CollisionPenetrationDistance * Constant230;
	bool Result225 = NiagaraAll(Result224 > Context.Map.OUTPUT_VAR.Collision.CollisionQueryAndResponse001.CollisionPenetrationDistance);
	float Constant231 = -1;
	float Result226 = Context.Map.Constants.Emitter.Collision.MaximumPenetrationCorrectionDistance * Constant231;
	bool Result227 = NiagaraAll(Result226 > Context.Map.OUTPUT_VAR.Collision.CollisionQueryAndResponse001.CollisionPenetrationDistance);
	bool Result228 = Result225 || Result227;
	bool Result229 = Result218 || Result223 || Result228;
	float3 Constant232 = float3(0,0,0);
	float3 Vector_IfResult9;
	if(Context.Map.OUTPUT_VAR.Collision.ModuleCollision1Valid)
	{
	Vector_IfResult9 = Context.Map.OUTPUT_VAR.Collision.ModuleCollision1Normal;
	}
	else
	{
	Vector_IfResult9 = Constant232;
	}
	float3 Constant233 = float3(0,0,0);
	float3 Vector_IfResult10;
	if(Context.Map.OUTPUT_VAR.Collision.ModuleCollision2Valid)
	{
	Vector_IfResult10 = Context.Map.OUTPUT_VAR.Collision.ModuleCollision2Normal;
	}
	else
	{
	Vector_IfResult10 = Constant233;
	}
	float3 Result230 = Vector_IfResult9 + Vector_IfResult10;
	float3 Constant234 = float3(0,0,1);
	float Constant235 = 1e-05;
	float Constant236 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction11;
	float DirectionAndLengthSafe_Func_Output_Length11;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold11;
	DirectionAndLengthSafe_Func_(Result230, Constant234, Constant235, Constant236, DirectionAndLengthSafe_Func_Output_Direction11, DirectionAndLengthSafe_Func_Output_Length11, DirectionAndLengthSafe_Func_Output_BelowThreshold11, Context);
	float Result231 = dot(DirectionAndLengthSafe_Func_Output_Direction11,Context.Map.Constants.Emitter.Collision.ValidCollisionPlaneNormalForRest);
	float Constant237 = 0.5;
	float Result232 = Context.Map.Constants.Emitter.Collision.MinimumCollisionNormalASC47RestNormalAlignmentPercentage - Constant237;
	float Constant238 = 2;
	float Result233 = Result232 * Constant238;
	bool Result234 = NiagaraAll(Result231 > Result233);
	bool Result235 = Result229 && Result234;
	bool bool_IfResult1;
	if(Context.Map.Collision.ControlRestStateViaSurfaceNormal)
	{
	bool_IfResult1 = Result235;
	}
	else
	{
	bool_IfResult1 = Result229;
	}
	bool Result236 = Context.Map.Collision.EnableRestState && bool_IfResult1 && Context.Map.Collision.CollisionEnabled;
	float3 Constant239 = float3(0,0,0);
	float3 Constant240 = float3(0,0,0);
	float3 Constant241 = float3(0,0,0);
	float3 Position_IfResult;
	float3 Velocity_IfResult2;
	float3 Force_IfResult;
	float deltatime_IfResult;
	if(Context.Map.Transient.CollisionValid)
	{
	Position_IfResult = Context.Map.Particles.Position;
	Velocity_IfResult2 = Context.Map.Particles.Velocity;
	Force_IfResult = Constant241;
	deltatime_IfResult = Context.Map.Transient.PhysicsDeltaTime;
	}
	else
	{
	Position_IfResult = Context.Map.OUTPUT_VAR.Collision.TempPreviousPosition;
	Velocity_IfResult2 = Context.Map.OUTPUT_VAR.Collision.TempPreviousVelocity;
	Force_IfResult = Context.Map.OUTPUT_VAR.Collision.TempPreviousForce;
	deltatime_IfResult = Context.Map.Engine.DeltaTime;
	}
	float3 Position_IfResult1;
	float3 Velocity_IfResult3;
	float3 Force_IfResult1;
	float deltatime_IfResult1;
	if(Result236)
	{
	Position_IfResult1 = Context.Map.OUTPUT_VAR.Collision.TempPreviousPosition;
	Velocity_IfResult3 = Constant239;
	Force_IfResult1 = Constant240;
	deltatime_IfResult1 = deltatime_IfResult;
	}
	else
	{
	Position_IfResult1 = Position_IfResult;
	Velocity_IfResult3 = Velocity_IfResult2;
	Force_IfResult1 = Force_IfResult;
	deltatime_IfResult1 = deltatime_IfResult;
	}
	int Constant242 = 1;
	int Constant243 = 0;
	bool Constant244 = false;
	float3 Collision_TransformPosition001_Emitter_Func_Output_OutPosition;
	Collision_TransformPosition001_Emitter_Func_(Position_IfResult1, Constant242, Constant243, Constant244, Collision_TransformPosition001_Emitter_Func_Output_OutPosition, Context);
	int Constant246 = 1;
	int Constant247 = 0;
	bool Constant248 = false;
	float3 Collision_TransformVector001_Emitter_Func_Output_OutVector;
	Collision_TransformVector001_Emitter_Func_(Velocity_IfResult3, Constant246, Constant247, Constant248, Collision_TransformVector001_Emitter_Func_Output_OutVector, Context);
	int Constant250 = 1;
	int Constant251 = 0;
	bool Constant252 = false;
	float3 Collision_TransformVector_Emitter_Func_Output_OutVector;
	Collision_TransformVector_Emitter_Func_(Force_IfResult1, Constant250, Constant251, Constant252, Collision_TransformVector_Emitter_Func_Output_OutVector, Context);
	bool Result240 = Result223 && Context.Map.Collision.CollisionEnabled;
	Context.Map.Particles.Position = Collision_TransformPosition001_Emitter_Func_Output_OutPosition;
	Context.Map.Particles.Velocity = Collision_TransformVector001_Emitter_Func_Output_OutVector;
	Context.Map.Transient.PhysicsForce = Collision_TransformVector_Emitter_Func_Output_OutVector;
	Context.Map.Transient.PhysicsDeltaTime = deltatime_IfResult1;
	Context.Map.Transient.CollisionIsResting = Result240;
	Context.Map.Particles.RestCounter = Result222;
	Context.Map.OUTPUT_VAR.Collision.ModuleCombinedCollisionNormal = DirectionAndLengthSafe_Func_Output_Direction11;
	Context.Map.Collision.AdvancedAgingRate = Context.Map.Constants.Emitter.Collision.AdvancedAgingRate;
}

void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context)
{
	Context.Map.Local.SolveForcesAndVelocity.DeltaTime = Context.Map.SolveForcesAndVelocity.DeltaTime;
	Context.Map.Local.SolveForcesAndVelocity.PhysicsForce = Context.Map.SolveForcesAndVelocity.Force;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsForce = Context.Map.SolveForcesAndVelocity.Force;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.Map.SolveForcesAndVelocity.Velocity;
	Context.Map.Local.SolveForcesAndVelocity.Mass = Context.Map.SolveForcesAndVelocity.Mass;
	float Constant261 = 0.0001;
	float Result241 = max(Context.Map.Local.SolveForcesAndVelocity.Mass, Constant261);
	float Result242 = Reciprocal(Result241);
	float3 Result243 = Result242 * Context.Map.Local.SolveForcesAndVelocity.PhysicsForce;
	Context.Map.Local.SolveForcesAndVelocity.PhysicsForce = Result243;
	float3 Result244 = Context.Map.Local.SolveForcesAndVelocity.PhysicsForce * Context.Map.Local.SolveForcesAndVelocity.DeltaTime + Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float Constant262 = 0;
	float Result245 = max(Context.Map.Transient.PhysicsDrag, Constant262);
	float Result246 = Context.Map.Local.SolveForcesAndVelocity.DeltaTime * Result245;
	float Constant263 = 1;
	float Result247 = Result246 + Constant263;
	float3 Result248 = Result244 / Result247;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Result248;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsDrag = Context.Map.Transient.PhysicsDrag;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float3 Result249 = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity * Context.Map.Local.SolveForcesAndVelocity.DeltaTime + Context.Map.SolveForcesAndVelocity.Position;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Position = Result249;
	float3 Position_IfResult2;
	float3 Velocity_IfResult4;
	float3 PreviousVelocity_IfResult;
	if(Context.Map.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	Position_IfResult2 = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Position;
	Velocity_IfResult4 = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	}
	else
	{
	Position_IfResult2 = Context.Map.SolveForcesAndVelocity.Position;
	Velocity_IfResult4 = Context.Map.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.Map.SolveForcesAndVelocity.PreviousVelocity;
	}
	Context.Map.Particles.Position = Position_IfResult2;
	Context.Map.Particles.Velocity = Velocity_IfResult4;
	Context.Map.Particles.PreviousVelocity = PreviousVelocity_IfResult;
	float3 Constant264 = float3(0,0,0);
	float Constant265 = 0;
	float3 ForceVector_IfResult;
	float Drag_IfResult;
	if(Context.Map.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	ForceVector_IfResult = Constant264;
	Drag_IfResult = Constant265;
	}
	else
	{
	ForceVector_IfResult = Context.Map.Transient.PhysicsForce;
	Drag_IfResult = Context.Map.Transient.PhysicsDrag;
	}
	Context.Map.Transient.PhysicsForce = ForceVector_IfResult;
	Context.Map.Transient.PhysicsDrag = Drag_IfResult;
}

void ScaleSpriteSizeBySpeed_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Constant269 = float3(0,0,1);
	float Constant270 = 1e-05;
	float Constant271 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction12;
	float DirectionAndLengthSafe_Func_Output_Length12;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold12;
	DirectionAndLengthSafe_Func_(Context.Map.ScaleSpriteSizeBySpeed.SourceVelocity, Constant269, Constant270, Constant271, DirectionAndLengthSafe_Func_Output_Direction12, DirectionAndLengthSafe_Func_Output_Length12, DirectionAndLengthSafe_Func_Output_BelowThreshold12, Context);
	float Constant272 = 0;
	float float_IfResult10;
	if(DirectionAndLengthSafe_Func_Output_BelowThreshold12)
	{
	float_IfResult10 = Constant272;
	}
	else
	{
	float_IfResult10 = DirectionAndLengthSafe_Func_Output_Length12;
	}
	float Constant273 = 0.0001;
	float Constant274 = 0.0001;
	float Result250 = max(Context.Map.Constants.Emitter.ScaleSpriteSizeBySpeed.VelocityThreshold, Constant274);
	float Result251 = clamp(float_IfResult10,Constant273,Result250);
	float Result252 = Result251 / Result250;
	Context.Map.Local.ScaleSpriteSizeBySpeed.NormalizedVelocityRange = Result252;
	float SampleCurve_EmitterScaleFactorCurveOutput_Value;
	SampleCurve_EmitterScaleFactorCurve(Context.Map.Local.ScaleSpriteSizeBySpeed.NormalizedVelocityRange, SampleCurve_EmitterScaleFactorCurveOutput_Value);
	float float_IfResult11;
	if(Context.Map.ScaleSpriteSizeBySpeed.SampleScaleFactorByCurve)
	{
	float_IfResult11 = SampleCurve_EmitterScaleFactorCurveOutput_Value;
	}
	else
	{
	float_IfResult11 = Context.Map.Local.ScaleSpriteSizeBySpeed.NormalizedVelocityRange;
	}
	float Constant275 = 0;
	float Constant276 = 1;
	float Result253 = clamp(float_IfResult11,Constant275,Constant276);
	float2 Result254 = lerp(Context.Map.Constants.Emitter.ScaleSpriteSizeBySpeed.MinScaleFactor,Context.Map.Constants.Emitter.ScaleSpriteSizeBySpeed.MaxScaleFactor,Result253);
	float2 Result255 = Result254 * Context.Map.Transient.SpriteSizeScaleFactor;
	float2 Result256 = Result255 * Context.Map.ScaleSpriteSizeBySpeed.InitialSpriteSize;
	Context.Map.Transient.SpriteSizeScaleFactor = Result255;
	Context.Map.Particles.SpriteSize = Result256;
}

float GetSpawnInterpolation()
{
	return 1.0f;}


void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void Simulate(inout FSimulationContext Context)
{
	EnterStatScope(0 );


	Context.Map.BreakVector.Z = Context.Map.User.Z_Gravity_Minimum;
	Context.Map.BreakVector001.Z = Context.Map.User.Z_Gravity_Maximum;
	float3 BreakVector_Emitter_Func_Output_Vec3;
	BreakVector_Emitter_Func_(BreakVector_Emitter_Func_Output_Vec3, Context);
	float3 BreakVector001_Emitter_Func_Output_Vec3;
	BreakVector001_Emitter_Func_(BreakVector001_Emitter_Func_Output_Vec3, Context);
	Context.Map.UniformRangedVector.Minimum = BreakVector_Emitter_Func_Output_Vec3;
	Context.Map.UniformRangedVector.Maximum = BreakVector001_Emitter_Func_Output_Vec3;
	bool Constant = false;
	Context.Map.UniformRangedVector.OverrideRandomness = Constant;
	int Constant1 = 0;
	Context.Map.UniformRangedVector.RandomnessMode = Constant1;
	bool Constant2 = false;
	Context.Map.UniformRangedVector.OverrideSeed = Constant2;
	bool Constant3 = false;
	Context.Map.UniformRangedVector.FixedRandomSeed = Constant3;
	float3 UniformRangedVector_Emitter_Func_Output_UniformRangedVector;
	UniformRangedVector_Emitter_Func_(UniformRangedVector_Emitter_Func_Output_UniformRangedVector, Context);
	Context.Map.GravityForce.Gravity = UniformRangedVector_Emitter_Func_Output_UniformRangedVector;
	float3 Constant18 = float3(0,0,0);
	Context.Map.Transient.PhysicsForce = Constant18;
	EnterStatScope(1 );
	GravityForce_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant19 = (false);
	Context.Map.OUTPUT_VAR.ParticleState.FirstFrame = Constant19;
	bool Constant20 = true;
	Context.Map.DataInstance.Alive = Constant20;
	Context.Map.ParticleState.DeltaTime = Context.Map.Engine.DeltaTime;
	Context.Map.ParticleState.Lifetime = Context.Map.Particles.Lifetime;
	EnterStatScope(2 );
	ParticleState_Emitter_Func_(Context);
	ExitStatScope( );
	Context.Map.FloatFromCurve001.CurveIndex = Context.Map.Particles.NormalizedAge;
	float FloatFromCurve001_Emitter_Func_Output_Value;
	FloatFromCurve001_Emitter_Func_(FloatFromCurve001_Emitter_Func_Output_Value, Context);
	Context.Map.ScaleColor.ScaleAlpha = FloatFromCurve001_Emitter_Func_Output_Value;
	Context.Map.ScaleColor.ScaleRGB = Context.Map.User.SparksColor;
	Context.Map.ScaleColor.ColorValueToScale = Context.Map.Particles.Initial.Color;
	float4 Constant24 = float4(1,1,1,1);
	Context.Map.Transient.ParticleColorScaleFactor = Constant24;
	EnterStatScope(3 );
	ScaleColor_Emitter_Func_(Context);
	ExitStatScope( );
	float Constant25 = (0.0);
	Context.Map.Local.Collision.ModuleParticleRadius = Constant25;
	bool Constant26 = false;
	float3 Constant27 = float3(0.0, 0.0, 0.0);
	Context.Map.OUTPUT_VAR.Collision.TempPreviousPosition = Constant27;
	float3 Constant28 = float3(0.0, 0.0, 0.0);
	Context.Map.OUTPUT_VAR.Collision.TempPreviousForce = Constant28;
	float3 Constant29 = float3(0.0, 0.0, 0.0);
	Context.Map.OUTPUT_VAR.Collision.TempPreviousVelocity = Constant29;
	bool Constant30 = true;
	Context.Map.Collision.CollisionEnabled = Constant30;
	bool Constant31 = false;
	Context.Map.Collision.RandomizeCollisionNormalVector = Constant31;
	bool Constant32 = false;
	Context.Map.Local.Collision.UpdateMeshRotation = Constant32;
	float Constant33 = (0.0);
	Context.Map.Collision.CollisionQueryAndResponse.DynamicFrictionCoefficient = Constant33;
	float Constant34 = (0.0);
	Context.Map.Collision.CollisionQueryAndResponse001.DynamicFrictionCoefficient = Constant34;
	float Constant35 = (0.0);
	Context.Map.Collision.CollisionQueryAndResponse.StaticFrictionCoefficient = Constant35;
	float Constant36 = (0.0);
	Context.Map.Collision.CollisionQueryAndResponse001.StaticFrictionCoefficient = Constant36;
	float Constant37 = (0.0);
	Context.Map.Collision.CollisionQueryAndResponse.StaticFrictionEngagementSpeed = Constant37;
	float Constant38 = (0.0);
	Context.Map.Collision.CollisionQueryAndResponse001.StaticFrictionEngagementSpeed = Constant38;
	float Constant39 = (0.0);
	Context.Map.Collision.CollisionQueryAndResponse.ParticleRadius = Constant39;
	float Constant40 = (0.0);
	Context.Map.Collision.CollisionQueryAndResponse001.ParticleRadius = Constant40;
	float Constant41 = (0.0);
	Context.Map.Collision.CollisionQueryAndResponse.ParticleRestitutionCoeffiecient = Constant41;
	float Constant42 = (0.0);
	Context.Map.Collision.CollisionQueryAndResponse001.ParticleRestitutionCoeffiecient = Constant42;
	float Constant43 = (0.0);
	Context.Map.Collision.CollisionQueryAndResponse.CollisionNormalRandomizationPercentage = Constant43;
	float Constant44 = (0.0);
	Context.Map.Collision.CollisionQueryAndResponse001.CollisionNormalRandomizationPercentage = Constant44;
	bool Constant45 = (false);
	Context.Map.Collision.CollisionQueryAndResponse.CollisionEnabled = Constant45;
	bool Constant46 = (false);
	Context.Map.Collision.CollisionQueryAndResponse001.CollisionEnabled = Constant46;
	bool Constant47 = (false);
	Context.Map.Collision.CollisionQueryAndResponse.RandomizeCollisionNormal = Constant47;
	bool Constant48 = (false);
	Context.Map.Collision.CollisionQueryAndResponse001.RandomizeCollisionNormal = Constant48;
	float Constant49 = (0.0);
	Context.Map.Collision.CollisionQueryAndResponse001.BounceCollisionFriction = Constant49;
	float Constant50 = (0.0);
	Context.Map.Collision.CollisionQueryAndResponse.BounceCollisionFriction = Constant50;
	Context.Map.Collision.CorrectInterpenetration = Context.Map.OUTPUT_VAR.ParticleState.FirstFrame;
	float Constant51 = (0.0);
	Context.Map.Collision.CollisionQueryAndResponse.MaxIntersectionCorrectionDistance = Constant51;
	float Constant52 = (0.0);
	Context.Map.Collision.CollisionQueryAndResponse001.MaxIntersectionCorrectionDistance = Constant52;
	float Constant53 = (0.0);
	Context.Map.Collision.CollisionQueryAndResponse.TraceVectorLengthMultiplier = Constant53;
	float Constant54 = (0.0);
	Context.Map.Collision.CollisionQueryAndResponse001.TraceVectorLengthMultiplier = Constant54;
	float Constant55 = (0.0);
	Context.Map.Collision.CollisionQueryAndResponse.MaxTraceLength = Constant55;
	float Constant56 = (0.0);
	Context.Map.Collision.CollisionQueryAndResponse001.MaxTraceLength = Constant56;
	Context.Map.Transient.PhysicsDeltaTime = Context.Map.Engine.DeltaTime;
	float3 Constant57 = float3(0.0, 0.0, 0.0);
	Context.Map.Transient.CollisionParticleWorldPosition = Constant57;
	float Constant58 = (0.0);
	Context.Map.Transient.CollisionDistanceToCollision = Constant58;
	bool Constant59 = (false);
	Context.Map.Transient.CollisionValid = Constant59;
	float3 Constant60 = float3(0,0,0);
	Context.Map.Transient.CollisionNormal = Constant60;
	float3 Constant61 = float3(0.0, 0.0, 0.0);
	Context.Map.Transient.CollisionVelocity = Constant61;
	float Constant62 = (0.0);
	Context.Map.Transient.CollisionFriction = Constant62;
	float Constant63 = (0.0);
	Context.Map.Transient.CollisionRestitution = Constant63;
	bool Constant64 = (false);
	Context.Map.OUTPUT_VAR.Collision.ModuleCollision1Valid = Constant64;
	float3 Constant65 = float3(0.0, 0.0, 0.0);
	Context.Map.OUTPUT_VAR.Collision.ModuleCollision1Normal = Constant65;
	bool Constant66 = (false);
	Context.Map.OUTPUT_VAR.Collision.ModuleCollision2Valid = Constant66;
	float3 Constant67 = float3(0.0, 0.0, 0.0);
	Context.Map.OUTPUT_VAR.Collision.ModuleCollision2Normal = Constant67;
	bool Constant68 = true;
	Context.Map.Collision.EnableRestState = Constant68;
	bool Constant69 = false;
	Context.Map.Collision.ControlRestStateViaSurfaceNormal = Constant69;
	EnterStatScope(4 );
	Collision_Emitter_Func_(Context);
	ExitStatScope( );
	Context.Map.SolveForcesAndVelocity.DeltaTime = Context.Map.Transient.PhysicsDeltaTime;
	float Constant254 = (0.0);
	Context.Map.Local.SolveForcesAndVelocity.DeltaTime = Constant254;
	Context.Map.SolveForcesAndVelocity.Force = Context.Map.Transient.PhysicsForce;
	Context.Map.SolveForcesAndVelocity.Velocity = Context.Map.Particles.Velocity;
	Context.Map.SolveForcesAndVelocity.Mass = Context.Map.Particles.Mass;
	float3 Constant255 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.SolveForcesAndVelocity.PhysicsForce = Constant255;
	float3 Constant256 = float3(0.0, 0.0, 0.0);
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Constant256;
	float Constant257 = (0.0);
	Context.Map.Local.SolveForcesAndVelocity.Mass = Constant257;
	float Constant258 = 0;
	Context.Map.Transient.PhysicsDrag = Constant258;
	Context.Map.SolveForcesAndVelocity.PreviousVelocity = Context.Map.Particles.PreviousVelocity;
	Context.Map.SolveForcesAndVelocity.Position = Context.Map.Particles.Position;
	float3 Constant259 = float3(0.0, 0.0, 0.0);
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Position = Constant259;
	bool Constant260 = true;
	Context.Map.SolveForcesAndVelocity.WritetoIntrinsicProperties = Constant260;
	EnterStatScope(5 );
	SolveForcesAndVelocity_Emitter_Func_(Context);
	ExitStatScope( );
	Context.Map.ScaleSpriteSizeBySpeed.SourceVelocity = Context.Map.Particles.Velocity;
	float Constant266 = (0.0);
	Context.Map.Local.ScaleSpriteSizeBySpeed.NormalizedVelocityRange = Constant266;
	float2 Constant267 = float2(1,1);
	Context.Map.Transient.SpriteSizeScaleFactor = Constant267;
	Context.Map.ScaleSpriteSizeBySpeed.InitialSpriteSize = Context.Map.Particles.Initial.SpriteSize;
	bool Constant268 = false;
	Context.Map.ScaleSpriteSizeBySpeed.SampleScaleFactorByCurve = Constant268;
	EnterStatScope(6 );
	ScaleSpriteSizeBySpeed_Emitter_Func_(Context);
	ExitStatScope( );
	ExitStatScope( );
}
void SimulateMain()
{
EnterStatScope(7 );

	FSimulationContext Context = (FSimulationContext)0;
	Context.Map.Particles.Age = InputDataFloat(0, 0);
	Context.Map.Particles.Collision.CollisionQueryAndResponse.CollisionID = InputDataInt(0, 1);
	Context.Map.Particles.Collision.CollisionQueryAndResponse001.CollisionID = InputDataInt(0, 2);
	Context.Map.Particles.Color.r = InputDataFloat(0, 3);
	Context.Map.Particles.Color.g = InputDataFloat(0, 4);
	Context.Map.Particles.Color.b = InputDataFloat(0, 5);
	Context.Map.Particles.Color.a = InputDataFloat(0, 6);
	Context.Map.Particles.HasCollided = InputDataBool(0, 7);
	Context.Map.Particles.Initial.Color.r = InputDataFloat(0, 8);
	Context.Map.Particles.Initial.Color.g = InputDataFloat(0, 9);
	Context.Map.Particles.Initial.Color.b = InputDataFloat(0, 10);
	Context.Map.Particles.Initial.Color.a = InputDataFloat(0, 11);
	Context.Map.Particles.Initial.SpriteSize.x = InputDataFloat(0, 12);
	Context.Map.Particles.Initial.SpriteSize.y = InputDataFloat(0, 13);
	Context.Map.Particles.Lifetime = InputDataFloat(0, 14);
	Context.Map.Particles.Mass = InputDataFloat(0, 15);
	Context.Map.Particles.MaterialRandom = InputDataFloat(0, 16);
	Context.Map.Particles.NormalizedAge = InputDataFloat(0, 17);
	Context.Map.Particles.NumberOfCollisions = InputDataInt(0, 18);
	Context.Map.Particles.Position.x = InputDataFloat(0, 19);
	Context.Map.Particles.Position.y = InputDataFloat(0, 20);
	Context.Map.Particles.Position.z = InputDataFloat(0, 21);
	Context.Map.Particles.PreviousVelocity.x = InputDataFloat(0, 22);
	Context.Map.Particles.PreviousVelocity.y = InputDataFloat(0, 23);
	Context.Map.Particles.PreviousVelocity.z = InputDataFloat(0, 24);
	Context.Map.Particles.RestCounter = InputDataFloat(0, 25);
	Context.Map.Particles.Scale.x = InputDataFloat(0, 26);
	Context.Map.Particles.Scale.y = InputDataFloat(0, 27);
	Context.Map.Particles.Scale.z = InputDataFloat(0, 28);
	Context.Map.Particles.SpriteRotation = InputDataFloat(0, 29);
	Context.Map.Particles.SpriteSize.x = InputDataFloat(0, 30);
	Context.Map.Particles.SpriteSize.y = InputDataFloat(0, 31);
	Context.Map.Particles.UniqueID = InputDataInt(0, 32);
	Context.Map.Particles.Velocity.x = InputDataFloat(0, 33);
	Context.Map.Particles.Velocity.y = InputDataFloat(0, 34);
	Context.Map.Particles.Velocity.z = InputDataFloat(0, 35);
	Context.Map.User.Z_Gravity_Minimum = User_Z_Gravity_Minimum;
	Context.Map.User.Z_Gravity_Maximum = User_Z_Gravity_Maximum;
	Context.Map.Constants.Emitter.BreakVector.X = Constants_Emitter_BreakVector_X;
	Context.Map.Constants.Emitter.BreakVector.Y = Constants_Emitter_BreakVector_Y;
	Context.Map.Constants.Emitter.BreakVector001.X = Constants_Emitter_BreakVector001_X;
	Context.Map.Constants.Emitter.BreakVector001.Y = Constants_Emitter_BreakVector001_Y;
	Context.Map.Constants.Emitter.UniformRangedVector.RandomSeed = Constants_Emitter_UniformRangedVector_RandomSeed;
	Context.Map.Emitter.RandomSeed = Emitter_RandomSeed;
	Context.Map.Engine.System.TickCount = Engine_System_TickCount;
	Context.Map.Engine.DeltaTime = Engine_DeltaTime;
	Context.Map.Constants.Emitter.FloatFromCurve001.ScaleCurve = Constants_Emitter_FloatFromCurve001_ScaleCurve;
	Context.Map.User.SparksColor = User_SparksColor;
	Context.Map.Constants.Emitter.Collision.ParticleRadiusScale = Constants_Emitter_Collision_ParticleRadiusScale;
	Context.Map.Engine.Owner.SystemLocalToWorld = Engine_Owner_SystemLocalToWorld;
	Context.Map.Engine.Owner.SystemWorldToLocal = Engine_Owner_SystemWorldToLocal;
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale = Engine_Owner_SystemLocalToWorldNoScale;
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale = Engine_Owner_SystemWorldToLocalNoScale;
	Context.Map.Constants.Emitter.Collision.Friction = Constants_Emitter_Collision_Friction;
	Context.Map.Constants.Emitter.Collision.StaticFriction = Constants_Emitter_Collision_StaticFriction;
	Context.Map.Constants.Emitter.Collision.StaticFrictionEngagementSpeed = Constants_Emitter_Collision_StaticFrictionEngagementSpeed;
	Context.Map.Constants.Emitter.Collision.Restitution = Constants_Emitter_Collision_Restitution;
	Context.Map.Constants.Emitter.Collision.RandomizeCollisionNormal = Constants_Emitter_Collision_RandomizeCollisionNormal;
	Context.Map.Constants.Emitter.Collision.FrictionDuringaBounce = Constants_Emitter_Collision_FrictionDuringaBounce;
	Context.Map.Constants.Emitter.Collision.CPUTraceVectorLengthMultiplier = Constants_Emitter_Collision_CPUTraceVectorLengthMultiplier;
	Context.Map.Constants.Emitter.Collision.MaxCPUTraceLength = Constants_Emitter_Collision_MaxCPUTraceLength;
	Context.Map.Constants.Emitter.Collision.PercentageofPenetrationBeforeRest = Constants_Emitter_Collision_PercentageofPenetrationBeforeRest;
	Context.Map.Constants.Emitter.Collision.RestStateTimeRange = Constants_Emitter_Collision_RestStateTimeRange;
	Context.Map.Constants.Emitter.Collision.MaximumPenetrationCorrectionDistance = Constants_Emitter_Collision_MaximumPenetrationCorrectionDistance;
	Context.Map.Constants.Emitter.Collision.ValidCollisionPlaneNormalForRest = Constants_Emitter_Collision_ValidCollisionPlaneNormalForRest;
	Context.Map.Constants.Emitter.Collision.MinimumCollisionNormalASC47RestNormalAlignmentPercentage = Constants_Emitter_Collision_MinimumCollisionNormalASC47RestNormalAlignmentPercentage;
	Context.Map.Constants.Emitter.Collision.AdvancedAgingRate = Constants_Emitter_Collision_AdvancedAgingRate;
	Context.Map.Constants.Emitter.SolveForcesAndVelocity.SpeedLimit = Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	Context.Map.Constants.Emitter.SolveForcesAndVelocity.AccelerationLimit = Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	Context.Map.Constants.Emitter.ScaleSpriteSizeBySpeed.VelocityThreshold = Constants_Emitter_ScaleSpriteSizeBySpeed_VelocityThreshold;
	Context.Map.Constants.Emitter.ScaleSpriteSizeBySpeed.MinScaleFactor = Constants_Emitter_ScaleSpriteSizeBySpeed_MinScaleFactor;
	Context.Map.Constants.Emitter.ScaleSpriteSizeBySpeed.MaxScaleFactor = Constants_Emitter_ScaleSpriteSizeBySpeed_MaxScaleFactor;
	Context.Map.Engine.Emitter.TotalSpawnedParticles = Engine_Emitter_TotalSpawnedParticles;
	ReadDataSets(Context);
	Simulate(Context);
	WriteDataSets(Context);
	{
	bool bValid = Context.Map.DataInstance.Alive;
	int TmpWriteIndex = OutputIndex(0, true, bValid);
	OutputDataFloat(0, 0, TmpWriteIndex, Context.Map.Particles.Age);
	OutputDataInt(0, 1, TmpWriteIndex, Context.Map.Particles.Collision.CollisionQueryAndResponse.CollisionID);
	OutputDataInt(0, 2, TmpWriteIndex, Context.Map.Particles.Collision.CollisionQueryAndResponse001.CollisionID);
	OutputDataFloat(0, 3, TmpWriteIndex, Context.Map.Particles.Color.r);
	OutputDataFloat(0, 4, TmpWriteIndex, Context.Map.Particles.Color.g);
	OutputDataFloat(0, 5, TmpWriteIndex, Context.Map.Particles.Color.b);
	OutputDataFloat(0, 6, TmpWriteIndex, Context.Map.Particles.Color.a);
	OutputDataBool(0, 7, TmpWriteIndex, Context.Map.Particles.HasCollided);
	OutputDataFloat(0, 8, TmpWriteIndex, Context.Map.Particles.Initial.Color.r);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.Map.Particles.Initial.Color.g);
	OutputDataFloat(0, 10, TmpWriteIndex, Context.Map.Particles.Initial.Color.b);
	OutputDataFloat(0, 11, TmpWriteIndex, Context.Map.Particles.Initial.Color.a);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.Map.Particles.Initial.SpriteSize.x);
	OutputDataFloat(0, 13, TmpWriteIndex, Context.Map.Particles.Initial.SpriteSize.y);
	OutputDataFloat(0, 14, TmpWriteIndex, Context.Map.Particles.Lifetime);
	OutputDataFloat(0, 15, TmpWriteIndex, Context.Map.Particles.Mass);
	OutputDataFloat(0, 16, TmpWriteIndex, Context.Map.Particles.MaterialRandom);
	OutputDataFloat(0, 17, TmpWriteIndex, Context.Map.Particles.NormalizedAge);
	OutputDataInt(0, 18, TmpWriteIndex, Context.Map.Particles.NumberOfCollisions);
	OutputDataFloat(0, 19, TmpWriteIndex, Context.Map.Particles.Position.x);
	OutputDataFloat(0, 20, TmpWriteIndex, Context.Map.Particles.Position.y);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.Map.Particles.Position.z);
	OutputDataFloat(0, 22, TmpWriteIndex, Context.Map.Particles.PreviousVelocity.x);
	OutputDataFloat(0, 23, TmpWriteIndex, Context.Map.Particles.PreviousVelocity.y);
	OutputDataFloat(0, 24, TmpWriteIndex, Context.Map.Particles.PreviousVelocity.z);
	OutputDataFloat(0, 25, TmpWriteIndex, Context.Map.Particles.RestCounter);
	OutputDataFloat(0, 26, TmpWriteIndex, Context.Map.Particles.Scale.x);
	OutputDataFloat(0, 27, TmpWriteIndex, Context.Map.Particles.Scale.y);
	OutputDataFloat(0, 28, TmpWriteIndex, Context.Map.Particles.Scale.z);
	OutputDataFloat(0, 29, TmpWriteIndex, Context.Map.Particles.SpriteRotation);
	OutputDataFloat(0, 30, TmpWriteIndex, Context.Map.Particles.SpriteSize.x);
	OutputDataFloat(0, 31, TmpWriteIndex, Context.Map.Particles.SpriteSize.y);
	OutputDataInt(0, 32, TmpWriteIndex, Context.Map.Particles.UniqueID);
	OutputDataFloat(0, 33, TmpWriteIndex, Context.Map.Particles.Velocity.x);
	OutputDataFloat(0, 34, TmpWriteIndex, Context.Map.Particles.Velocity.y);
	OutputDataFloat(0, 35, TmpWriteIndex, Context.Map.Particles.Velocity.z);
	}
ExitStatScope( );
}
#line 703 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

#if 0 /*BEGIN_RESOURCE_TABLES*/
NULL, 0
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
