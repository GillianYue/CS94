#line 1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 6 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#pragma warning(disable:4008)
#line 7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 43 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 44 "/Engine/Public/Platform.ush"
#line 595 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }
#line 8 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"






	const static float PI = 3.1415926535897932f;

	const static float TWO_PI = 3.1415926535897932f*2.0f;
#line 18 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/Definitions.usf"
#line 19 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){ return x - y * (x/y); }



float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }









bool NiagaraAll(bool2 b) { return b.x && b.y; }
bool NiagaraAll(bool3 b) { return b.x && b.y && b.z; }
bool NiagaraAll(bool4 b) { return b.x && b.y && b.z && b.w; }
bool NiagaraAny(bool2 b) { return b.x || b.y; }
bool NiagaraAny(bool3 b) { return b.x || b.y || b.z; }
bool NiagaraAny(bool4 b) { return b.x || b.y || b.z || b.w; }
#line 193 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;






	return float4((v >> 8) & 0x00ffffff) / 16777216.0;

}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0;
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{


	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}
#line 323 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float rand(float x);

	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x)
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}

	int rand(int x);



float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x)
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{



	return rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{


	return rand(x.x-1, Seed1, Seed2, Seed3);
}
#line 405 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);



	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);


	int ExecIndex();



	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
#line 683 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
#line 698 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			return AcquireIndex(DataSetID, bIsValid);
	}
#line 702 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Generated/NiagaraEmitterInstance.ush"




struct NiagaraID
{
	int Index;
	int AcquireTag;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
}

cbuffer FNiagaraSystemParameters
{
	float Engine_Owner_TimeSinceRendered;
	float Engine_Owner_LODDistance;
	float Engine_Owner_LODDistanceFraction;
	float Engine_System_Age;
	int Engine_Owner_ExecutionState;
	int Engine_System_TickCount;
	int Engine_System_NumEmitters;
	int Engine_System_NumEmittersAlive;
}

cbuffer FNiagaraOwnerParameters
{
	float4x4 Engine_Owner_SystemLocalToWorld;
	float4x4 Engine_Owner_SystemWorldToLocal;
	float4x4 Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 Engine_Owner_SystemWorldToLocalNoScale;
	float4 Engine_Owner_Rotation;
	float4 Engine_Owner_Position;
	float4 Engine_Owner_Velocity;
	float4 Engine_Owner_SystemXAxis;
	float4 Engine_Owner_SystemYAxis;
	float4 Engine_Owner_SystemZAxis;
	float4 Engine_Owner_Scale;
}

cbuffer FNiagaraEmitterParameters
{
	int Engine_Emitter_NumParticles;
	int Engine_Emitter_TotalSpawnedParticles;
	float Engine_Emitter_SpawnCountScale;
	float Emitter_Age;
	int Emitter_RandomSeed;
	int Engine_Emitter_PaddingInt32_0;
	int Engine_Emitter_PaddingInt32_1;
	int Engine_Emitter_PaddingInt32_2;
}

cbuffer FNiagaraExternalParameters
{
	int Constants_Emitter_CurlNoiseForce_RandomSeed;
	float Constants_Emitter_CurlNoiseForce_NoiseFrequency;
	float3 Constants_Emitter_CurlNoiseForce_PanNoiseField;
	float Constants_Emitter_CurlNoiseForce_CurlNoiseConeMaskAngle;
	float Constants_Emitter_CurlNoiseForce_CurlNoiseConeMaskFalloffAngle;
	float Constants_Emitter_CurlNoiseForce_NoiseStrength;
	float Constants_Emitter_FloatFromCurve001_ScaleCurve;
	float3 Constants_Emitter_ScaleColor_ScaleRGB;
	float Constants_Emitter_PointAttractionForce_AttractionRadius;
	float Constants_Emitter_PointAttractionForce_AttractionStrength;
	float Constants_Emitter_PointAttractionForce_FalloffExponent;
	float Constants_Emitter_PointAttractionForce_KillRadius;
	float Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	float Constants_Emitter_GenerateLocationEvent_EventSendRate;
	float Constants_Emitter_GenerateLocationEvent_GapCorrectionAmount;
}

struct FLocationEventDataSet
{
	float3 Position_2_53BB17B340F2F8CBDB00619E8ACA8A8F;
	float3 Velocity_4_6147F7B84D206402EBDD6CAEC72CB864;
	float3 Acceleration_24_1A2DB79F440455DC0602B5A462D5F37F;
	NiagaraID RibbonID_18_5946869544681B0D2B8C48BAD6380BBC;
	float NormalizedAge_11_A3BB598447BD630CE9BE078C0CB3DCAC;
	float RandomNormalizedFloat_17_2CCDADFB4F6411E0CA2698A4EB43EB80;
};
struct FParamMap0_Transient
{
	float4 ParticleColorScaleFactor;
	float3 PhysicsAcceleration;
	float PhysicsDeltaTime;
	float PhysicsDrag;
	float3 PhysicsForce;
};

struct FParamMap0_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float DeltaTime;
	float3 Force;
	float Mass;
	float3 Position;
	float3 PreviousVelocity;
	float SpeedLimit;
	float3 Velocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_ScaleColor
{
	float4 ColorValueToScale;
	float ScaleAlpha;
	float3 ScaleRGB;
};

struct FParamMap0_PointAttractionForce
{
	float AttractionRadius;
	float AttractionStrength;
	float3 AttractorPosition;
	float FalloffExponent;
	float KillRadius;
	bool KillWithinRadius;
	bool UseFalloff;
};

struct FParamMap0_ParticleState
{
	float DeltaTime;
	float Lifetime;
};

struct FParamMap0_Particles_Initial
{
	float4 Color;
	float3 Position;
};

struct FParamMap0_Particles
{
	float AccumulatedLocEventDT;
	float Age;
	float4 Color;
	NiagaraID ID;
	FParamMap0_Particles_Initial Initial;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float NormalizedAge;
	float3 Position;
	float3 PreviousVelocity;
	float3 Scale;
	float SpriteRotation;
	float2 SpriteSize;
	int UniqueID;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity
{
	float IncomingPhysicsDrag;
	float3 IncomingPhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_ParticleState
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_ParticleState ParticleState;
	FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_Local_SolveForcesAndVelocity
{
	float DeltaTime;
	float Mass;
	float3 PhysicsForce;
};

struct FParamMap0_Local_PointAttractionForce
{
	float3 PointOriginVec;
	float PointOriginVecLength;
};

struct FParamMap0_Local_GenerateLocationEvent
{
	bool EventCondition;
};

struct FParamMap0_Local_CurlNoiseForce
{
	float AgeAdvancement;
	float DeterministicOffset;
	float Falloff;
	float3 SampledNoise;
	float3 SamplePosition;
};

struct FParamMap0_Local
{
	FParamMap0_Local_CurlNoiseForce CurlNoiseForce;
	FParamMap0_Local_GenerateLocationEvent GenerateLocationEvent;
	FParamMap0_Local_PointAttractionForce PointAttractionForce;
	FParamMap0_Local_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_GenerateLocationEvent
{
	float3 AccelerationToSend;
	bool EventCondition;
	float EventSendRate;
	float FloattoSendasNormalizedParticleAge;
	float FloattoSendasRandomFloat;
	float GapCorrectionAmount;
	NiagaraID ParticleIDtoSendasRibbonID;
	float3 PositionToSend;
	bool UseEventSendRate;
	float3 VelocityToSend;
};

struct FParamMap0_FloatFromCurve001
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_Engine_System
{
	float Age;
	int NumEmitters;
	int NumEmittersAlive;
	int TickCount;
};

struct FParamMap0_Engine_Owner
{
	int ExecutionState;
	float LODDistance;
	float LODDistanceFraction;
	float3 Position;
	float4 Rotation;
	float3 Scale;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemLocalToWorldTransposed;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
	float4x4 SystemWorldToLocalTransposed;
	float3 SystemXAxis;
	float3 SystemYAxis;
	float3 SystemZAxis;
	float TimeSinceRendered;
	float3 Velocity;
};

struct FParamMap0_Engine_Emitter
{
	int NumParticles;
	int PaddingInt32_0;
	int PaddingInt32_1;
	int PaddingInt32_2;
	float SpawnCountScale;
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	float InverseDeltaTime;
	FParamMap0_Engine_Owner Owner;
	float RealTime;
	FParamMap0_Engine_System System;
	float Time;
};

struct FParamMap0_Emitter
{
	float Age;
	bool LocalSpace;
	int RandomSeed;
};

struct FParamMap0_DataInstance
{
	bool Alive;
};

struct FParamMap0_CurlNoiseForce
{
	float CurlNoiseConeMaskAngle;
	float3 CurlNoiseConeMaskAxis;
	float CurlNoiseConeMaskFalloffAngle;
	float NoiseFrequency;
	float NoiseStrength;
	float3 PanNoiseField;
	int RandomSeed;
	float3 SamplePosition;
};

struct FParamMap0_Constants_Emitter_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float SpeedLimit;
};

struct FParamMap0_Constants_Emitter_ScaleColor
{
	float3 ScaleRGB;
};

struct FParamMap0_Constants_Emitter_PointAttractionForce
{
	float AttractionRadius;
	float AttractionStrength;
	float FalloffExponent;
	float KillRadius;
};

struct FParamMap0_Constants_Emitter_GenerateLocationEvent
{
	float EventSendRate;
	float GapCorrectionAmount;
};

struct FParamMap0_Constants_Emitter_FloatFromCurve001
{
	float ScaleCurve;
};

struct FParamMap0_Constants_Emitter_CurlNoiseForce
{
	float CurlNoiseConeMaskAngle;
	float CurlNoiseConeMaskFalloffAngle;
	float NoiseFrequency;
	float NoiseStrength;
	float3 PanNoiseField;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter
{
	FParamMap0_Constants_Emitter_CurlNoiseForce CurlNoiseForce;
	FParamMap0_Constants_Emitter_FloatFromCurve001 FloatFromCurve001;
	FParamMap0_Constants_Emitter_GenerateLocationEvent GenerateLocationEvent;
	FParamMap0_Constants_Emitter_PointAttractionForce PointAttractionForce;
	FParamMap0_Constants_Emitter_ScaleColor ScaleColor;
	FParamMap0_Constants_Emitter_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_Constants
{
	FParamMap0_Constants_Emitter Emitter;
};

struct FParamMap0
{
	FParamMap0_Constants Constants;
	FParamMap0_CurlNoiseForce CurlNoiseForce;
	FParamMap0_DataInstance DataInstance;
	FParamMap0_Emitter Emitter;
	FParamMap0_Engine Engine;
	FParamMap0_FloatFromCurve001 FloatFromCurve001;
	FParamMap0_GenerateLocationEvent GenerateLocationEvent;
	FParamMap0_Local Local;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_ParticleState ParticleState;
	FParamMap0_PointAttractionForce PointAttractionForce;
	FParamMap0_ScaleColor ScaleColor;
	FParamMap0_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Transient Transient;
};

struct FSimulationContext
{
	FParamMap0 Map;
	bool LocationEventWrite_Valid;
	FLocationEventDataSet LocationEventWrite;
};

static float HackSpawnInterp = 1.0;
void ParticleState_Emitter_Func_(inout FSimulationContext Context);
void SampleField_EmitterVectorField32(float3 In_SamplePoint, out float3 Out_SampledValue);
void CurlNoiseForce_Emitter_Func_(int In_Emitter_RandomSeed, inout FSimulationContext Context);
void SampleCurve_EmitterScaleAlphaFloatCurve001(float In_X, out float Out_Value);
void FloatFromCurve001_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void ScaleColor_Emitter_Func_(inout FSimulationContext Context);
void PointAttractionForce_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context);
void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context);
void PointAttractionForce_NF_TransformPosition_Emitter_Func_(float3 In_InPosition, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutPosition, inout FSimulationContext Context);
void PointAttractionForce_Emitter_Func_(inout FSimulationContext Context);
void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context);
void AdvancePositionWithAcceleration_Func_(float In_DeltaTime, float3 In_Position, float3 In_Velocity, float3 In_Acceleration, float In_Mass, float3 In_Force, out float3 Out_NewPosition, out float3 Out_NewVelocity, inout FSimulationContext Context);
void GenerateLocationEvent_Emitter_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void ParticleState_Emitter_Func_(inout FSimulationContext Context)
{
	bool Result = NiagaraAll(Context.Map.Particles.Age <= Context.Map.Engine.DeltaTime);
	Context.Map.OUTPUT_VAR.ParticleState.FirstFrame = Result;
	float Result1 = Context.Map.Particles.Age + Context.Map.ParticleState.DeltaTime;
	float Constant1 = 1e-05;
	float Result2 = max(Context.Map.ParticleState.Lifetime, Constant1);
	float Constant2 = 0.0001;
	float Result3 = Result2 - Constant2;
	bool Result4 = NiagaraAll(Result1 < Result3);
	bool Constant3 = false;
	bool bool_IfResult;
	if(Result4)
	{
	bool_IfResult = Context.Map.DataInstance.Alive;
	}
	else
	{
	bool_IfResult = Constant3;
	}
	float Result5 = Result1 / Result2;
	Context.Map.DataInstance.Alive = bool_IfResult;
	Context.Map.Particles.Age = Result1;
	Context.Map.Particles.NormalizedAge = Result5;
}

void CurlNoiseForce_Emitter_Func_(int In_Emitter_RandomSeed, inout FSimulationContext Context)
{
	bool Constant13 = false;
	float AgeAdvancement_IfResult;
	if(Constant13)
	{
	AgeAdvancement_IfResult = Context.Map.Emitter.Age;
	}
	else
	{
	AgeAdvancement_IfResult = Context.Map.Engine.Time;
	}
	float Constant14 = 4096;
	int Constant15 = 0;
	float Result6 = rand_float(Constant14, Context.Map.Constants.Emitter.CurlNoiseForce.RandomSeed, Context.Map.Emitter.RandomSeed, Constant15);
	Context.Map.Local.CurlNoiseForce.AgeAdvancement = AgeAdvancement_IfResult;
	Context.Map.Local.CurlNoiseForce.DeterministicOffset = Result6;
	Context.Map.Local.CurlNoiseForce.SamplePosition = Context.Map.CurlNoiseForce.SamplePosition;
	float3 Result7 = Context.Map.Local.CurlNoiseForce.DeterministicOffset + Context.Map.Local.CurlNoiseForce.SamplePosition;
	float3 Result8 = Result7 * Context.Map.Constants.Emitter.CurlNoiseForce.NoiseFrequency;
	float Constant16 = 125;
	float3 Result9 = Result8 * Constant16;
	float3 SampleField_EmitterVectorField32Output_SampledValue;
	SampleField_EmitterVectorField32(Result9, SampleField_EmitterVectorField32Output_SampledValue);
	Context.Map.Local.CurlNoiseForce.SampledNoise = SampleField_EmitterVectorField32Output_SampledValue;
	float Constant17 = 1;
	Context.Map.Local.CurlNoiseForce.Falloff = Constant17;
	Context.Map.CurlNoiseForce.CurlNoiseConeMaskAngle = Context.Map.Constants.Emitter.CurlNoiseForce.CurlNoiseConeMaskAngle;
	Context.Map.CurlNoiseForce.CurlNoiseConeMaskFalloffAngle = Context.Map.Constants.Emitter.CurlNoiseForce.CurlNoiseConeMaskFalloffAngle;
	Context.Map.CurlNoiseForce.CurlNoiseConeMaskAxis = Context.Map.CurlNoiseForce.CurlNoiseConeMaskAxis;
	float3 Result10 = Context.Map.Local.CurlNoiseForce.SampledNoise * Context.Map.Constants.Emitter.CurlNoiseForce.NoiseStrength;
	float3 Result11 = Context.Map.Transient.PhysicsForce + Result10;
	Context.Map.Transient.PhysicsForce = Result11;
}

void FloatFromCurve001_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_EmitterScaleAlphaFloatCurve001Output_Value;
	SampleCurve_EmitterScaleAlphaFloatCurve001(Context.Map.FloatFromCurve001.CurveIndex, SampleCurve_EmitterScaleAlphaFloatCurve001Output_Value);
	float Result12 = SampleCurve_EmitterScaleAlphaFloatCurve001Output_Value * Context.Map.Constants.Emitter.FloatFromCurve001.ScaleCurve;
	Out_Value = Result12;
}

void ScaleColor_Emitter_Func_(inout FSimulationContext Context)
{
	float4 Output0;
	Output0.r = Context.Map.Constants.Emitter.ScaleColor.ScaleRGB.x;
	Output0.g = Context.Map.Constants.Emitter.ScaleColor.ScaleRGB.y;
	Output0.b = Context.Map.Constants.Emitter.ScaleColor.ScaleRGB.z;
	Output0.a = Context.Map.ScaleColor.ScaleAlpha;
	float4 Result13 = Context.Map.Transient.ParticleColorScaleFactor * Output0;
	float4 Result14 = Context.Map.ScaleColor.ColorValueToScale * Result13;
	Context.Map.Particles.Color = Result14;
	Context.Map.Transient.ParticleColorScaleFactor = Result13;
}

void PointAttractionForce_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant19 = true;
	float3 Constant20 = float3(0,0,0);
	float3 Vector_IfResult;
	if(Constant19)
	{
	Vector_IfResult = Constant20;
	}
	else
	{
	Vector_IfResult = Context.Map.Engine.Owner.Position;
	}
	Out_OutPosition = Vector_IfResult;
}

void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context)
{
	int Constant29 = 0;
	bool Result15 = NiagaraAll(In_SourceSpace == Constant29);
	int Constant30 = 0;
	bool Result16 = NiagaraAll(In_DestinationSpace == Constant30);
	bool Result17 = Result15 && Result16;
	int Constant31 = 1;
	bool Result18 = NiagaraAll(In_SourceSpace == Constant31);
	int Constant32 = 1;
	bool Result19 = NiagaraAll(In_DestinationSpace == Constant32);
	bool Result20 = Result18 && Result19;
	bool Result21 = Result17 || Result20;
	int Constant33 = 2;
	bool Result22 = NiagaraAll(In_SourceSpace == Constant33);
	int Constant34 = 2;
	bool Result23 = NiagaraAll(In_DestinationSpace == Constant34);
	bool Result24 = Result22 && Result23;
	bool Result25 = Result21 || Result24;
	bool Result26 = Result15 && Result23;
	bool Result27 = Result22 && Result16;
	bool Result28 = Result26 || Result27;
	bool Result29 = In_bLocalSpace && Result28;
	bool Result30 = Result25 || Result29;
	bool Result31 = !In_bLocalSpace;
	bool Result32 = Result15 && Result19;
	bool Result33 = Result18 && Result16;
	bool Result34 = Result32 || Result33;
	bool Result35 = Result31 && Result34;
	bool Result36 = Result30 || Result35;
	bool Result37 = In_bLocalSpace && Result32;
	bool Result38 = Result22 && Result19;
	bool Result39 = Result37 || Result38;
	bool Result40 = Result31 && Result27;
	bool Result41 = Result39 || Result40;
	float4x4 Matrix_IfResult1;
	if(Result41)
	{
	Matrix_IfResult1 = In_LocalToWorldTransform;
	}
	else
	{
	Matrix_IfResult1 = In_WorldToLocalTransform;
	}
	Out_bUseOriginal = Result36;
	Out_OutTransform = Matrix_IfResult1;
}

void PointAttractionForce_NF_TransformPosition_Emitter_Func_(float3 In_InPosition, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant28 = true;
	float4x4 Matrix_IfResult;
	float4x4 Matrix001_IfResult;
	if(In_ApplyScale)
	{
	Matrix_IfResult = Context.Map.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult = Context.Map.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult = Context.Map.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult = Context.Map.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal;
	float4x4 TransformBase_Func_Output_OutTransform;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult, Matrix001_IfResult, Constant28, TransformBase_Func_Output_bUseOriginal, TransformBase_Func_Output_OutTransform, Context);
	float3 Result42 = mul(float4(In_InPosition,1.0),TransformBase_Func_Output_OutTransform).xyz;
	float3 Vector_IfResult1;
	if(TransformBase_Func_Output_bUseOriginal)
	{
	Vector_IfResult1 = In_InPosition;
	}
	else
	{
	Vector_IfResult1 = Result42;
	}
	Out_OutPosition = Vector_IfResult1;
}

void PointAttractionForce_Emitter_Func_(inout FSimulationContext Context)
{
	int Constant25 = 0;
	int Output1;
	Output1 = Constant25;
	int Constant26 = 0;
	bool Constant27 = false;
	float3 PointAttractionForce_NF_TransformPosition_Emitter_Func_Output_OutPosition;
	PointAttractionForce_NF_TransformPosition_Emitter_Func_(Context.Map.Particles.Position, Output1, Constant26, Constant27, PointAttractionForce_NF_TransformPosition_Emitter_Func_Output_OutPosition, Context);
	float3 Result43 = Context.Map.PointAttractionForce.AttractorPosition - PointAttractionForce_NF_TransformPosition_Emitter_Func_Output_OutPosition;
	float3 Constant35 = float3(0,0,0.0001);
	float3 Result44 = Result43 + Constant35;
	float Result45 = length(Result44);
	Context.Map.Local.PointAttractionForce.PointOriginVec = Result44;
	Context.Map.Local.PointAttractionForce.PointOriginVecLength = Result45;
	float3 Result46 = normalize(Context.Map.Local.PointAttractionForce.PointOriginVec);
	bool Result47 = NiagaraAll(Context.Map.Local.PointAttractionForce.PointOriginVecLength > Context.Map.Constants.Emitter.PointAttractionForce.AttractionRadius);
	float Constant36 = 0;
	float Result48 = pow(Context.Map.Local.PointAttractionForce.PointOriginVecLength,Context.Map.Constants.Emitter.PointAttractionForce.FalloffExponent);
	float Falloff_IfResult;
	if(Context.Map.PointAttractionForce.UseFalloff)
	{
	Falloff_IfResult = Result48;
	}
	else
	{
	Falloff_IfResult = Context.Map.Local.PointAttractionForce.PointOriginVecLength;
	}
	float Result49 = Context.Map.Constants.Emitter.PointAttractionForce.AttractionStrength * Falloff_IfResult;
	float float_IfResult;
	if(Result47)
	{
	float_IfResult = Constant36;
	}
	else
	{
	float_IfResult = Result49;
	}
	float3 Result50 = Result46 * float_IfResult;
	float3 Result51 = Context.Map.Transient.PhysicsForce + Result50;
	Context.Map.Transient.PhysicsForce = Result51;
	bool Result52 = NiagaraAll(Context.Map.Local.PointAttractionForce.PointOriginVecLength < Context.Map.Constants.Emitter.PointAttractionForce.KillRadius);
	bool Result53 = !Result52;
	bool Constant37 = true;
	bool RadiusCheck_IfResult;
	if(Context.Map.PointAttractionForce.KillWithinRadius)
	{
	RadiusCheck_IfResult = Result53;
	}
	else
	{
	RadiusCheck_IfResult = Constant37;
	}
	bool Result54 = Context.Map.DataInstance.Alive && RadiusCheck_IfResult;
	Context.Map.DataInstance.Alive = Result54;
}

void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context)
{
	Context.Map.Local.SolveForcesAndVelocity.DeltaTime = Context.Map.SolveForcesAndVelocity.DeltaTime;
	Context.Map.Local.SolveForcesAndVelocity.PhysicsForce = Context.Map.SolveForcesAndVelocity.Force;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsForce = Context.Map.SolveForcesAndVelocity.Force;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.Map.SolveForcesAndVelocity.Velocity;
	Context.Map.Local.SolveForcesAndVelocity.Mass = Context.Map.SolveForcesAndVelocity.Mass;
	float Constant45 = 0.0001;
	float Result55 = max(Context.Map.Local.SolveForcesAndVelocity.Mass, Constant45);
	float Result56 = Reciprocal(Result55);
	float3 Result57 = Result56 * Context.Map.Local.SolveForcesAndVelocity.PhysicsForce;
	Context.Map.Local.SolveForcesAndVelocity.PhysicsForce = Result57;
	float3 Result58 = Context.Map.Local.SolveForcesAndVelocity.PhysicsForce * Context.Map.Local.SolveForcesAndVelocity.DeltaTime + Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float Constant46 = 0;
	float Result59 = max(Context.Map.Transient.PhysicsDrag, Constant46);
	float Result60 = Context.Map.Local.SolveForcesAndVelocity.DeltaTime * Result59;
	float Constant47 = 1;
	float Result61 = Result60 + Constant47;
	float3 Result62 = Result58 / Result61;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Result62;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsDrag = Context.Map.Transient.PhysicsDrag;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float3 Result63 = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity * Context.Map.Local.SolveForcesAndVelocity.DeltaTime + Context.Map.SolveForcesAndVelocity.Position;
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Position = Result63;
	float3 Position_IfResult;
	float3 Velocity_IfResult;
	float3 PreviousVelocity_IfResult;
	if(Context.Map.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	Position_IfResult = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Position;
	Velocity_IfResult = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	}
	else
	{
	Position_IfResult = Context.Map.SolveForcesAndVelocity.Position;
	Velocity_IfResult = Context.Map.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.Map.SolveForcesAndVelocity.PreviousVelocity;
	}
	Context.Map.Particles.Position = Position_IfResult;
	Context.Map.Particles.Velocity = Velocity_IfResult;
	Context.Map.Particles.PreviousVelocity = PreviousVelocity_IfResult;
	float3 Constant48 = float3(0,0,0);
	float Constant49 = 0;
	float3 ForceVector_IfResult;
	float Drag_IfResult;
	if(Context.Map.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	ForceVector_IfResult = Constant48;
	Drag_IfResult = Constant49;
	}
	else
	{
	ForceVector_IfResult = Context.Map.Transient.PhysicsForce;
	Drag_IfResult = Context.Map.Transient.PhysicsDrag;
	}
	Context.Map.Transient.PhysicsForce = ForceVector_IfResult;
	Context.Map.Transient.PhysicsDrag = Drag_IfResult;
}

void AdvancePositionWithAcceleration_Func_(float In_DeltaTime, float3 In_Position, float3 In_Velocity, float3 In_Acceleration, float In_Mass, float3 In_Force, out float3 Out_NewPosition, out float3 Out_NewVelocity, inout FSimulationContext Context)
{
	float3 Result71 = In_Force / In_Mass;
	float3 Result72 = In_DeltaTime * Result71;
	float3 Result73 = In_Velocity + In_Acceleration + Result72;
	float3 Result74 = Result73 * In_DeltaTime + In_Position;
	Out_NewPosition = Result74;
	Out_NewVelocity = Result73;
}

void GenerateLocationEvent_Emitter_Func_(inout FSimulationContext Context)
{
	float Result65 = Context.Map.Engine.DeltaTime + Context.Map.Particles.AccumulatedLocEventDT;
	float Constant55 = 1;
	float Constant56 = 1e-06;
	float Result66 = max(Context.Map.Constants.Emitter.GenerateLocationEvent.EventSendRate, Constant56);
	float Result67 = Constant55 / Result66;
	bool Result68 = NiagaraAll(Result65 >= Result67);
	float Constant57 = 0;
	float float_IfResult1;
	if(Result68)
	{
	float_IfResult1 = Constant57;
	}
	else
	{
	float_IfResult1 = Result65;
	}
	bool Result69 = Result68 && Context.Map.GenerateLocationEvent.EventCondition;
	bool bool_IfResult1;
	if(Context.Map.GenerateLocationEvent.UseEventSendRate)
	{
	bool_IfResult1 = Result69;
	}
	else
	{
	bool_IfResult1 = Context.Map.GenerateLocationEvent.EventCondition;
	}
	Context.Map.Particles.AccumulatedLocEventDT = float_IfResult1;
	Context.Map.Local.GenerateLocationEvent.EventCondition = bool_IfResult1;
	float Result70 = Context.Map.Constants.Emitter.GenerateLocationEvent.GapCorrectionAmount * Context.Map.Engine.DeltaTime;
	float Constant58 = 1;
	float3 Constant59 = float3(0,0,0);
	float3 AdvancePositionWithAcceleration_Func_Output_NewPosition;
	float3 AdvancePositionWithAcceleration_Func_Output_NewVelocity;
	AdvancePositionWithAcceleration_Func_(Result70, Context.Map.GenerateLocationEvent.PositionToSend, Context.Map.GenerateLocationEvent.VelocityToSend, Context.Map.GenerateLocationEvent.AccelerationToSend, Constant58, Constant59, AdvancePositionWithAcceleration_Func_Output_NewPosition, AdvancePositionWithAcceleration_Func_Output_NewVelocity, Context);
	Context.LocationEventWrite_Valid = Context.Map.Local.GenerateLocationEvent.EventCondition;
	Context.LocationEventWrite.Position_2_53BB17B340F2F8CBDB00619E8ACA8A8F = AdvancePositionWithAcceleration_Func_Output_NewPosition;
	Context.LocationEventWrite.Velocity_4_6147F7B84D206402EBDD6CAEC72CB864 = AdvancePositionWithAcceleration_Func_Output_NewVelocity;
	Context.LocationEventWrite.Acceleration_24_1A2DB79F440455DC0602B5A462D5F37F = Context.Map.GenerateLocationEvent.AccelerationToSend;
	Context.LocationEventWrite.RibbonID_18_5946869544681B0D2B8C48BAD6380BBC = Context.Map.GenerateLocationEvent.ParticleIDtoSendasRibbonID;
	Context.LocationEventWrite.NormalizedAge_11_A3BB598447BD630CE9BE078C0CB3DCAC = Context.Map.GenerateLocationEvent.FloattoSendasNormalizedParticleAge;
	Context.LocationEventWrite.RandomNormalizedFloat_17_2CCDADFB4F6411E0CA2698A4EB43EB80 = Context.Map.GenerateLocationEvent.FloattoSendasRandomFloat;
}

float GetSpawnInterpolation()
{
	return 1.0f;}


void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
	{
	int TmpWriteIndex;
	bool bValid = Context.LocationEventWrite_Valid;
	TmpWriteIndex = AcquireIndex(1, bValid);
		OutputDataFloat(1, 0, TmpWriteIndex, Context.LocationEventWrite.Position_2_53BB17B340F2F8CBDB00619E8ACA8A8F.x);
		OutputDataFloat(1, 1, TmpWriteIndex, Context.LocationEventWrite.Position_2_53BB17B340F2F8CBDB00619E8ACA8A8F.y);
		OutputDataFloat(1, 2, TmpWriteIndex, Context.LocationEventWrite.Position_2_53BB17B340F2F8CBDB00619E8ACA8A8F.z);
		OutputDataFloat(1, 3, TmpWriteIndex, Context.LocationEventWrite.Velocity_4_6147F7B84D206402EBDD6CAEC72CB864.x);
		OutputDataFloat(1, 4, TmpWriteIndex, Context.LocationEventWrite.Velocity_4_6147F7B84D206402EBDD6CAEC72CB864.y);
		OutputDataFloat(1, 5, TmpWriteIndex, Context.LocationEventWrite.Velocity_4_6147F7B84D206402EBDD6CAEC72CB864.z);
		OutputDataFloat(1, 6, TmpWriteIndex, Context.LocationEventWrite.Acceleration_24_1A2DB79F440455DC0602B5A462D5F37F.x);
		OutputDataFloat(1, 7, TmpWriteIndex, Context.LocationEventWrite.Acceleration_24_1A2DB79F440455DC0602B5A462D5F37F.y);
		OutputDataFloat(1, 8, TmpWriteIndex, Context.LocationEventWrite.Acceleration_24_1A2DB79F440455DC0602B5A462D5F37F.z);
		OutputDataInt(1, 9, TmpWriteIndex, Context.LocationEventWrite.RibbonID_18_5946869544681B0D2B8C48BAD6380BBC.Index);
		OutputDataInt(1, 10, TmpWriteIndex, Context.LocationEventWrite.RibbonID_18_5946869544681B0D2B8C48BAD6380BBC.AcquireTag);
		OutputDataFloat(1, 11, TmpWriteIndex, Context.LocationEventWrite.NormalizedAge_11_A3BB598447BD630CE9BE078C0CB3DCAC);
		OutputDataFloat(1, 12, TmpWriteIndex, Context.LocationEventWrite.RandomNormalizedFloat_17_2CCDADFB4F6411E0CA2698A4EB43EB80);
	}
}

void Simulate(inout FSimulationContext Context)
{
	EnterStatScope(0 );


	bool Constant = true;
	Context.Map.DataInstance.Alive = Constant;
	Context.Map.ParticleState.DeltaTime = Context.Map.Engine.DeltaTime;
	Context.Map.ParticleState.Lifetime = Context.Map.Particles.Lifetime;
	EnterStatScope(1 );
	ParticleState_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant4 = false;
	int Constant5 = (0);
	float Constant6 = (0.0);
	Context.Map.Local.CurlNoiseForce.AgeAdvancement = Constant6;
	float Constant7 = (0.0);
	Context.Map.Local.CurlNoiseForce.DeterministicOffset = Constant7;
	bool Constant8 = true;
	Context.Map.CurlNoiseForce.SamplePosition = Context.Map.Particles.Position;
	float3 Constant9 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.CurlNoiseForce.SamplePosition = Constant9;
	float3 Constant10 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.CurlNoiseForce.SampledNoise = Constant10;
	float Constant11 = 1;
	Context.Map.Local.CurlNoiseForce.Falloff = Constant11;
	Context.Map.CurlNoiseForce.CurlNoiseConeMaskAxis = Context.Map.Particles.Velocity;
	float3 Constant12 = float3(0,0,0);
	Context.Map.Transient.PhysicsForce = Constant12;
	EnterStatScope(2 );
	CurlNoiseForce_Emitter_Func_(Constant5, Context);
	ExitStatScope( );
	Context.Map.FloatFromCurve001.CurveIndex = Context.Map.Particles.NormalizedAge;
	float FloatFromCurve001_Emitter_Func_Output_Value;
	FloatFromCurve001_Emitter_Func_(FloatFromCurve001_Emitter_Func_Output_Value, Context);
	Context.Map.ScaleColor.ScaleAlpha = FloatFromCurve001_Emitter_Func_Output_Value;
	Context.Map.ScaleColor.ColorValueToScale = Context.Map.Particles.Initial.Color;
	float4 Constant18 = float4(1,1,1,1);
	Context.Map.Transient.ParticleColorScaleFactor = Constant18;
	EnterStatScope(3 );
	ScaleColor_Emitter_Func_(Context);
	ExitStatScope( );
	float3 PointAttractionForce_SimulationPosition_Emitter_Func_Output_OutPosition;
	PointAttractionForce_SimulationPosition_Emitter_Func_(PointAttractionForce_SimulationPosition_Emitter_Func_Output_OutPosition, Context);
	Context.Map.PointAttractionForce.AttractorPosition = PointAttractionForce_SimulationPosition_Emitter_Func_Output_OutPosition;
	float3 Constant21 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.PointAttractionForce.PointOriginVec = Constant21;
	float Constant22 = (0.0);
	Context.Map.Local.PointAttractionForce.PointOriginVecLength = Constant22;
	bool Constant23 = true;
	Context.Map.PointAttractionForce.UseFalloff = Constant23;
	bool Constant24 = false;
	Context.Map.PointAttractionForce.KillWithinRadius = Constant24;
	EnterStatScope(4 );
	PointAttractionForce_Emitter_Func_(Context);
	ExitStatScope( );
	Context.Map.Transient.PhysicsDeltaTime = Context.Map.Engine.DeltaTime;
	Context.Map.SolveForcesAndVelocity.DeltaTime = Context.Map.Transient.PhysicsDeltaTime;
	float Constant38 = (0.0);
	Context.Map.Local.SolveForcesAndVelocity.DeltaTime = Constant38;
	Context.Map.SolveForcesAndVelocity.Force = Context.Map.Transient.PhysicsForce;
	Context.Map.SolveForcesAndVelocity.Velocity = Context.Map.Particles.Velocity;
	Context.Map.SolveForcesAndVelocity.Mass = Context.Map.Particles.Mass;
	float3 Constant39 = float3(0.0, 0.0, 0.0);
	Context.Map.Local.SolveForcesAndVelocity.PhysicsForce = Constant39;
	float3 Constant40 = float3(0.0, 0.0, 0.0);
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Constant40;
	float Constant41 = (0.0);
	Context.Map.Local.SolveForcesAndVelocity.Mass = Constant41;
	float Constant42 = 0;
	Context.Map.Transient.PhysicsDrag = Constant42;
	Context.Map.SolveForcesAndVelocity.PreviousVelocity = Context.Map.Particles.PreviousVelocity;
	Context.Map.SolveForcesAndVelocity.Position = Context.Map.Particles.Position;
	float3 Constant43 = float3(0.0, 0.0, 0.0);
	Context.Map.OUTPUT_VAR.SolveForcesAndVelocity.Position = Constant43;
	bool Constant44 = true;
	Context.Map.SolveForcesAndVelocity.WritetoIntrinsicProperties = Constant44;
	EnterStatScope(5 );
	SolveForcesAndVelocity_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant50 = false;
	Context.Map.GenerateLocationEvent.UseEventSendRate = Constant50;
	Context.Map.GenerateLocationEvent.PositionToSend = Context.Map.Particles.Initial.Position;
	bool Constant51 = true;
	Context.Map.GenerateLocationEvent.EventCondition = Constant51;
	bool Constant52 = (false);
	Context.Map.Local.GenerateLocationEvent.EventCondition = Constant52;
	float3 Constant53 = float3(0,0,0);
	Context.Map.Transient.PhysicsAcceleration = Constant53;
	Context.Map.GenerateLocationEvent.VelocityToSend = Context.Map.Particles.Velocity;
	Context.Map.GenerateLocationEvent.AccelerationToSend = Context.Map.Transient.PhysicsAcceleration;
	Context.Map.GenerateLocationEvent.ParticleIDtoSendasRibbonID = Context.Map.Particles.ID;
	Context.Map.GenerateLocationEvent.FloattoSendasNormalizedParticleAge = Context.Map.Particles.NormalizedAge;
	float Constant54 = 1;
	float Result64 = rand(Constant54);
	Context.Map.GenerateLocationEvent.FloattoSendasRandomFloat = Result64;
	EnterStatScope(6 );
	GenerateLocationEvent_Emitter_Func_(Context);
	ExitStatScope( );
	ExitStatScope( );
}
void SimulateMain()
{
EnterStatScope(7 );

	FSimulationContext Context = (FSimulationContext)0;
	Context.Map.Particles.AccumulatedLocEventDT = InputDataFloat(0, 0);
	Context.Map.Particles.Age = InputDataFloat(0, 1);
	Context.Map.Particles.Color.r = InputDataFloat(0, 2);
	Context.Map.Particles.Color.g = InputDataFloat(0, 3);
	Context.Map.Particles.Color.b = InputDataFloat(0, 4);
	Context.Map.Particles.Color.a = InputDataFloat(0, 5);
	Context.Map.Particles.ID.Index = InputDataInt(0, 6);
	Context.Map.Particles.ID.AcquireTag = InputDataInt(0, 7);
	Context.Map.Particles.Initial.Color.r = InputDataFloat(0, 8);
	Context.Map.Particles.Initial.Color.g = InputDataFloat(0, 9);
	Context.Map.Particles.Initial.Color.b = InputDataFloat(0, 10);
	Context.Map.Particles.Initial.Color.a = InputDataFloat(0, 11);
	Context.Map.Particles.Initial.Position.x = InputDataFloat(0, 12);
	Context.Map.Particles.Initial.Position.y = InputDataFloat(0, 13);
	Context.Map.Particles.Initial.Position.z = InputDataFloat(0, 14);
	Context.Map.Particles.Lifetime = InputDataFloat(0, 15);
	Context.Map.Particles.Mass = InputDataFloat(0, 16);
	Context.Map.Particles.MaterialRandom = InputDataFloat(0, 17);
	Context.Map.Particles.NormalizedAge = InputDataFloat(0, 18);
	Context.Map.Particles.Position.x = InputDataFloat(0, 19);
	Context.Map.Particles.Position.y = InputDataFloat(0, 20);
	Context.Map.Particles.Position.z = InputDataFloat(0, 21);
	Context.Map.Particles.PreviousVelocity.x = InputDataFloat(0, 22);
	Context.Map.Particles.PreviousVelocity.y = InputDataFloat(0, 23);
	Context.Map.Particles.PreviousVelocity.z = InputDataFloat(0, 24);
	Context.Map.Particles.Scale.x = InputDataFloat(0, 25);
	Context.Map.Particles.Scale.y = InputDataFloat(0, 26);
	Context.Map.Particles.Scale.z = InputDataFloat(0, 27);
	Context.Map.Particles.SpriteRotation = InputDataFloat(0, 28);
	Context.Map.Particles.SpriteSize.x = InputDataFloat(0, 29);
	Context.Map.Particles.SpriteSize.y = InputDataFloat(0, 30);
	Context.Map.Particles.UniqueID = InputDataInt(0, 31);
	Context.Map.Particles.Velocity.x = InputDataFloat(0, 32);
	Context.Map.Particles.Velocity.y = InputDataFloat(0, 33);
	Context.Map.Particles.Velocity.z = InputDataFloat(0, 34);
	Context.Map.Engine.DeltaTime = Engine_DeltaTime;
	Context.Map.Emitter.Age = Emitter_Age;
	Context.Map.Engine.Time = Engine_Time;
	Context.Map.Constants.Emitter.CurlNoiseForce.RandomSeed = Constants_Emitter_CurlNoiseForce_RandomSeed;
	Context.Map.Engine.Owner.Position = Engine_Owner_Position.xyz;
	Context.Map.Constants.Emitter.CurlNoiseForce.NoiseFrequency = Constants_Emitter_CurlNoiseForce_NoiseFrequency;
	Context.Map.Constants.Emitter.CurlNoiseForce.PanNoiseField = Constants_Emitter_CurlNoiseForce_PanNoiseField;
	Context.Map.Constants.Emitter.CurlNoiseForce.CurlNoiseConeMaskAngle = Constants_Emitter_CurlNoiseForce_CurlNoiseConeMaskAngle;
	Context.Map.Constants.Emitter.CurlNoiseForce.CurlNoiseConeMaskFalloffAngle = Constants_Emitter_CurlNoiseForce_CurlNoiseConeMaskFalloffAngle;
	Context.Map.Constants.Emitter.CurlNoiseForce.NoiseStrength = Constants_Emitter_CurlNoiseForce_NoiseStrength;
	Context.Map.Emitter.RandomSeed = Emitter_RandomSeed;
	Context.Map.Constants.Emitter.FloatFromCurve001.ScaleCurve = Constants_Emitter_FloatFromCurve001_ScaleCurve;
	Context.Map.Constants.Emitter.ScaleColor.ScaleRGB = Constants_Emitter_ScaleColor_ScaleRGB;
	Context.Map.Engine.Owner.SystemLocalToWorld = Engine_Owner_SystemLocalToWorld;
	Context.Map.Engine.Owner.SystemWorldToLocal = Engine_Owner_SystemWorldToLocal;
	Context.Map.Engine.Owner.SystemLocalToWorldNoScale = Engine_Owner_SystemLocalToWorldNoScale;
	Context.Map.Engine.Owner.SystemWorldToLocalNoScale = Engine_Owner_SystemWorldToLocalNoScale;
	Context.Map.Constants.Emitter.PointAttractionForce.AttractionRadius = Constants_Emitter_PointAttractionForce_AttractionRadius;
	Context.Map.Constants.Emitter.PointAttractionForce.AttractionStrength = Constants_Emitter_PointAttractionForce_AttractionStrength;
	Context.Map.Constants.Emitter.PointAttractionForce.FalloffExponent = Constants_Emitter_PointAttractionForce_FalloffExponent;
	Context.Map.Constants.Emitter.PointAttractionForce.KillRadius = Constants_Emitter_PointAttractionForce_KillRadius;
	Context.Map.Constants.Emitter.SolveForcesAndVelocity.SpeedLimit = Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	Context.Map.Constants.Emitter.SolveForcesAndVelocity.AccelerationLimit = Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	Context.Map.Constants.Emitter.GenerateLocationEvent.EventSendRate = Constants_Emitter_GenerateLocationEvent_EventSendRate;
	Context.Map.Constants.Emitter.GenerateLocationEvent.GapCorrectionAmount = Constants_Emitter_GenerateLocationEvent_GapCorrectionAmount;
	Context.Map.Engine.Emitter.TotalSpawnedParticles = Engine_Emitter_TotalSpawnedParticles;
	ReadDataSets(Context);
	Simulate(Context);
	WriteDataSets(Context);
	{
	bool bValid = Context.Map.DataInstance.Alive;
	int TmpWriteIndex = OutputIndex(0, true, bValid);
	UpdateID(0, Context.Map.Particles.ID.Index, TmpWriteIndex);
	OutputDataFloat(0, 0, TmpWriteIndex, Context.Map.Particles.AccumulatedLocEventDT);
	OutputDataFloat(0, 1, TmpWriteIndex, Context.Map.Particles.Age);
	OutputDataFloat(0, 2, TmpWriteIndex, Context.Map.Particles.Color.r);
	OutputDataFloat(0, 3, TmpWriteIndex, Context.Map.Particles.Color.g);
	OutputDataFloat(0, 4, TmpWriteIndex, Context.Map.Particles.Color.b);
	OutputDataFloat(0, 5, TmpWriteIndex, Context.Map.Particles.Color.a);
	OutputDataInt(0, 6, TmpWriteIndex, Context.Map.Particles.ID.Index);
	OutputDataInt(0, 7, TmpWriteIndex, Context.Map.Particles.ID.AcquireTag);
	OutputDataFloat(0, 8, TmpWriteIndex, Context.Map.Particles.Initial.Color.r);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.Map.Particles.Initial.Color.g);
	OutputDataFloat(0, 10, TmpWriteIndex, Context.Map.Particles.Initial.Color.b);
	OutputDataFloat(0, 11, TmpWriteIndex, Context.Map.Particles.Initial.Color.a);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.Map.Particles.Initial.Position.x);
	OutputDataFloat(0, 13, TmpWriteIndex, Context.Map.Particles.Initial.Position.y);
	OutputDataFloat(0, 14, TmpWriteIndex, Context.Map.Particles.Initial.Position.z);
	OutputDataFloat(0, 15, TmpWriteIndex, Context.Map.Particles.Lifetime);
	OutputDataFloat(0, 16, TmpWriteIndex, Context.Map.Particles.Mass);
	OutputDataFloat(0, 17, TmpWriteIndex, Context.Map.Particles.MaterialRandom);
	OutputDataFloat(0, 18, TmpWriteIndex, Context.Map.Particles.NormalizedAge);
	OutputDataFloat(0, 19, TmpWriteIndex, Context.Map.Particles.Position.x);
	OutputDataFloat(0, 20, TmpWriteIndex, Context.Map.Particles.Position.y);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.Map.Particles.Position.z);
	OutputDataFloat(0, 22, TmpWriteIndex, Context.Map.Particles.PreviousVelocity.x);
	OutputDataFloat(0, 23, TmpWriteIndex, Context.Map.Particles.PreviousVelocity.y);
	OutputDataFloat(0, 24, TmpWriteIndex, Context.Map.Particles.PreviousVelocity.z);
	OutputDataFloat(0, 25, TmpWriteIndex, Context.Map.Particles.Scale.x);
	OutputDataFloat(0, 26, TmpWriteIndex, Context.Map.Particles.Scale.y);
	OutputDataFloat(0, 27, TmpWriteIndex, Context.Map.Particles.Scale.z);
	OutputDataFloat(0, 28, TmpWriteIndex, Context.Map.Particles.SpriteRotation);
	OutputDataFloat(0, 29, TmpWriteIndex, Context.Map.Particles.SpriteSize.x);
	OutputDataFloat(0, 30, TmpWriteIndex, Context.Map.Particles.SpriteSize.y);
	OutputDataInt(0, 31, TmpWriteIndex, Context.Map.Particles.UniqueID);
	OutputDataFloat(0, 32, TmpWriteIndex, Context.Map.Particles.Velocity.x);
	OutputDataFloat(0, 33, TmpWriteIndex, Context.Map.Particles.Velocity.y);
	OutputDataFloat(0, 34, TmpWriteIndex, Context.Map.Particles.Velocity.z);
	}
ExitStatScope( );
}
#line 703 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

#if 0 /*BEGIN_RESOURCE_TABLES*/
NULL, 0
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
