#line 1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 6 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#pragma warning(disable:4008)
#line 7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 43 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 44 "/Engine/Public/Platform.ush"
#line 595 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }
#line 8 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"






	const static float PI = 3.1415926535897932f;

	const static float TWO_PI = 3.1415926535897932f*2.0f;
#line 18 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/Definitions.usf"
#line 19 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){ return x - y * (x/y); }



float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }









bool NiagaraAll(bool2 b) { return b.x && b.y; }
bool NiagaraAll(bool3 b) { return b.x && b.y && b.z; }
bool NiagaraAll(bool4 b) { return b.x && b.y && b.z && b.w; }
bool NiagaraAny(bool2 b) { return b.x || b.y; }
bool NiagaraAny(bool3 b) { return b.x || b.y || b.z; }
bool NiagaraAny(bool4 b) { return b.x || b.y || b.z || b.w; }
#line 193 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;






	return float4((v >> 8) & 0x00ffffff) / 16777216.0;

}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0;
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{


	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}
#line 323 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float rand(float x);

	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x)
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}

	int rand(int x);



float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x)
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{



	return rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{


	return rand(x.x-1, Seed1, Seed2, Seed3);
}
#line 405 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);



	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);


	int ExecIndex();



	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
#line 683 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
#line 698 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			return AcquireIndex(DataSetID, bIsValid);
	}
#line 702 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Generated/NiagaraEmitterInstance.ush"




struct NiagaraRandInfo
{
	int Seed1;
	int Seed2;
	int Seed3;
};

struct NiagaraID
{
	int Index;
	int AcquireTag;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
}

cbuffer FNiagaraSystemParameters
{
	float Engine_Owner_TimeSinceRendered;
	float Engine_Owner_LODDistance;
	float Engine_Owner_LODDistanceFraction;
	float Engine_System_Age;
	int Engine_Owner_ExecutionState;
	int Engine_System_TickCount;
	int Engine_System_NumEmitters;
	int Engine_System_NumEmittersAlive;
}

cbuffer FNiagaraOwnerParameters
{
	float4x4 Engine_Owner_SystemLocalToWorld;
	float4x4 Engine_Owner_SystemWorldToLocal;
	float4x4 Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 Engine_Owner_SystemWorldToLocalNoScale;
	float4 Engine_Owner_Rotation;
	float4 Engine_Owner_Position;
	float4 Engine_Owner_Velocity;
	float4 Engine_Owner_SystemXAxis;
	float4 Engine_Owner_SystemYAxis;
	float4 Engine_Owner_SystemZAxis;
	float4 Engine_Owner_Scale;
}

cbuffer FNiagaraEmitterParameters
{
	int Engine_Emitter_NumParticles;
	int Engine_Emitter_TotalSpawnedParticles;
	float Engine_Emitter_SpawnCountScale;
	float Emitter_Age;
	int Emitter_RandomSeed;
	int Engine_Emitter_PaddingInt32_0;
	int Engine_Emitter_PaddingInt32_1;
	int Engine_Emitter_PaddingInt32_2;
}

cbuffer FNiagaraExternalParameters
{
	float Constants_Emitter_UniformRangedFloat002_Minimum;
	float Constants_Emitter_UniformRangedFloat002_Maximum;
	int Constants_Emitter_UniformRangedFloat002_RandomSeed;
	float Constants_Emitter_UniformRangedFloat001_Minimum;
	float Constants_Emitter_UniformRangedFloat001_Maximum;
	int Constants_Emitter_UniformRangedFloat001_RandomSeed;
	float4 Constants_Emitter_InitializeParticle_Color;
	float Constants_Emitter_InitializeParticle_Mass;
	float Constants_Emitter_InitializeParticle_SpriteRotation;
	float3 Constants_Emitter_InitializeParticle_MeshScale;
	float Constants_Emitter_UniformRangedFloat_Minimum;
	float Constants_Emitter_UniformRangedFloat_Maximum;
	int Constants_Emitter_UniformRangedFloat_RandomSeed;
	float Constants_Emitter_AddVelocityInCone_ConeAngle;
	float Constants_Emitter_AddVelocityInCone_VelocityDistributionAlongConeAxis;
	float3 Constants_Emitter_AddVelocityInCone_ConeAxis;
	float Constants_Emitter_AddVelocityInCone_VelocityFalloffAwayFromConeAxis;
	float3 Constants_Emitter_UniformRangedVector_Minimum;
	float3 Constants_Emitter_UniformRangedVector_Maximum;
	int Constants_Emitter_UniformRangedVector_RandomSeed;
	float Constants_Emitter_FloatFromCurve001_ScaleCurve;
	float3 Constants_Emitter_ScaleColor_ScaleRGB;
	float Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	float Constants_Emitter_ScaleSpriteSizeBySpeed_VelocityThreshold;
	float2 Constants_Emitter_ScaleSpriteSizeBySpeed_MinScaleFactor;
	float2 Constants_Emitter_ScaleSpriteSizeBySpeed_MaxScaleFactor;
	int Engine_ExecutionCount;
	float Emitter_SpawnRate;
	float Emitter_SpawnInterval;
	float Emitter_InterpSpawnStartDt;
	int Emitter_SpawnGroup;
}

cbuffer PREV_FNiagaraGlobalParameters
{
	float PREV_Engine_DeltaTime;
	float PREV_Engine_InverseDeltaTime;
	float PREV_Engine_Time;
	float PREV_Engine_RealTime;
}

cbuffer PREV_FNiagaraSystemParameters
{
	float PREV_Engine_Owner_TimeSinceRendered;
	float PREV_Engine_Owner_LODDistance;
	float PREV_Engine_Owner_LODDistanceFraction;
	float PREV_Engine_System_Age;
	int PREV_Engine_Owner_ExecutionState;
	int PREV_Engine_System_TickCount;
	int PREV_Engine_System_NumEmitters;
	int PREV_Engine_System_NumEmittersAlive;
}

cbuffer PREV_FNiagaraOwnerParameters
{
	float4x4 PREV_Engine_Owner_SystemLocalToWorld;
	float4x4 PREV_Engine_Owner_SystemWorldToLocal;
	float4x4 PREV_Engine_Owner_SystemLocalToWorldTransposed;
	float4x4 PREV_Engine_Owner_SystemWorldToLocalTransposed;
	float4x4 PREV_Engine_Owner_SystemLocalToWorldNoScale;
	float4x4 PREV_Engine_Owner_SystemWorldToLocalNoScale;
	float4 PREV_Engine_Owner_Rotation;
	float4 PREV_Engine_Owner_Position;
	float4 PREV_Engine_Owner_Velocity;
	float4 PREV_Engine_Owner_SystemXAxis;
	float4 PREV_Engine_Owner_SystemYAxis;
	float4 PREV_Engine_Owner_SystemZAxis;
	float4 PREV_Engine_Owner_Scale;
}

cbuffer PREV_FNiagaraEmitterParameters
{
	int PREV_Engine_Emitter_NumParticles;
	int PREV_Engine_Emitter_TotalSpawnedParticles;
	float PREV_Engine_Emitter_SpawnCountScale;
	float PREV_Emitter_Age;
	int PREV_Emitter_RandomSeed;
	int PREV_Engine_Emitter_PaddingInt32_0;
	int PREV_Engine_Emitter_PaddingInt32_1;
	int PREV_Engine_Emitter_PaddingInt32_2;
}

cbuffer PREV_FNiagaraExternalParameters
{
	float PREV_Constants_Emitter_UniformRangedFloat002_Minimum;
	float PREV_Constants_Emitter_UniformRangedFloat002_Maximum;
	int PREV_Constants_Emitter_UniformRangedFloat002_RandomSeed;
	float PREV_Constants_Emitter_UniformRangedFloat001_Minimum;
	float PREV_Constants_Emitter_UniformRangedFloat001_Maximum;
	int PREV_Constants_Emitter_UniformRangedFloat001_RandomSeed;
	float4 PREV_Constants_Emitter_InitializeParticle_Color;
	float PREV_Constants_Emitter_InitializeParticle_Mass;
	float PREV_Constants_Emitter_InitializeParticle_SpriteRotation;
	float3 PREV_Constants_Emitter_InitializeParticle_MeshScale;
	float PREV_Constants_Emitter_UniformRangedFloat_Minimum;
	float PREV_Constants_Emitter_UniformRangedFloat_Maximum;
	int PREV_Constants_Emitter_UniformRangedFloat_RandomSeed;
	float PREV_Constants_Emitter_AddVelocityInCone_ConeAngle;
	float PREV_Constants_Emitter_AddVelocityInCone_VelocityDistributionAlongConeAxis;
	float3 PREV_Constants_Emitter_AddVelocityInCone_ConeAxis;
	float PREV_Constants_Emitter_AddVelocityInCone_VelocityFalloffAwayFromConeAxis;
	float3 PREV_Constants_Emitter_UniformRangedVector_Minimum;
	float3 PREV_Constants_Emitter_UniformRangedVector_Maximum;
	int PREV_Constants_Emitter_UniformRangedVector_RandomSeed;
	float PREV_Constants_Emitter_FloatFromCurve001_ScaleCurve;
	float3 PREV_Constants_Emitter_ScaleColor_ScaleRGB;
	float PREV_Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	float PREV_Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	float PREV_Constants_Emitter_ScaleSpriteSizeBySpeed_VelocityThreshold;
	float2 PREV_Constants_Emitter_ScaleSpriteSizeBySpeed_MinScaleFactor;
	float2 PREV_Constants_Emitter_ScaleSpriteSizeBySpeed_MaxScaleFactor;
	int PREV_Engine_ExecutionCount;
	float PREV_Emitter_SpawnRate;
	float PREV_Emitter_SpawnInterval;
	float PREV_Emitter_InterpSpawnStartDt;
	int PREV_Emitter_SpawnGroup;
}

struct FParamMap0_Vector2DFromFloat
{
	float Value;
};

struct FParamMap0_UniformRangedVector
{
	bool FixedRandomSeed;
	float3 Maximum;
	float3 Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat002
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat001
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_Transient
{
	float4 ParticleColorScaleFactor;
	float PhysicsDeltaTime;
	float PhysicsDrag;
	float3 PhysicsForce;
	float2 SpriteSizeScaleFactor;
};

struct FParamMap0_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float DeltaTime;
	float3 Force;
	float Mass;
	float3 Position;
	float3 PreviousVelocity;
	float SpeedLimit;
	float3 Velocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_ScaleSpriteSizeBySpeed
{
	float2 InitialSpriteSize;
	float2 MaxScaleFactor;
	float2 MinScaleFactor;
	bool SampleScaleFactorByCurve;
	float3 SourceVelocity;
	float VelocityThreshold;
};

struct FParamMap0_ScaleColor
{
	float4 ColorValueToScale;
	float ScaleAlpha;
	float3 ScaleRGB;
};

struct FParamMap0_ParticleState
{
	float DeltaTime;
	float Lifetime;
};

struct FParamMap0_Particles_Initial
{
	float4 Color;
	float2 SpriteSize;
};

struct FParamMap0_Particles
{
	float Age;
	float4 Color;
	FParamMap0_Particles_Initial Initial;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float NormalizedAge;
	float3 Position;
	float3 PreviousVelocity;
	float3 Scale;
	float SpriteRotation;
	float2 SpriteSize;
	int UniqueID;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity
{
	float IncomingPhysicsDrag;
	float3 IncomingPhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_ParticleState
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_ParticleState ParticleState;
	FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_Local_SolveForcesAndVelocity
{
	float DeltaTime;
	float Mass;
	float3 PhysicsForce;
};

struct FParamMap0_Local_ScaleSpriteSizeBySpeed
{
	float NormalizedVelocityRange;
};

struct FParamMap0_Local_AddVelocityInCone
{
	float3 ConeVector;
	float DotBetweenConeVectorAndAxis;
};

struct FParamMap0_Local
{
	FParamMap0_Local_AddVelocityInCone AddVelocityInCone;
	FParamMap0_Local_ScaleSpriteSizeBySpeed ScaleSpriteSizeBySpeed;
	FParamMap0_Local_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_Interpolation
{
	float Emitter_InterpSpawnStartDt;
	int Emitter_SpawnGroup;
	float Emitter_SpawnInterval;
	int InterpSpawn_Index;
	float InterpSpawn_InvSpawnTime;
	float InterpSpawn_InvUpdateTime;
	float InterpSpawn_SpawnTime;
	float InterpSpawn_UpdateTime;
	float SpawnInterp;
};

struct FParamMap0_InitializeParticle
{
	float4 Color;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float3 MeshScale;
	float3 Position;
	float SpriteRotation;
	float2 SpriteSize;
	bool WriteColor;
	bool WriteLifetime;
	bool WriteMass;
	bool WriteMaterialRandom;
	bool WritePosition;
	bool WriteScale;
	bool WriteSpriteRotation;
	bool WriteSpriteSize;
};

struct FParamMap0_GravityForce
{
	float3 Gravity;
};

struct FParamMap0_FloatFromCurve001
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_Engine_System
{
	float Age;
	int NumEmitters;
	int NumEmittersAlive;
	int TickCount;
};

struct FParamMap0_Engine_Owner
{
	int ExecutionState;
	float LODDistance;
	float LODDistanceFraction;
	float3 Position;
	float4 Rotation;
	float3 Scale;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemLocalToWorldTransposed;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
	float4x4 SystemWorldToLocalTransposed;
	float3 SystemXAxis;
	float3 SystemYAxis;
	float3 SystemZAxis;
	float TimeSinceRendered;
	float3 Velocity;
};

struct FParamMap0_Engine_Emitter
{
	int NumParticles;
	int PaddingInt32_0;
	int PaddingInt32_1;
	int PaddingInt32_2;
	float SpawnCountScale;
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	int ExecutionCount;
	float InverseDeltaTime;
	FParamMap0_Engine_Owner Owner;
	float RealTime;
	FParamMap0_Engine_System System;
	float Time;
};

struct FParamMap0_Emitter
{
	float Age;
	float InterpSpawnStartDt;
	bool LocalSpace;
	int RandomSeed;
	int SpawnGroup;
	float SpawnInterval;
	float SpawnRate;
};

struct FParamMap0_DataInstance
{
	bool Alive;
};

struct FParamMap0_Constants_Emitter_UniformRangedVector
{
	float3 Maximum;
	float3 Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_UniformRangedFloat002
{
	float Maximum;
	float Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_UniformRangedFloat001
{
	float Maximum;
	float Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_UniformRangedFloat
{
	float Maximum;
	float Minimum;
	int RandomSeed;
};

struct FParamMap0_Constants_Emitter_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float SpeedLimit;
};

struct FParamMap0_Constants_Emitter_ScaleSpriteSizeBySpeed
{
	float2 MaxScaleFactor;
	float2 MinScaleFactor;
	float VelocityThreshold;
};

struct FParamMap0_Constants_Emitter_ScaleColor
{
	float3 ScaleRGB;
};

struct FParamMap0_Constants_Emitter_InitializeParticle
{
	float4 Color;
	float Mass;
	float3 MeshScale;
	float SpriteRotation;
};

struct FParamMap0_Constants_Emitter_FloatFromCurve001
{
	float ScaleCurve;
};

struct FParamMap0_Constants_Emitter_AddVelocityInCone
{
	float ConeAngle;
	float3 ConeAxis;
	float VelocityDistributionAlongConeAxis;
	float VelocityFalloffAwayFromConeAxis;
};

struct FParamMap0_Constants_Emitter
{
	FParamMap0_Constants_Emitter_AddVelocityInCone AddVelocityInCone;
	FParamMap0_Constants_Emitter_FloatFromCurve001 FloatFromCurve001;
	FParamMap0_Constants_Emitter_InitializeParticle InitializeParticle;
	FParamMap0_Constants_Emitter_ScaleColor ScaleColor;
	FParamMap0_Constants_Emitter_ScaleSpriteSizeBySpeed ScaleSpriteSizeBySpeed;
	FParamMap0_Constants_Emitter_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Constants_Emitter_UniformRangedFloat UniformRangedFloat;
	FParamMap0_Constants_Emitter_UniformRangedFloat001 UniformRangedFloat001;
	FParamMap0_Constants_Emitter_UniformRangedFloat002 UniformRangedFloat002;
	FParamMap0_Constants_Emitter_UniformRangedVector UniformRangedVector;
};

struct FParamMap0_Constants
{
	FParamMap0_Constants_Emitter Emitter;
};

struct FParamMap0_AddVelocityInCone
{
	float ConeAngle;
	float3 ConeAxis;
	int ConeAxisCoordinateSpace;
	bool UseVelocityFalloffOnConeAxis;
	float VelocityDistributionAlongConeAxis;
	float VelocityFalloffAwayFromConeAxis;
	float VelocityStrength;
};

struct FParamMap0
{
	FParamMap0_AddVelocityInCone AddVelocityInCone;
	FParamMap0_Constants Constants;
	FParamMap0_DataInstance DataInstance;
	FParamMap0_Emitter Emitter;
	FParamMap0_Engine Engine;
	FParamMap0_FloatFromCurve001 FloatFromCurve001;
	FParamMap0_GravityForce GravityForce;
	FParamMap0_InitializeParticle InitializeParticle;
	FParamMap0_Interpolation Interpolation;
	FParamMap0_Local Local;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_ParticleState ParticleState;
	FParamMap0_ScaleColor ScaleColor;
	FParamMap0_ScaleSpriteSizeBySpeed ScaleSpriteSizeBySpeed;
	FParamMap0_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Transient Transient;
	FParamMap0_UniformRangedFloat UniformRangedFloat;
	FParamMap0_UniformRangedFloat001 UniformRangedFloat001;
	FParamMap0_UniformRangedFloat002 UniformRangedFloat002;
	FParamMap0_UniformRangedVector UniformRangedVector;
	FParamMap0_Vector2DFromFloat Vector2DFromFloat;
};

struct FSimulationContext
{
	FParamMap0 MapSpawn;
	FParamMap0 MapUpdate;
};

static float HackSpawnInterp = 1.0;
void GetRandomInfo_Emitter_Determinism_false_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float Out_Result, inout FSimulationContext Context);
void UniformRangedFloat002_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void UniformRangedFloat001_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void Vector2DFromFloat_Emitter_Func_(out float2 Out_Vec2, inout FSimulationContext Context);
void InitializeParticle_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context);
void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context);
void InitializeParticle_Emitter_Func_(inout FSimulationContext Context);
void UniformRangedFloat_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context);
void PolarToCartesianCoordinates_Func_(float In_Theta, float In_Radius, float In_Period, out float2 Out_XY, out float Out_X, out float Out_Y, out float2 Out_dXdY, out float Out_dX, out float Out_dY, inout FSimulationContext Context);
void DirectionAndLengthSafe_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, float In_FallbackLength, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context);
void RandomVectorInCone_Func_(float In_ConeAngle, float In_ConePointDistribution, bool In_EnableCurvature, float In_ConeCurvature, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float3 Out_Vector, out float3 Out_NormalizedVector, inout FSimulationContext Context);
void RemapValueRange_Func_(float In_INPUT_VAR, float In_InputLow, float In_InputHigh, float In_TargetLow, float In_TargetHigh, out float Out_Remapped, inout FSimulationContext Context);
void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context);
void AddVelocityInCone_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context);
void CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_(bool In_InputsAreNormalized, float3 In_From, float3 In_To, out float4 Out_Result);
void FindQuatBetween_Func_(float3 In_From, float3 In_To, bool In_InputsAreNormalized, out float4 Out_NewOutput, inout FSimulationContext Context);
void MultiplyVectorWithQuaternion_Func_(float3 In_VECTOR_VAR, float4 In_Quaternion, out float3 Out_Vector, inout FSimulationContext Context);
void AddVelocityInCone_Emitter_Func_(inout FSimulationContext Context);
void RandomRangeFloat_Func_(float3 In_Min, float3 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_Result, inout FSimulationContext Context);
void UniformRangedVector_Emitter_Func_(out float3 Out_UniformRangedVector, inout FSimulationContext Context);
void GravityForce_Emitter_Func_(inout FSimulationContext Context);
void ParticleState_Emitter_Func_(inout FSimulationContext Context);
void SampleCurve_EmitterScaleAlphaFloatCurve001(float In_X, out float Out_Value);
void FloatFromCurve001_Emitter_Func_(out float Out_Value, inout FSimulationContext Context);
void ScaleColor_Emitter_Func_(inout FSimulationContext Context);
void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context);
void SampleCurve_EmitterScaleFactorCurve(float In_X, out float Out_Value);
void ScaleSpriteSizeBySpeed_Emitter_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void GetRandomInfo_Emitter_Determinism_false_Func_(int In_Seed, int In_Engine_System_TickCount, bool In_OverrideSeed, int In_Particles_UniqueID, int In_Emitter_RandomSeed, bool In_FixedOverrideSeed, int In_RandomnessMode, out NiagaraRandInfo Out_RandomInfo, out bool Out_UseDeterministicRandoms, inout FSimulationContext Context)
{
	bool Constant20 = false;
	int Constant21 = 0;
	bool Result = NiagaraAll(In_RandomnessMode == Constant21);
	bool Result1 = Constant20 && Result;
	int Constant22 = 1;
	bool Result2 = NiagaraAll(In_RandomnessMode == Constant22);
	bool Result3 = Result1 || Result2;
	int Seed_IfResult;
	if(In_OverrideSeed)
	{
	Seed_IfResult = In_Seed;
	}
	else
	{
	Seed_IfResult = Context.MapSpawn.Emitter.RandomSeed;
	}
	int Constant23 = 0;
	int Constant24 = 0;
	int Seed1_IfResult;
	int Seed2_IfResult;
	int Seed3_IfResult;
	if(In_FixedOverrideSeed)
	{
	Seed1_IfResult = Seed_IfResult;
	Seed2_IfResult = Constant23;
	Seed3_IfResult = Constant24;
	}
	else
	{
	Seed1_IfResult = Context.MapSpawn.Particles.UniqueID;
	Seed2_IfResult = Context.MapSpawn.Engine.System.TickCount;
	Seed3_IfResult = Seed_IfResult;
	}
	int Constant25 = -1;
	int Constant26 = -1;
	int Constant27 = -1;
	int Seed1_IfResult1;
	int Seed2_IfResult1;
	int Seed3_IfResult1;
	if(Result3)
	{
	Seed1_IfResult1 = Seed1_IfResult;
	Seed2_IfResult1 = Seed2_IfResult;
	Seed3_IfResult1 = Seed3_IfResult;
	}
	else
	{
	Seed1_IfResult1 = Constant25;
	Seed2_IfResult1 = Constant26;
	Seed3_IfResult1 = Constant27;
	}
	NiagaraRandInfo Output1;
	Output1.Seed1 = Seed1_IfResult1;
	Output1.Seed2 = Seed2_IfResult1;
	Output1.Seed3 = Seed3_IfResult1;
	Out_RandomInfo = Output1;
	Out_UseDeterministicRandoms = Result3;
}

void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float Out_Result, inout FSimulationContext Context)
{
	int Constant16 = (0);
	bool Constant17 = false;
	int Constant18 = 0;
	int Constant19 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo;
	bool GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms;
	GetRandomInfo_Emitter_Determinism_false_Func_(In_Seed, Constant16, In_OverrideSeed, Constant18, Constant19, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo, GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms, Context);
	float Result4 = In_Max - In_Min;
	int Seed1;
	int Seed2;
	int Seed3;
	Seed1 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo.Seed1;
	Seed2 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo.Seed2;
	Seed3 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo.Seed3;
	float Result5 = rand_float(Result4, Seed1, Seed2, Seed3);
	float Result6 = rand_float(Result4);
	float Random_IfResult;
	if(GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms)
	{
	Random_IfResult = Result5;
	}
	else
	{
	Random_IfResult = Result6;
	}
	float Result7 = In_Min + Random_IfResult;
	Out_Result = Result7;
}

void UniformRangedFloat002_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant14 = 0;
	bool Constant15 = false;
	int Mode_IfResult;
	bool Override_IfResult;
	if(Context.MapSpawn.UniformRangedFloat002.OverrideRandomness)
	{
	Mode_IfResult = Context.MapSpawn.UniformRangedFloat002.RandomnessMode;
	Override_IfResult = Context.MapSpawn.UniformRangedFloat002.OverrideSeed;
	}
	else
	{
	Mode_IfResult = Constant14;
	Override_IfResult = Constant15;
	}
	float RandomRangeFloat_Func_Output_Result;
	RandomRangeFloat_Func_(Context.MapSpawn.Constants.Emitter.UniformRangedFloat002.Minimum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat002.Maximum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat002.RandomSeed, Mode_IfResult, Override_IfResult, Context.MapSpawn.UniformRangedFloat002.FixedRandomSeed, RandomRangeFloat_Func_Output_Result, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result;
}

void UniformRangedFloat001_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant35 = 0;
	bool Constant36 = false;
	int Mode_IfResult1;
	bool Override_IfResult1;
	if(Context.MapSpawn.UniformRangedFloat001.OverrideRandomness)
	{
	Mode_IfResult1 = Context.MapSpawn.UniformRangedFloat001.RandomnessMode;
	Override_IfResult1 = Context.MapSpawn.UniformRangedFloat001.OverrideSeed;
	}
	else
	{
	Mode_IfResult1 = Constant35;
	Override_IfResult1 = Constant36;
	}
	float RandomRangeFloat_Func_Output_Result1;
	RandomRangeFloat_Func_(Context.MapSpawn.Constants.Emitter.UniformRangedFloat001.Minimum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat001.Maximum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat001.RandomSeed, Mode_IfResult1, Override_IfResult1, Context.MapSpawn.UniformRangedFloat001.FixedRandomSeed, RandomRangeFloat_Func_Output_Result1, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result1;
}

void Vector2DFromFloat_Emitter_Func_(out float2 Out_Vec2, inout FSimulationContext Context)
{
	float2 Output11;
	Output11.x = Context.MapSpawn.Vector2DFromFloat.Value;
	Output11.y = Context.MapSpawn.Vector2DFromFloat.Value;
	Out_Vec2 = Output11;
}

void InitializeParticle_SimulationPosition_Emitter_Func_(out float3 Out_OutPosition, inout FSimulationContext Context)
{
	bool Constant42 = false;
	float3 Constant43 = float3(0,0,0);
	float3 Vector_IfResult;
	if(Constant42)
	{
	Vector_IfResult = Constant43;
	}
	else
	{
	Vector_IfResult = Context.MapSpawn.Engine.Owner.Position;
	}
	Out_OutPosition = Vector_IfResult;
}

void RandomRangeFloat_Func_(float In_Min, float In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float Out_Result, inout FSimulationContext Context)
{
	int Constant50 = (0);
	bool Constant51 = false;
	int Constant52 = 0;
	int Constant53 = (0);
	bool Constant54 = false;
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1;
	bool GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms1;
	GetRandomInfo_Emitter_Determinism_false_Func_(In_Seed, Constant50, In_OverrideSeed, Constant52, Constant53, Constant54, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1, GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms1, Context);
	float Result8 = In_Max - In_Min;
	int Seed11;
	int Seed21;
	int Seed31;
	Seed11 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1.Seed1;
	Seed21 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1.Seed2;
	Seed31 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo1.Seed3;
	float Result9 = rand_float(Result8, Seed11, Seed21, Seed31);
	float Result10 = rand_float(Result8);
	float Random_IfResult1;
	if(GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms1)
	{
	Random_IfResult1 = Result9;
	}
	else
	{
	Random_IfResult1 = Result10;
	}
	float Result11 = In_Min + Random_IfResult1;
	Out_Result = Result11;
}

void InitializeParticle_Emitter_Func_(inout FSimulationContext Context)
{
	float Lifetime_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteLifetime)
	{
	Lifetime_IfResult = Context.MapSpawn.InitializeParticle.Lifetime;
	}
	else
	{
	Lifetime_IfResult = Context.MapSpawn.Particles.Lifetime;
	}
	Context.MapSpawn.Particles.Lifetime = Lifetime_IfResult;
	float4 Color_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteColor)
	{
	Color_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.Color;
	}
	else
	{
	Color_IfResult = Context.MapSpawn.Particles.Color;
	}
	Context.MapSpawn.Particles.Color = Color_IfResult;
	float Mass_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteMass)
	{
	Mass_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.Mass;
	}
	else
	{
	Mass_IfResult = Context.MapSpawn.Particles.Mass;
	}
	Context.MapSpawn.Particles.Mass = Mass_IfResult;
	float2 SpriteSize_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteSpriteSize)
	{
	SpriteSize_IfResult = Context.MapSpawn.InitializeParticle.SpriteSize;
	}
	else
	{
	SpriteSize_IfResult = Context.MapSpawn.Particles.SpriteSize;
	}
	Context.MapSpawn.Particles.SpriteSize = SpriteSize_IfResult;
	float SpriteRotation_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteSpriteRotation)
	{
	SpriteRotation_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteRotation;
	}
	else
	{
	SpriteRotation_IfResult = Context.MapSpawn.Particles.SpriteRotation;
	}
	Context.MapSpawn.Particles.SpriteRotation = SpriteRotation_IfResult;
	float3 Scale_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteScale)
	{
	Scale_IfResult = Context.MapSpawn.Constants.Emitter.InitializeParticle.MeshScale;
	}
	else
	{
	Scale_IfResult = Context.MapSpawn.Particles.Scale;
	}
	Context.MapSpawn.Particles.Scale = Scale_IfResult;
	float3 Scale_IfResult1;
	if(Context.MapSpawn.InitializeParticle.WritePosition)
	{
	Scale_IfResult1 = Context.MapSpawn.InitializeParticle.Position;
	}
	else
	{
	Scale_IfResult1 = Context.MapSpawn.Particles.Position;
	}
	Context.MapSpawn.Particles.Position = Scale_IfResult1;
	float MaterialRandom_IfResult;
	if(Context.MapSpawn.InitializeParticle.WriteMaterialRandom)
	{
	MaterialRandom_IfResult = Context.MapSpawn.InitializeParticle.MaterialRandom;
	}
	else
	{
	MaterialRandom_IfResult = Context.MapSpawn.Particles.MaterialRandom;
	}
	Context.MapSpawn.Particles.MaterialRandom = MaterialRandom_IfResult;
}

void UniformRangedFloat_Emitter_Func_(out float Out_UniformRangedFloat, inout FSimulationContext Context)
{
	int Constant59 = 0;
	bool Constant60 = false;
	int Mode_IfResult2;
	bool Override_IfResult2;
	if(Context.MapSpawn.UniformRangedFloat.OverrideRandomness)
	{
	Mode_IfResult2 = Context.MapSpawn.UniformRangedFloat.RandomnessMode;
	Override_IfResult2 = Context.MapSpawn.UniformRangedFloat.OverrideSeed;
	}
	else
	{
	Mode_IfResult2 = Constant59;
	Override_IfResult2 = Constant60;
	}
	float RandomRangeFloat_Func_Output_Result3;
	RandomRangeFloat_Func_(Context.MapSpawn.Constants.Emitter.UniformRangedFloat.Minimum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat.Maximum, Context.MapSpawn.Constants.Emitter.UniformRangedFloat.RandomSeed, Mode_IfResult2, Override_IfResult2, Context.MapSpawn.UniformRangedFloat.FixedRandomSeed, RandomRangeFloat_Func_Output_Result3, Context);
	Out_UniformRangedFloat = RandomRangeFloat_Func_Output_Result3;
}

void PolarToCartesianCoordinates_Func_(float In_Theta, float In_Radius, float In_Period, out float2 Out_XY, out float Out_X, out float Out_Y, out float2 Out_dXdY, out float Out_dX, out float Out_dY, inout FSimulationContext Context)
{
	float Result19 = cos(In_Theta*(TWO_PI/In_Period));
	float Result20 = In_Radius * Result19;
	float Result21 = sin(In_Theta*(TWO_PI/In_Period));
	float Result22 = In_Radius * Result21;
	float2 XY;
	XY.x = Result20;
	XY.y = Result22;
	float Constant86 = -1;
	float Result23 = Result21 * Constant86;
	float2 dXdY;
	dXdY.x = Result23;
	dXdY.y = Result19;
	Out_XY = XY;
	Out_X = Result20;
	Out_Y = Result22;
	Out_dXdY = dXdY;
	Out_dX = Result23;
	Out_dY = Result19;
}

void DirectionAndLengthSafe_Func_(float3 In_V, float3 In_Fallback, float In_Threshold, float In_FallbackLength, out float3 Out_Direction, out float Out_Length, out bool Out_BelowThreshold, inout FSimulationContext Context)
{
	float Result26 = length(In_V);
	bool Result27 = NiagaraAll(Result26 < In_Threshold);
	float Result28 = length(In_Fallback);
	float3 Vector_IfResult1;
	float float_IfResult1;
	if(Result27)
	{
	Vector_IfResult1 = In_Fallback;
	float_IfResult1 = In_FallbackLength;
	}
	else
	{
	Vector_IfResult1 = In_V;
	float_IfResult1 = Result26;
	}
	float3 Result29 = Vector_IfResult1 / float_IfResult1;
	float3 Vector_IfResult2;
	float float_IfResult2;
	if(Result27)
	{
	Vector_IfResult2 = In_Fallback;
	float_IfResult2 = Result28;
	}
	else
	{
	Vector_IfResult2 = Result29;
	float_IfResult2 = float_IfResult1;
	}
	Out_Direction = Vector_IfResult2;
	Out_Length = float_IfResult2;
	Out_BelowThreshold = Result27;
}

void RandomVectorInCone_Func_(float In_ConeAngle, float In_ConePointDistribution, bool In_EnableCurvature, float In_ConeCurvature, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, out float3 Out_Vector, out float3 Out_NormalizedVector, inout FSimulationContext Context)
{
	float Constant71 = 0;
	float Constant72 = 1;
	bool Constant73 = false;
	float RandomRangeFloat_Func_Output_Result4;
	RandomRangeFloat_Func_(Constant71, Constant72, In_Seed, In_RandomnessMode, In_OverrideSeed, Constant73, RandomRangeFloat_Func_Output_Result4, Context);
	float Constant74 = 0;
	float Constant75 = 1;
	bool Constant76 = false;
	float RandomRangeFloat_Func_Output_Result5;
	RandomRangeFloat_Func_(Constant74, Constant75, In_Seed, In_RandomnessMode, In_OverrideSeed, Constant76, RandomRangeFloat_Func_Output_Result5, Context);
	float Result13 = pow(RandomRangeFloat_Func_Output_Result5,In_ConePointDistribution);
	float Constant77 = 1e-05;
	float Constant78 = 179.875;
	float Result14 = clamp(In_ConeAngle,Constant77,Constant78);
	float Constant79 = 0.5;
	float Result15 = Result14 * Constant79;
	float Result16 = tan((PI/180.0f)*Result15);
	float Constant80 = 0;
	float Constant81 = 1;
	bool Constant82 = false;
	float RandomRangeFloat_Func_Output_Result6;
	RandomRangeFloat_Func_(Constant80, Constant81, In_Seed, In_RandomnessMode, In_OverrideSeed, Constant82, RandomRangeFloat_Func_Output_Result6, Context);
	float Constant83 = 0.0001;
	float Constant84 = 10;
	float Result17 = clamp(In_ConeCurvature,Constant83,Constant84);
	float Result18 = pow(RandomRangeFloat_Func_Output_Result4,Result17);
	float float_IfResult;
	if(In_EnableCurvature)
	{
	float_IfResult = Result18;
	}
	else
	{
	float_IfResult = RandomRangeFloat_Func_Output_Result4;
	}
	float Constant85 = 1;
	float2 PolarToCartesianCoordinates_Func_Output_XY;
	float PolarToCartesianCoordinates_Func_Output_X;
	float PolarToCartesianCoordinates_Func_Output_Y;
	float2 PolarToCartesianCoordinates_Func_Output_dXdY;
	float PolarToCartesianCoordinates_Func_Output_dX;
	float PolarToCartesianCoordinates_Func_Output_dY;
	PolarToCartesianCoordinates_Func_(RandomRangeFloat_Func_Output_Result6, float_IfResult, Constant85, PolarToCartesianCoordinates_Func_Output_XY, PolarToCartesianCoordinates_Func_Output_X, PolarToCartesianCoordinates_Func_Output_Y, PolarToCartesianCoordinates_Func_Output_dXdY, PolarToCartesianCoordinates_Func_Output_dX, PolarToCartesianCoordinates_Func_Output_dY, Context);
	float2 Result24 = Result16 * PolarToCartesianCoordinates_Func_Output_XY;
	float2 Result25 = Result13 * Result24;
	float X;
	float Y;
	X = Result25.x;
	Y = Result25.y;
	float3 Output12;
	Output12.x = RandomRangeFloat_Func_Output_Result4;
	Output12.y = X;
	Output12.z = Y;
	float3 Constant87 = float3(1,0,0);
	float Constant88 = 1e-05;
	float Constant89 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction;
	float DirectionAndLengthSafe_Func_Output_Length;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold;
	DirectionAndLengthSafe_Func_(Output12, Constant87, Constant88, Constant89, DirectionAndLengthSafe_Func_Output_Direction, DirectionAndLengthSafe_Func_Output_Length, DirectionAndLengthSafe_Func_Output_BelowThreshold, Context);
	Out_Vector = Output12;
	Out_NormalizedVector = DirectionAndLengthSafe_Func_Output_Direction;
}

void RemapValueRange_Func_(float In_INPUT_VAR, float In_InputLow, float In_InputHigh, float In_TargetLow, float In_TargetHigh, out float Out_Remapped, inout FSimulationContext Context)
{
	float Result33 = In_INPUT_VAR - In_InputLow;
	float Result34 = In_InputHigh - In_InputLow;
	float Result35 = Result33 / Result34;
	float Result36 = In_TargetHigh - In_TargetLow;
	float Result37 = Result35 * Result36;
	float Result38 = Result37 + In_TargetLow;
	Out_Remapped = Result38;
}

void TransformBase_Func_(int In_SourceSpace, int In_DestinationSpace, float4x4 In_LocalToWorldTransform, float4x4 In_WorldToLocalTransform, bool In_bLocalSpace, out bool Out_bUseOriginal, out float4x4 Out_OutTransform, inout FSimulationContext Context)
{
	int Constant101 = 0;
	bool Result41 = NiagaraAll(In_SourceSpace == Constant101);
	int Constant102 = 0;
	bool Result42 = NiagaraAll(In_DestinationSpace == Constant102);
	bool Result43 = Result41 && Result42;
	int Constant103 = 1;
	bool Result44 = NiagaraAll(In_SourceSpace == Constant103);
	int Constant104 = 1;
	bool Result45 = NiagaraAll(In_DestinationSpace == Constant104);
	bool Result46 = Result44 && Result45;
	bool Result47 = Result43 || Result46;
	int Constant105 = 2;
	bool Result48 = NiagaraAll(In_SourceSpace == Constant105);
	int Constant106 = 2;
	bool Result49 = NiagaraAll(In_DestinationSpace == Constant106);
	bool Result50 = Result48 && Result49;
	bool Result51 = Result47 || Result50;
	bool Result52 = Result41 && Result49;
	bool Result53 = Result48 && Result42;
	bool Result54 = Result52 || Result53;
	bool Result55 = In_bLocalSpace && Result54;
	bool Result56 = Result51 || Result55;
	bool Result57 = !In_bLocalSpace;
	bool Result58 = Result41 && Result45;
	bool Result59 = Result44 && Result42;
	bool Result60 = Result58 || Result59;
	bool Result61 = Result57 && Result60;
	bool Result62 = Result56 || Result61;
	bool Result63 = In_bLocalSpace && Result58;
	bool Result64 = Result48 && Result45;
	bool Result65 = Result63 || Result64;
	bool Result66 = Result57 && Result53;
	bool Result67 = Result65 || Result66;
	float4x4 Matrix_IfResult1;
	if(Result67)
	{
	Matrix_IfResult1 = In_LocalToWorldTransform;
	}
	else
	{
	Matrix_IfResult1 = In_WorldToLocalTransform;
	}
	Out_bUseOriginal = Result62;
	Out_OutTransform = Matrix_IfResult1;
}

void AddVelocityInCone_NF_TransformVector_Emitter_Func_(float3 In_InVector, int In_SourceSpace, int In_DestinationSpace, bool In_ApplyScale, out float3 Out_OutVector, inout FSimulationContext Context)
{
	bool Constant100 = false;
	float4x4 Matrix_IfResult;
	float4x4 Matrix001_IfResult;
	if(In_ApplyScale)
	{
	Matrix_IfResult = Context.MapSpawn.Engine.Owner.SystemLocalToWorld;
	Matrix001_IfResult = Context.MapSpawn.Engine.Owner.SystemWorldToLocal;
	}
	else
	{
	Matrix_IfResult = Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale;
	Matrix001_IfResult = Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale;
	}
	bool TransformBase_Func_Output_bUseOriginal;
	float4x4 TransformBase_Func_Output_OutTransform;
	TransformBase_Func_(In_SourceSpace, In_DestinationSpace, Matrix_IfResult, Matrix001_IfResult, Constant100, TransformBase_Func_Output_bUseOriginal, TransformBase_Func_Output_OutTransform, Context);
	float3 Result68 = mul(float4(In_InVector,0.0),TransformBase_Func_Output_OutTransform).xyz;
	float3 Vector_IfResult3;
	if(TransformBase_Func_Output_bUseOriginal)
	{
	Vector_IfResult3 = In_InVector;
	}
	else
	{
	Vector_IfResult3 = Result68;
	}
	Out_OutVector = Vector_IfResult3;
}

void CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_(bool In_InputsAreNormalized, float3 In_From, float3 In_To, out float4 Out_Result)
{



		float NormAB = 1.0f;
	    float NormFactor = sqrt((In_From.x*In_From.x + In_From.y*In_From.y + In_From.z*In_From.z) * (In_To.x*In_To.x + In_To.y*In_To.y + In_To.z*In_To.z));

	    if (In_InputsAreNormalized)
	    {
	         NormAB = 1.0f;
	    }
	    else
	    {
	         NormAB = NormFactor;
	   }

		float w = NormAB + dot(In_From, In_To);
	    float4 Result1 = float4(In_From.y * In_To.z - In_From.z * In_To.y,
						   In_From.z * In_To.x - In_From.x * In_To.z,
						   In_From.x * In_To.y - In_From.y * In_To.x,
						   w);
		float4 Result2 = float4(-In_From.z, 0.0f, In_From.x, 0.0f);
	    float4 Result3 = float4(0.0f, -In_From.z, In_From.y, 0.0f);


	    if (abs(In_From.x) > abs(In_From.y))
	    {
	        Out_Result = Result2;
	    }
	    else
	    {
	        Out_Result = Result3;
	    }


		if (w >= 3.4e-4f * NormAB)
		{

			Out_Result = Result1;
		}

		Out_Result = normalize(Out_Result);

}

void FindQuatBetween_Func_(float3 In_From, float3 In_To, bool In_InputsAreNormalized, out float4 Out_NewOutput, inout FSimulationContext Context)
{
	float4 CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_Output_Result;
	CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_(In_InputsAreNormalized, In_From, In_To, CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_Output_Result);
	Out_NewOutput = CustomHlsl5A25A2A4455E3C692D3322A954DF887F_Func_Output_Result;
}

void MultiplyVectorWithQuaternion_Func_(float3 In_VECTOR_VAR, float4 In_Quaternion, out float3 Out_Vector, inout FSimulationContext Context)
{
	float3 Output0;
	float Output13;
	Output0.x = In_Quaternion.x;
	Output0.y = In_Quaternion.y;
	Output0.z = In_Quaternion.z;
	Output13 = In_Quaternion.w;
	float Result69 = dot(Output0,In_VECTOR_VAR);
	float Constant108 = 2;
	float Result70 = Result69 * Constant108;
	float3 Result71 = Output0 * Result70;
	float Result72 = Output13 * Output13;
	float Result73 = dot(Output0,Output0);
	float Result74 = Result72 - Result73;
	float3 Result75 = Result74 * In_VECTOR_VAR;
	float3 Result76 = Result71 + Result75;
	float3 Result77 = cross(Output0,In_VECTOR_VAR);
	float Constant109 = 2;
	float Result78 = Output13 * Constant109;
	float3 Result79 = Result77 * Result78;
	float3 Result80 = Result76 + Result79;
	Out_Vector = Result80;
}

void AddVelocityInCone_Emitter_Func_(inout FSimulationContext Context)
{
	float Constant65 = 1e-05;
	float Result12 = max(Context.MapSpawn.Constants.Emitter.AddVelocityInCone.ConeAngle, Constant65);
	bool Constant66 = false;
	float Constant67 = 1;
	int Constant68 = -1;
	int Constant69 = 0;
	bool Constant70 = false;
	float3 RandomVectorInCone_Func_Output_Vector;
	float3 RandomVectorInCone_Func_Output_NormalizedVector;
	RandomVectorInCone_Func_(Result12, Context.MapSpawn.Constants.Emitter.AddVelocityInCone.VelocityDistributionAlongConeAxis, Constant66, Constant67, Constant68, Constant69, Constant70, RandomVectorInCone_Func_Output_Vector, RandomVectorInCone_Func_Output_NormalizedVector, Context);
	float3 Constant90 = float3(1,0,0);
	float Result30 = dot(Constant90,RandomVectorInCone_Func_Output_NormalizedVector);
	float Constant91 = 0.5;
	float Result31 = Result12 * Constant91;
	float Result32 = cos((PI/180.0f)*Result31);
	float Constant92 = 1;
	float Constant93 = 0;
	float Constant94 = 1;
	float RemapValueRange_Func_Output_Remapped;
	RemapValueRange_Func_(Result30, Result32, Constant92, Constant93, Constant94, RemapValueRange_Func_Output_Remapped, Context);
	float Constant95 = 0;
	float Constant96 = 1;
	float Result39 = clamp(RemapValueRange_Func_Output_Remapped,Constant95,Constant96);
	Context.MapSpawn.Local.AddVelocityInCone.ConeVector = RandomVectorInCone_Func_Output_NormalizedVector;
	Context.MapSpawn.Local.AddVelocityInCone.DotBetweenConeVectorAndAxis = Result39;
	float3 Constant97 = float3(1,0,0);
	float3 Result40 = normalize(Context.MapSpawn.Constants.Emitter.AddVelocityInCone.ConeAxis);
	int Constant98 = 0;
	bool Constant99 = false;
	float3 AddVelocityInCone_NF_TransformVector_Emitter_Func_Output_OutVector;
	AddVelocityInCone_NF_TransformVector_Emitter_Func_(Result40, Context.MapSpawn.AddVelocityInCone.ConeAxisCoordinateSpace, Constant98, Constant99, AddVelocityInCone_NF_TransformVector_Emitter_Func_Output_OutVector, Context);
	bool Constant107 = false;
	float4 FindQuatBetween_Func_Output_NewOutput;
	FindQuatBetween_Func_(Constant97, AddVelocityInCone_NF_TransformVector_Emitter_Func_Output_OutVector, Constant107, FindQuatBetween_Func_Output_NewOutput, Context);
	float3 MultiplyVectorWithQuaternion_Func_Output_Vector;
	MultiplyVectorWithQuaternion_Func_(Context.MapSpawn.Local.AddVelocityInCone.ConeVector, FindQuatBetween_Func_Output_NewOutput, MultiplyVectorWithQuaternion_Func_Output_Vector, Context);
	Context.MapSpawn.Local.AddVelocityInCone.ConeVector = MultiplyVectorWithQuaternion_Func_Output_Vector;
	float Constant110 = 0.0001;
	float Result81 = max(Context.MapSpawn.Constants.Emitter.AddVelocityInCone.VelocityFalloffAwayFromConeAxis, Constant110);
	float Result82 = pow(Context.MapSpawn.Local.AddVelocityInCone.DotBetweenConeVectorAndAxis,Result81);
	float Result83 = Context.MapSpawn.AddVelocityInCone.VelocityStrength * Result82;
	float float_IfResult3;
	if(Context.MapSpawn.AddVelocityInCone.UseVelocityFalloffOnConeAxis)
	{
	float_IfResult3 = Result83;
	}
	else
	{
	float_IfResult3 = Context.MapSpawn.AddVelocityInCone.VelocityStrength;
	}
	float3 Result84 = Context.MapSpawn.Local.AddVelocityInCone.ConeVector * float_IfResult3;
	float3 Result85 = Context.MapSpawn.Particles.Velocity + Result84;
	Context.MapSpawn.Particles.Velocity = Result85;
}

void RandomRangeFloat_Func_(float3 In_Min, float3 In_Max, int In_Seed, int In_RandomnessMode, bool In_OverrideSeed, bool In_FixedOverrideSeed, out float3 Out_Result, inout FSimulationContext Context)
{
	int Constant117 = (0);
	bool Constant118 = false;
	int Constant119 = 0;
	int Constant120 = (0);
	NiagaraRandInfo GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2;
	bool GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms2;
	GetRandomInfo_Emitter_Determinism_false_Func_(In_Seed, Constant117, In_OverrideSeed, Constant119, Constant120, In_FixedOverrideSeed, In_RandomnessMode, GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2, GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms2, Context);
	float3 Result86 = In_Max - In_Min;
	int Seed12;
	int Seed22;
	int Seed32;
	Seed12 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2.Seed1;
	Seed22 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2.Seed2;
	Seed32 = GetRandomInfo_Emitter_Determinism_false_Func_Output_RandomInfo2.Seed3;
	float3 Result87 = rand_float(Result86, Seed12, Seed22, Seed32);
	float3 Result88 = rand_float(Result86);
	float3 Random_IfResult2;
	if(GetRandomInfo_Emitter_Determinism_false_Func_Output_UseDeterministicRandoms2)
	{
	Random_IfResult2 = Result87;
	}
	else
	{
	Random_IfResult2 = Result88;
	}
	float3 Result89 = In_Min + Random_IfResult2;
	Out_Result = Result89;
}

void UniformRangedVector_Emitter_Func_(out float3 Out_UniformRangedVector, inout FSimulationContext Context)
{
	int Constant115 = 0;
	bool Constant116 = false;
	int Mode_IfResult3;
	bool Override_IfResult3;
	if(Context.MapUpdate.UniformRangedVector.OverrideRandomness)
	{
	Mode_IfResult3 = Context.MapUpdate.UniformRangedVector.RandomnessMode;
	Override_IfResult3 = Context.MapUpdate.UniformRangedVector.OverrideSeed;
	}
	else
	{
	Mode_IfResult3 = Constant115;
	Override_IfResult3 = Constant116;
	}
	float3 RandomRangeFloat_Func_Output_Result7;
	RandomRangeFloat_Func_(Context.MapUpdate.Constants.Emitter.UniformRangedVector.Minimum, Context.MapUpdate.Constants.Emitter.UniformRangedVector.Maximum, Context.MapUpdate.Constants.Emitter.UniformRangedVector.RandomSeed, Mode_IfResult3, Override_IfResult3, Context.MapUpdate.UniformRangedVector.FixedRandomSeed, RandomRangeFloat_Func_Output_Result7, Context);
	Out_UniformRangedVector = RandomRangeFloat_Func_Output_Result7;
}

void GravityForce_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Result90 = Context.MapUpdate.GravityForce.Gravity * Context.MapUpdate.Particles.Mass;
	float3 Result91 = Context.MapUpdate.Transient.PhysicsForce + Result90;
	Context.MapUpdate.Transient.PhysicsForce = Result91;
}

void ParticleState_Emitter_Func_(inout FSimulationContext Context)
{
	bool Result92 = NiagaraAll(Context.MapUpdate.Particles.Age <= Context.MapUpdate.Engine.DeltaTime);
	Context.MapUpdate.OUTPUT_VAR.ParticleState.FirstFrame = Result92;
	float Result93 = Context.MapUpdate.Particles.Age + Context.MapUpdate.ParticleState.DeltaTime;
	float Constant123 = 1e-05;
	float Result94 = max(Context.MapUpdate.ParticleState.Lifetime, Constant123);
	float Constant124 = 0.0001;
	float Result95 = Result94 - Constant124;
	bool Result96 = NiagaraAll(Result93 < Result95);
	bool Constant125 = false;
	bool bool_IfResult;
	if(Result96)
	{
	bool_IfResult = Context.MapUpdate.DataInstance.Alive;
	}
	else
	{
	bool_IfResult = Constant125;
	}
	float Result97 = Result93 / Result94;
	Context.MapUpdate.DataInstance.Alive = bool_IfResult;
	Context.MapUpdate.Particles.Age = Result93;
	Context.MapUpdate.Particles.NormalizedAge = Result97;
}

void FloatFromCurve001_Emitter_Func_(out float Out_Value, inout FSimulationContext Context)
{
	float SampleCurve_EmitterScaleAlphaFloatCurve001Output_Value;
	SampleCurve_EmitterScaleAlphaFloatCurve001(Context.MapUpdate.FloatFromCurve001.CurveIndex, SampleCurve_EmitterScaleAlphaFloatCurve001Output_Value);
	float Result98 = SampleCurve_EmitterScaleAlphaFloatCurve001Output_Value * Context.MapUpdate.Constants.Emitter.FloatFromCurve001.ScaleCurve;
	Out_Value = Result98;
}

void ScaleColor_Emitter_Func_(inout FSimulationContext Context)
{
	float4 Output01;
	Output01.r = Context.MapUpdate.Constants.Emitter.ScaleColor.ScaleRGB.x;
	Output01.g = Context.MapUpdate.Constants.Emitter.ScaleColor.ScaleRGB.y;
	Output01.b = Context.MapUpdate.Constants.Emitter.ScaleColor.ScaleRGB.z;
	Output01.a = Context.MapUpdate.ScaleColor.ScaleAlpha;
	float4 Result99 = Context.MapUpdate.Transient.ParticleColorScaleFactor * Output01;
	float4 Result100 = Context.MapUpdate.ScaleColor.ColorValueToScale * Result99;
	Context.MapUpdate.Particles.Color = Result100;
	Context.MapUpdate.Transient.ParticleColorScaleFactor = Result99;
}

void SolveForcesAndVelocity_Emitter_Func_(inout FSimulationContext Context)
{
	Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime = Context.MapUpdate.SolveForcesAndVelocity.DeltaTime;
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Context.MapUpdate.SolveForcesAndVelocity.Force;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsForce = Context.MapUpdate.SolveForcesAndVelocity.Force;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.Local.SolveForcesAndVelocity.Mass = Context.MapUpdate.SolveForcesAndVelocity.Mass;
	float Constant135 = 0.0001;
	float Result101 = max(Context.MapUpdate.Local.SolveForcesAndVelocity.Mass, Constant135);
	float Result102 = Reciprocal(Result101);
	float3 Result103 = Result102 * Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce;
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Result103;
	float3 Result104 = Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce * Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime + Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float Constant136 = 0;
	float Result105 = max(Context.MapUpdate.Transient.PhysicsDrag, Constant136);
	float Result106 = Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime * Result105;
	float Constant137 = 1;
	float Result107 = Result106 + Constant137;
	float3 Result108 = Result104 / Result107;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Result108;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.IncomingPhysicsDrag = Context.MapUpdate.Transient.PhysicsDrag;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	float3 Result109 = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity * Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime + Context.MapUpdate.SolveForcesAndVelocity.Position;
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position = Result109;
	float3 Position_IfResult;
	float3 Velocity_IfResult;
	float3 PreviousVelocity_IfResult;
	if(Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	Position_IfResult = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position;
	Velocity_IfResult = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity;
	}
	else
	{
	Position_IfResult = Context.MapUpdate.SolveForcesAndVelocity.Position;
	Velocity_IfResult = Context.MapUpdate.SolveForcesAndVelocity.Velocity;
	PreviousVelocity_IfResult = Context.MapUpdate.SolveForcesAndVelocity.PreviousVelocity;
	}
	Context.MapUpdate.Particles.Position = Position_IfResult;
	Context.MapUpdate.Particles.Velocity = Velocity_IfResult;
	Context.MapUpdate.Particles.PreviousVelocity = PreviousVelocity_IfResult;
	float3 Constant138 = float3(0,0,0);
	float Constant139 = 0;
	float3 ForceVector_IfResult;
	float Drag_IfResult;
	if(Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties)
	{
	ForceVector_IfResult = Constant138;
	Drag_IfResult = Constant139;
	}
	else
	{
	ForceVector_IfResult = Context.MapUpdate.Transient.PhysicsForce;
	Drag_IfResult = Context.MapUpdate.Transient.PhysicsDrag;
	}
	Context.MapUpdate.Transient.PhysicsForce = ForceVector_IfResult;
	Context.MapUpdate.Transient.PhysicsDrag = Drag_IfResult;
}

void ScaleSpriteSizeBySpeed_Emitter_Func_(inout FSimulationContext Context)
{
	float3 Constant143 = float3(0,0,1);
	float Constant144 = 1e-05;
	float Constant145 = 1;
	float3 DirectionAndLengthSafe_Func_Output_Direction1;
	float DirectionAndLengthSafe_Func_Output_Length1;
	bool DirectionAndLengthSafe_Func_Output_BelowThreshold1;
	DirectionAndLengthSafe_Func_(Context.MapUpdate.ScaleSpriteSizeBySpeed.SourceVelocity, Constant143, Constant144, Constant145, DirectionAndLengthSafe_Func_Output_Direction1, DirectionAndLengthSafe_Func_Output_Length1, DirectionAndLengthSafe_Func_Output_BelowThreshold1, Context);
	float Constant146 = 0;
	float float_IfResult4;
	if(DirectionAndLengthSafe_Func_Output_BelowThreshold1)
	{
	float_IfResult4 = Constant146;
	}
	else
	{
	float_IfResult4 = DirectionAndLengthSafe_Func_Output_Length1;
	}
	float Constant147 = 0.0001;
	float Constant148 = 0.0001;
	float Result110 = max(Context.MapUpdate.Constants.Emitter.ScaleSpriteSizeBySpeed.VelocityThreshold, Constant148);
	float Result111 = clamp(float_IfResult4,Constant147,Result110);
	float Result112 = Result111 / Result110;
	Context.MapUpdate.Local.ScaleSpriteSizeBySpeed.NormalizedVelocityRange = Result112;
	float SampleCurve_EmitterScaleFactorCurveOutput_Value;
	SampleCurve_EmitterScaleFactorCurve(Context.MapUpdate.Local.ScaleSpriteSizeBySpeed.NormalizedVelocityRange, SampleCurve_EmitterScaleFactorCurveOutput_Value);
	float float_IfResult5;
	if(Context.MapUpdate.ScaleSpriteSizeBySpeed.SampleScaleFactorByCurve)
	{
	float_IfResult5 = SampleCurve_EmitterScaleFactorCurveOutput_Value;
	}
	else
	{
	float_IfResult5 = Context.MapUpdate.Local.ScaleSpriteSizeBySpeed.NormalizedVelocityRange;
	}
	float Constant149 = 0;
	float Constant150 = 1;
	float Result113 = clamp(float_IfResult5,Constant149,Constant150);
	float2 Result114 = lerp(Context.MapUpdate.Constants.Emitter.ScaleSpriteSizeBySpeed.MinScaleFactor,Context.MapUpdate.Constants.Emitter.ScaleSpriteSizeBySpeed.MaxScaleFactor,Result113);
	float2 Result115 = Result114 * Context.MapUpdate.Transient.SpriteSizeScaleFactor;
	float2 Result116 = Result115 * Context.MapUpdate.ScaleSpriteSizeBySpeed.InitialSpriteSize;
	Context.MapUpdate.Transient.SpriteSizeScaleFactor = Result115;
	Context.MapUpdate.Particles.SpriteSize = Result116;
}

float GetSpawnInterpolation()
{
	return HackSpawnInterp;
}


void InterpolateParameters(inout FSimulationContext Context)
{
	int InterpSpawn_Index = ExecIndex();
	float InterpSpawn_SpawnTime = Emitter_InterpSpawnStartDt + (Emitter_SpawnInterval * InterpSpawn_Index);
	float InterpSpawn_UpdateTime = Engine_DeltaTime - InterpSpawn_SpawnTime;
	float InterpSpawn_InvSpawnTime = 1.0 / InterpSpawn_SpawnTime;
	float InterpSpawn_InvUpdateTime = 1.0 / InterpSpawn_UpdateTime;
	float SpawnInterp = InterpSpawn_SpawnTime * Engine_InverseDeltaTime ;
	HackSpawnInterp = SpawnInterp;
	Context.MapSpawn.Interpolation.InterpSpawn_Index = InterpSpawn_Index;
	Context.MapSpawn.Interpolation.InterpSpawn_SpawnTime = InterpSpawn_SpawnTime;
	Context.MapSpawn.Interpolation.InterpSpawn_UpdateTime = InterpSpawn_UpdateTime;
	Context.MapSpawn.Interpolation.InterpSpawn_InvSpawnTime = InterpSpawn_InvSpawnTime;
	Context.MapSpawn.Interpolation.InterpSpawn_InvUpdateTime = InterpSpawn_InvUpdateTime;
	Context.MapSpawn.Interpolation.SpawnInterp = SpawnInterp;
	Context.MapSpawn.Interpolation.Emitter_SpawnInterval = Emitter_SpawnInterval;
	Context.MapSpawn.Interpolation.Emitter_InterpSpawnStartDt = Emitter_InterpSpawnStartDt;
	Context.MapSpawn.Interpolation.Emitter_SpawnGroup = Emitter_SpawnGroup;
	Context.MapSpawn.Engine.Time = lerp(PREV_Engine_Time, Engine_Time, SpawnInterp);
	Context.MapSpawn.Engine.RealTime = lerp(PREV_Engine_RealTime, Engine_RealTime, SpawnInterp);
	Context.MapSpawn.Engine.Owner.TimeSinceRendered = lerp(PREV_Engine_Owner_TimeSinceRendered, Engine_Owner_TimeSinceRendered, SpawnInterp);
	Context.MapSpawn.Engine.Owner.LODDistance = lerp(PREV_Engine_Owner_LODDistance, Engine_Owner_LODDistance, SpawnInterp);
	Context.MapSpawn.Engine.Owner.LODDistanceFraction = lerp(PREV_Engine_Owner_LODDistanceFraction, Engine_Owner_LODDistanceFraction, SpawnInterp);
	Context.MapSpawn.Engine.System.Age = lerp(PREV_Engine_System_Age, Engine_System_Age, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Rotation = lerp(PREV_Engine_Owner_Rotation, Engine_Owner_Rotation, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Position = lerp(PREV_Engine_Owner_Position.xyz, Engine_Owner_Position.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Velocity = lerp(PREV_Engine_Owner_Velocity.xyz, Engine_Owner_Velocity.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemXAxis = lerp(PREV_Engine_Owner_SystemXAxis.xyz, Engine_Owner_SystemXAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemYAxis = lerp(PREV_Engine_Owner_SystemYAxis.xyz, Engine_Owner_SystemYAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.SystemZAxis = lerp(PREV_Engine_Owner_SystemZAxis.xyz, Engine_Owner_SystemZAxis.xyz, SpawnInterp);
	Context.MapSpawn.Engine.Owner.Scale = lerp(PREV_Engine_Owner_Scale.xyz, Engine_Owner_Scale.xyz, SpawnInterp);
	Context.MapSpawn.Emitter.Age = lerp(PREV_Emitter_Age, Emitter_Age, SpawnInterp);
	Context.MapSpawn.Engine.DeltaTime = 0.0f;
	Context.MapSpawn.Engine.InverseDeltaTime = 0.0f;
	Context.MapUpdate.Engine.DeltaTime = InterpSpawn_UpdateTime;
	Context.MapUpdate.Engine.InverseDeltaTime = InterpSpawn_InvUpdateTime;
}

void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void SimulateMapSpawn(inout FSimulationContext Context)
{


	float Constant = 1;
	Context.MapSpawn.Particles.Lifetime = Constant;
	float4 Constant1 = float4(1,1,1,1);
	Context.MapSpawn.Particles.Color = Constant1;
	float Constant2 = 1;
	Context.MapSpawn.Particles.Mass = Constant2;
	float2 Constant3 = float2(10,10);
	Context.MapSpawn.Particles.SpriteSize = Constant3;
	float Constant4 = 0;
	Context.MapSpawn.Particles.SpriteRotation = Constant4;
	float3 Constant5 = float3(1,1,1);
	Context.MapSpawn.Particles.Scale = Constant5;
	float Constant6 = 0;
	Context.MapSpawn.Particles.MaterialRandom = Constant6;
	float3 Constant7 = float3(0,0,0);
	Context.MapSpawn.Particles.Velocity = Constant7;
	float Constant8 = 0;
	Context.MapSpawn.Particles.Age = Constant8;
	float Constant9 = (0.0);
	Context.MapSpawn.Particles.NormalizedAge = Constant9;

	bool Constant10 = false;
	Context.MapSpawn.UniformRangedFloat002.OverrideRandomness = Constant10;
	int Constant11 = 0;
	Context.MapSpawn.UniformRangedFloat002.RandomnessMode = Constant11;
	bool Constant12 = false;
	Context.MapSpawn.UniformRangedFloat002.OverrideSeed = Constant12;
	bool Constant13 = false;
	Context.MapSpawn.UniformRangedFloat002.FixedRandomSeed = Constant13;
	float UniformRangedFloat002_Emitter_Func_Output_UniformRangedFloat;
	UniformRangedFloat002_Emitter_Func_(UniformRangedFloat002_Emitter_Func_Output_UniformRangedFloat, Context);
	Context.MapSpawn.Vector2DFromFloat.Value = UniformRangedFloat002_Emitter_Func_Output_UniformRangedFloat;
	bool Constant28 = true;
	bool Constant29 = false;
	bool Constant30 = true;
	bool Constant31 = false;
	Context.MapSpawn.UniformRangedFloat001.OverrideRandomness = Constant31;
	int Constant32 = 0;
	Context.MapSpawn.UniformRangedFloat001.RandomnessMode = Constant32;
	bool Constant33 = false;
	Context.MapSpawn.UniformRangedFloat001.OverrideSeed = Constant33;
	bool Constant34 = false;
	Context.MapSpawn.UniformRangedFloat001.FixedRandomSeed = Constant34;
	float UniformRangedFloat001_Emitter_Func_Output_UniformRangedFloat;
	UniformRangedFloat001_Emitter_Func_(UniformRangedFloat001_Emitter_Func_Output_UniformRangedFloat, Context);
	float2 Vector2DFromFloat_Emitter_Func_Output_Vec2;
	Vector2DFromFloat_Emitter_Func_(Vector2DFromFloat_Emitter_Func_Output_Vec2, Context);
	Context.MapSpawn.InitializeParticle.WriteMass = Constant28;
	Context.MapSpawn.InitializeParticle.WriteColor = Constant29;
	Context.MapSpawn.InitializeParticle.WriteSpriteSize = Constant30;
	Context.MapSpawn.InitializeParticle.Lifetime = UniformRangedFloat001_Emitter_Func_Output_UniformRangedFloat;
	Context.MapSpawn.InitializeParticle.SpriteSize = Vector2DFromFloat_Emitter_Func_Output_Vec2;
	bool Constant37 = true;
	Context.MapSpawn.InitializeParticle.WriteLifetime = Constant37;
	bool Constant38 = false;
	Context.MapSpawn.InitializeParticle.WriteSpriteRotation = Constant38;
	bool Constant39 = false;
	Context.MapSpawn.InitializeParticle.WriteScale = Constant39;
	bool Constant40 = false;
	Context.MapSpawn.InitializeParticle.WritePosition = Constant40;
	bool Constant41 = false;
	float3 InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition;
	InitializeParticle_SimulationPosition_Emitter_Func_(InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition, Context);
	Context.MapSpawn.InitializeParticle.Position = InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition;
	Context.MapSpawn.Particles.Position = InitializeParticle_SimulationPosition_Emitter_Func_Output_OutPosition;
	bool Constant44 = true;
	Context.MapSpawn.InitializeParticle.WriteMaterialRandom = Constant44;
	float Constant45 = 0;
	float Constant46 = 1;
	int Constant47 = -1;
	int Constant48 = 0;
	bool Constant49 = false;
	float RandomRangeFloat_Func_Output_Result2;
	RandomRangeFloat_Func_(Constant45, Constant46, Constant47, Constant48, Constant49, RandomRangeFloat_Func_Output_Result2, Context);
	Context.MapSpawn.InitializeParticle.MaterialRandom = RandomRangeFloat_Func_Output_Result2;
	EnterStatScope(1 );
	InitializeParticle_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant55 = false;
	Context.MapSpawn.UniformRangedFloat.OverrideRandomness = Constant55;
	int Constant56 = 0;
	Context.MapSpawn.UniformRangedFloat.RandomnessMode = Constant56;
	bool Constant57 = false;
	Context.MapSpawn.UniformRangedFloat.OverrideSeed = Constant57;
	bool Constant58 = false;
	Context.MapSpawn.UniformRangedFloat.FixedRandomSeed = Constant58;
	float UniformRangedFloat_Emitter_Func_Output_UniformRangedFloat;
	UniformRangedFloat_Emitter_Func_(UniformRangedFloat_Emitter_Func_Output_UniformRangedFloat, Context);
	Context.MapSpawn.AddVelocityInCone.VelocityStrength = UniformRangedFloat_Emitter_Func_Output_UniformRangedFloat;
	float3 Constant61 = float3(0.0, 0.0, 0.0);
	Context.MapSpawn.Local.AddVelocityInCone.ConeVector = Constant61;
	float Constant62 = (0.0);
	Context.MapSpawn.Local.AddVelocityInCone.DotBetweenConeVectorAndAxis = Constant62;
	int Constant63 = 2;
	Context.MapSpawn.AddVelocityInCone.ConeAxisCoordinateSpace = Constant63;
	bool Constant64 = false;
	Context.MapSpawn.AddVelocityInCone.UseVelocityFalloffOnConeAxis = Constant64;
	EnterStatScope(2 );
	AddVelocityInCone_Emitter_Func_(Context);
	ExitStatScope( );




	Context.MapSpawn.Particles.PreviousVelocity = Context.MapSpawn.Particles.Velocity;
	Context.MapSpawn.Particles.Initial.Color = Context.MapSpawn.Particles.Color;

	Context.MapSpawn.Particles.Initial.SpriteSize = Context.MapSpawn.Particles.SpriteSize;




}
void SimulateMapUpdate(inout FSimulationContext Context)
{

	bool Constant111 = false;
	Context.MapUpdate.UniformRangedVector.OverrideRandomness = Constant111;
	int Constant112 = 0;
	Context.MapUpdate.UniformRangedVector.RandomnessMode = Constant112;
	bool Constant113 = false;
	Context.MapUpdate.UniformRangedVector.OverrideSeed = Constant113;
	bool Constant114 = false;
	Context.MapUpdate.UniformRangedVector.FixedRandomSeed = Constant114;
	float3 UniformRangedVector_Emitter_Func_Output_UniformRangedVector;
	UniformRangedVector_Emitter_Func_(UniformRangedVector_Emitter_Func_Output_UniformRangedVector, Context);
	Context.MapUpdate.GravityForce.Gravity = UniformRangedVector_Emitter_Func_Output_UniformRangedVector;
	float3 Constant121 = float3(0,0,0);
	Context.MapUpdate.Transient.PhysicsForce = Constant121;
	EnterStatScope(3 );
	GravityForce_Emitter_Func_(Context);
	ExitStatScope( );
	bool Constant122 = true;
	Context.MapUpdate.DataInstance.Alive = Constant122;
	Context.MapUpdate.ParticleState.DeltaTime = Context.MapUpdate.Engine.DeltaTime;
	Context.MapUpdate.ParticleState.Lifetime = Context.MapUpdate.Particles.Lifetime;
	EnterStatScope(4 );
	ParticleState_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.FloatFromCurve001.CurveIndex = Context.MapUpdate.Particles.NormalizedAge;
	float FloatFromCurve001_Emitter_Func_Output_Value;
	FloatFromCurve001_Emitter_Func_(FloatFromCurve001_Emitter_Func_Output_Value, Context);
	Context.MapUpdate.ScaleColor.ScaleAlpha = FloatFromCurve001_Emitter_Func_Output_Value;
	Context.MapUpdate.ScaleColor.ColorValueToScale = Context.MapUpdate.Particles.Initial.Color;
	float4 Constant126 = float4(1,1,1,1);
	Context.MapUpdate.Transient.ParticleColorScaleFactor = Constant126;
	EnterStatScope(5 );
	ScaleColor_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.Transient.PhysicsDeltaTime = Context.MapUpdate.Engine.DeltaTime;
	Context.MapUpdate.SolveForcesAndVelocity.DeltaTime = Context.MapUpdate.Transient.PhysicsDeltaTime;
	float Constant127 = (0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.DeltaTime = Constant127;
	Context.MapUpdate.SolveForcesAndVelocity.Force = Context.MapUpdate.Transient.PhysicsForce;
	Context.MapUpdate.SolveForcesAndVelocity.Velocity = Context.MapUpdate.Particles.Velocity;
	Context.MapUpdate.SolveForcesAndVelocity.Mass = Context.MapUpdate.Particles.Mass;
	float3 Constant128 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.PhysicsForce = Constant128;
	float3 Constant129 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Velocity = Constant129;
	float Constant130 = (0.0);
	Context.MapUpdate.Local.SolveForcesAndVelocity.Mass = Constant130;
	float Constant131 = 0;
	Context.MapUpdate.Transient.PhysicsDrag = Constant131;
	Context.MapUpdate.SolveForcesAndVelocity.PreviousVelocity = Context.MapUpdate.Particles.PreviousVelocity;
	bool Constant132 = false;
	Context.MapUpdate.SolveForcesAndVelocity.Position = Context.MapUpdate.Particles.Position;
	float3 Constant133 = float3(0.0, 0.0, 0.0);
	Context.MapUpdate.OUTPUT_VAR.SolveForcesAndVelocity.Position = Constant133;
	bool Constant134 = true;
	Context.MapUpdate.SolveForcesAndVelocity.WritetoIntrinsicProperties = Constant134;
	EnterStatScope(6 );
	SolveForcesAndVelocity_Emitter_Func_(Context);
	ExitStatScope( );
	Context.MapUpdate.ScaleSpriteSizeBySpeed.SourceVelocity = Context.MapUpdate.Particles.Velocity;
	float Constant140 = (0.0);
	Context.MapUpdate.Local.ScaleSpriteSizeBySpeed.NormalizedVelocityRange = Constant140;
	float2 Constant141 = float2(1,1);
	Context.MapUpdate.Transient.SpriteSizeScaleFactor = Constant141;
	Context.MapUpdate.ScaleSpriteSizeBySpeed.InitialSpriteSize = Context.MapUpdate.Particles.Initial.SpriteSize;
	bool Constant142 = false;
	Context.MapUpdate.ScaleSpriteSizeBySpeed.SampleScaleFactorByCurve = Constant142;
	EnterStatScope(7 );
	ScaleSpriteSizeBySpeed_Emitter_Func_(Context);
	ExitStatScope( );



}
void SimulateMain()
{
EnterStatScope(8 );

	FSimulationContext Context = (FSimulationContext)0;
	Context.MapSpawn.Particles.Age = 0.0f;
	Context.MapSpawn.Particles.Color.r = 0.0f;
	Context.MapSpawn.Particles.Color.g = 0.0f;
	Context.MapSpawn.Particles.Color.b = 0.0f;
	Context.MapSpawn.Particles.Color.a = 0.0f;
	Context.MapSpawn.Particles.Initial.Color.r = 0.0f;
	Context.MapSpawn.Particles.Initial.Color.g = 0.0f;
	Context.MapSpawn.Particles.Initial.Color.b = 0.0f;
	Context.MapSpawn.Particles.Initial.Color.a = 0.0f;
	Context.MapSpawn.Particles.Initial.SpriteSize.x = 0.0f;
	Context.MapSpawn.Particles.Initial.SpriteSize.y = 0.0f;
	Context.MapSpawn.Particles.Lifetime = 0.0f;
	Context.MapSpawn.Particles.Mass = 0.0f;
	Context.MapSpawn.Particles.MaterialRandom = 0.0f;
	Context.MapSpawn.Particles.NormalizedAge = 0.0f;
	Context.MapSpawn.Particles.Position.x = 0.0f;
	Context.MapSpawn.Particles.Position.y = 0.0f;
	Context.MapSpawn.Particles.Position.z = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.x = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.y = 0.0f;
	Context.MapSpawn.Particles.PreviousVelocity.z = 0.0f;
	Context.MapSpawn.Particles.Scale.x = 0.0f;
	Context.MapSpawn.Particles.Scale.y = 0.0f;
	Context.MapSpawn.Particles.Scale.z = 0.0f;
	Context.MapSpawn.Particles.SpriteRotation = 0.0f;
	Context.MapSpawn.Particles.SpriteSize.x = 0.0f;
	Context.MapSpawn.Particles.SpriteSize.y = 0.0f;
	Context.MapSpawn.Particles.UniqueID = 0;
	Context.MapSpawn.Particles.Velocity.x = 0.0f;
	Context.MapSpawn.Particles.Velocity.y = 0.0f;
	Context.MapSpawn.Particles.Velocity.z = 0.0f;
	Context.MapSpawn.Particles.UniqueID = Engine_Emitter_TotalSpawnedParticles + ExecIndex();
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat002.Minimum = Constants_Emitter_UniformRangedFloat002_Minimum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat002.Maximum = Constants_Emitter_UniformRangedFloat002_Maximum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat002.RandomSeed = Constants_Emitter_UniformRangedFloat002_RandomSeed;
	Context.MapSpawn.Emitter.RandomSeed = Emitter_RandomSeed;
	Context.MapSpawn.Engine.System.TickCount = Engine_System_TickCount;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat001.Minimum = Constants_Emitter_UniformRangedFloat001_Minimum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat001.Maximum = Constants_Emitter_UniformRangedFloat001_Maximum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat001.RandomSeed = Constants_Emitter_UniformRangedFloat001_RandomSeed;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.Color = Constants_Emitter_InitializeParticle_Color;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.Mass = Constants_Emitter_InitializeParticle_Mass;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.SpriteRotation = Constants_Emitter_InitializeParticle_SpriteRotation;
	Context.MapSpawn.Constants.Emitter.InitializeParticle.MeshScale = Constants_Emitter_InitializeParticle_MeshScale;
	Context.MapSpawn.Engine.Owner.Position = Engine_Owner_Position.xyz;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat.Minimum = Constants_Emitter_UniformRangedFloat_Minimum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat.Maximum = Constants_Emitter_UniformRangedFloat_Maximum;
	Context.MapSpawn.Constants.Emitter.UniformRangedFloat.RandomSeed = Constants_Emitter_UniformRangedFloat_RandomSeed;
	Context.MapSpawn.Constants.Emitter.AddVelocityInCone.ConeAngle = Constants_Emitter_AddVelocityInCone_ConeAngle;
	Context.MapSpawn.Constants.Emitter.AddVelocityInCone.VelocityDistributionAlongConeAxis = Constants_Emitter_AddVelocityInCone_VelocityDistributionAlongConeAxis;
	Context.MapSpawn.Constants.Emitter.AddVelocityInCone.ConeAxis = Constants_Emitter_AddVelocityInCone_ConeAxis;
	Context.MapSpawn.Engine.Owner.SystemLocalToWorld = Engine_Owner_SystemLocalToWorld;
	Context.MapSpawn.Engine.Owner.SystemWorldToLocal = Engine_Owner_SystemWorldToLocal;
	Context.MapSpawn.Engine.Owner.SystemLocalToWorldNoScale = Engine_Owner_SystemLocalToWorldNoScale;
	Context.MapSpawn.Engine.Owner.SystemWorldToLocalNoScale = Engine_Owner_SystemWorldToLocalNoScale;
	Context.MapSpawn.Constants.Emitter.AddVelocityInCone.VelocityFalloffAwayFromConeAxis = Constants_Emitter_AddVelocityInCone_VelocityFalloffAwayFromConeAxis;
	Context.MapUpdate.Constants.Emitter.UniformRangedVector.Minimum = Constants_Emitter_UniformRangedVector_Minimum;
	Context.MapUpdate.Constants.Emitter.UniformRangedVector.Maximum = Constants_Emitter_UniformRangedVector_Maximum;
	Context.MapUpdate.Constants.Emitter.UniformRangedVector.RandomSeed = Constants_Emitter_UniformRangedVector_RandomSeed;
	Context.MapUpdate.Engine.DeltaTime = Engine_DeltaTime;
	Context.MapUpdate.Constants.Emitter.FloatFromCurve001.ScaleCurve = Constants_Emitter_FloatFromCurve001_ScaleCurve;
	Context.MapUpdate.Constants.Emitter.ScaleColor.ScaleRGB = Constants_Emitter_ScaleColor_ScaleRGB;
	Context.MapUpdate.Constants.Emitter.SolveForcesAndVelocity.SpeedLimit = Constants_Emitter_SolveForcesAndVelocity_SpeedLimit;
	Context.MapUpdate.Constants.Emitter.SolveForcesAndVelocity.AccelerationLimit = Constants_Emitter_SolveForcesAndVelocity_AccelerationLimit;
	Context.MapUpdate.Engine.Owner.Position = Engine_Owner_Position.xyz;
	Context.MapUpdate.Constants.Emitter.ScaleSpriteSizeBySpeed.VelocityThreshold = Constants_Emitter_ScaleSpriteSizeBySpeed_VelocityThreshold;
	Context.MapUpdate.Constants.Emitter.ScaleSpriteSizeBySpeed.MinScaleFactor = Constants_Emitter_ScaleSpriteSizeBySpeed_MinScaleFactor;
	Context.MapUpdate.Constants.Emitter.ScaleSpriteSizeBySpeed.MaxScaleFactor = Constants_Emitter_ScaleSpriteSizeBySpeed_MaxScaleFactor;
	Context.MapUpdate.Engine.Time = Engine_Time;
	Context.MapUpdate.Engine.InverseDeltaTime = Engine_InverseDeltaTime;
	Context.MapUpdate.Engine.ExecutionCount = Engine_ExecutionCount;
	Context.MapUpdate.Emitter.SpawnRate = Emitter_SpawnRate;
	Context.MapUpdate.Emitter.SpawnInterval = Emitter_SpawnInterval;
	Context.MapUpdate.Emitter.InterpSpawnStartDt = Emitter_InterpSpawnStartDt;
	Context.MapUpdate.Emitter.SpawnGroup = Emitter_SpawnGroup;
	Context.MapUpdate.Engine.Emitter.TotalSpawnedParticles = Engine_Emitter_TotalSpawnedParticles;
	Context.MapUpdate.Emitter.RandomSeed = Emitter_RandomSeed;
	ReadDataSets(Context);
	InterpolateParameters(Context);
	SimulateMapSpawn(Context);

	Context.MapUpdate.Particles = Context.MapSpawn.Particles;


	SimulateMapUpdate(Context);
	WriteDataSets(Context);
	{
	bool bValid = Context.MapUpdate.DataInstance.Alive;
	int TmpWriteIndex = OutputIndex(0, true, bValid);
	OutputDataFloat(0, 0, TmpWriteIndex, Context.MapUpdate.Particles.Age);
	OutputDataFloat(0, 1, TmpWriteIndex, Context.MapUpdate.Particles.Color.r);
	OutputDataFloat(0, 2, TmpWriteIndex, Context.MapUpdate.Particles.Color.g);
	OutputDataFloat(0, 3, TmpWriteIndex, Context.MapUpdate.Particles.Color.b);
	OutputDataFloat(0, 4, TmpWriteIndex, Context.MapUpdate.Particles.Color.a);
	OutputDataFloat(0, 5, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Color.r);
	OutputDataFloat(0, 6, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Color.g);
	OutputDataFloat(0, 7, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Color.b);
	OutputDataFloat(0, 8, TmpWriteIndex, Context.MapUpdate.Particles.Initial.Color.a);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.MapUpdate.Particles.Initial.SpriteSize.x);
	OutputDataFloat(0, 10, TmpWriteIndex, Context.MapUpdate.Particles.Initial.SpriteSize.y);
	OutputDataFloat(0, 11, TmpWriteIndex, Context.MapUpdate.Particles.Lifetime);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.MapUpdate.Particles.Mass);
	OutputDataFloat(0, 13, TmpWriteIndex, Context.MapUpdate.Particles.MaterialRandom);
	OutputDataFloat(0, 14, TmpWriteIndex, Context.MapUpdate.Particles.NormalizedAge);
	OutputDataFloat(0, 15, TmpWriteIndex, Context.MapUpdate.Particles.Position.x);
	OutputDataFloat(0, 16, TmpWriteIndex, Context.MapUpdate.Particles.Position.y);
	OutputDataFloat(0, 17, TmpWriteIndex, Context.MapUpdate.Particles.Position.z);
	OutputDataFloat(0, 18, TmpWriteIndex, Context.MapUpdate.Particles.PreviousVelocity.x);
	OutputDataFloat(0, 19, TmpWriteIndex, Context.MapUpdate.Particles.PreviousVelocity.y);
	OutputDataFloat(0, 20, TmpWriteIndex, Context.MapUpdate.Particles.PreviousVelocity.z);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.MapUpdate.Particles.Scale.x);
	OutputDataFloat(0, 22, TmpWriteIndex, Context.MapUpdate.Particles.Scale.y);
	OutputDataFloat(0, 23, TmpWriteIndex, Context.MapUpdate.Particles.Scale.z);
	OutputDataFloat(0, 24, TmpWriteIndex, Context.MapUpdate.Particles.SpriteRotation);
	OutputDataFloat(0, 25, TmpWriteIndex, Context.MapUpdate.Particles.SpriteSize.x);
	OutputDataFloat(0, 26, TmpWriteIndex, Context.MapUpdate.Particles.SpriteSize.y);
	OutputDataInt(0, 27, TmpWriteIndex, Context.MapUpdate.Particles.UniqueID);
	OutputDataFloat(0, 28, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.x);
	OutputDataFloat(0, 29, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.y);
	OutputDataFloat(0, 30, TmpWriteIndex, Context.MapUpdate.Particles.Velocity.z);
	}
ExitStatScope( );
}
#line 703 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

#if 0 /*BEGIN_RESOURCE_TABLES*/
NULL, 0
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
