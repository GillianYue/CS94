#line 1 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 6 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#pragma warning(disable:4008)
#line 7 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Public/Platform.ush"
#line 9 "/Engine/Public/Platform.ush"
#line 1 "FP16Math.ush"
#line 10 "/Engine/Public/Platform.ush"
#line 43 "/Engine/Public/Platform.ush"
#line 1 "ShaderVersion.ush"
#line 44 "/Engine/Public/Platform.ush"
#line 595 "/Engine/Public/Platform.ush"
float min3( float a, float b, float c )
{
	return min( a, min( b, c ) );
}

float max3( float a, float b, float c )
{
	return max( a, max( b, c ) );
}

float2 min3( float2 a, float2 b, float2 c )
{
	return float2(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y )
	);
}

float2 max3( float2 a, float2 b, float2 c )
{
	return float2(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y )
	);
}

float3 max3( float3 a, float3 b, float3 c )
{
	return float3(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z )
	);
}

float3 min3( float3 a, float3 b, float3 c )
{
	return float3(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z )
	);
}

float4 min3( float4 a, float4 b, float4 c )
{
	return float4(
		min3( a.x, b.x, c.x ),
		min3( a.y, b.y, c.y ),
		min3( a.z, b.z, c.z ),
		min3( a.w, b.w, c.w )
	);
}

float4 max3( float4 a, float4 b, float4 c )
{
	return float4(
		max3( a.x, b.x, c.x ),
		max3( a.y, b.y, c.y ),
		max3( a.z, b.z, c.z ),
		max3( a.w, b.w, c.w )
	);
}




float UnpackByte0(uint v) { return float(v & 0xff); }
float UnpackByte1(uint v) { return float((v >> 8) & 0xff); }
float UnpackByte2(uint v) { return float((v >> 16) & 0xff); }
float UnpackByte3(uint v) { return float(v >> 24); }
#line 8 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"






	const static float PI = 3.1415926535897932f;

	const static float TWO_PI = 3.1415926535897932f*2.0f;
#line 18 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Private/Definitions.usf"
#line 19 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"


float4 ModuloPrecise(float4 x, float4 y){ return x - y * trunc(x/y); }
float3 ModuloPrecise(float3 x, float3 y){ return x - y * trunc(x/y); }
float2 ModuloPrecise(float2 x, float2 y){ return x - y * trunc(x/y);}
float ModuloPrecise(float x, float y){ return x - y * trunc(x/y); }
int ModuloPrecise(int x, int y){ return x - y * (x/y); }
int Modulo(int x, int y){ return x - y * (x/y); }



float4 Reciprocal(float4 x){ return 1.0f/x;}
float3 Reciprocal(float3 x){ return 1.0f/x; }
float2 Reciprocal(float2 x){ return 1.0f/x;}
float Reciprocal(float x){ return 1.0f/x; }



bool NiagaraAll(bool b) { return b; }
bool NiagaraAny(bool b) { return b; }









bool NiagaraAll(bool2 b) { return b.x && b.y; }
bool NiagaraAll(bool3 b) { return b.x && b.y && b.z; }
bool NiagaraAll(bool4 b) { return b.x && b.y && b.z && b.w; }
bool NiagaraAny(bool2 b) { return b.x || b.y; }
bool NiagaraAny(bool3 b) { return b.x || b.y || b.z; }
bool NiagaraAny(bool4 b) { return b.x || b.y || b.z || b.w; }
#line 193 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
float4 rand4(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int4 v = int4(Seed4, Seed1, Seed2, Seed3) * 1664525 + 1013904223;

	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;
	v.x += v.y*v.w;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.w += v.y*v.z;






	return float4((v >> 8) & 0x00ffffff) / 16777216.0;

}







float3 rand3(int Seed1, int Seed2, int Seed3, int Seed4)
{
	int3 v = int3(Seed1, Seed2, Seed4 | (Seed3 << 16)) * 1664525 + 1013904223;

	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;
	v.x += v.y*v.z;
	v.y += v.z*v.x;
	v.z += v.x*v.y;

	return float3((v >> 8) & 0x00ffffff) / 16777216.0;
}


static int RandomCounterDeterministic = 0;


float rand(float x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * x;
}


float2 rand(float2 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xy * x;
}


float3 rand(float3 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyz * x;
}


float4 rand(float4 x, int Seed1, int Seed2, int Seed3)
{
	RandomCounterDeterministic += 1;
	return rand4(Seed1, Seed2, Seed3, RandomCounterDeterministic).xyzw * x;
}


int rand(int x, int Seed1, int Seed2, int Seed3)
{


	RandomCounterDeterministic += 1;
	return int(rand3(Seed1, Seed2, Seed3, RandomCounterDeterministic).x * (x+1));
}
#line 323 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float rand(float x);

	float2 rand(float2 x)
	{
		return float2(rand(x.x), rand(x.y));
	}

	float3 rand(float3 x)
	{
		return float3(rand(x.x), rand(x.y), rand(x.z));
	}

	float4 rand(float4 x)
	{
		return float4(rand(x.x), rand(x.y), rand(x.z), rand(x.w));
	}

	int rand(int x);



float rand_float(float x)
{
	return rand(x.x);
}

float2 rand_float(float2 x)
{
	return float2(rand_float(x.x), rand_float(x.y));
}

float3 rand_float(float3 x)
{
	return float3(rand_float(x.x), rand_float(x.y), rand_float(x.z));
}

float4 rand_float(float4 x)
{
	return float4(rand_float(x.x), rand_float(x.y), rand_float(x.z), rand_float(x.w));
}

int rand_int(int x)
{



	return rand_float(x.x);
}


float rand_float(float x, int Seed1, int Seed2, int Seed3)
{
	return rand(x.x, Seed1, Seed2, Seed3);
}

float2 rand_float(float2 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float3 rand_float(float3 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

float4 rand_float(float4 x, int Seed1, int Seed2, int Seed3)
{
	return rand(x, Seed1, Seed2, Seed3);
}

int rand_int(int x, int Seed1, int Seed2, int Seed3)
{


	return rand(x.x-1, Seed1, Seed2, Seed3);
}
#line 405 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	float noise(float x);
	float noise(float2 x);
	float noise(float3 x);



	float4 Modulo(float4 x, float4 y);
	float3 Modulo(float3 x, float3 y);
	float2 Modulo(float2 x, float2 y);
	float Modulo(float x, float y);


	int ExecIndex();



	int AcquireIndex(int DataSetID, bool DoAcquire);

	void AcquireID(int DataSetID, out int IDIndex, out int IDAcquireTag);
	void UpdateID(int DataSetID, int IDIndex, int InstanceIndex);

	float InputDataFloat(int DataSetIndex, int RegisterIdx);
	int InputDataInt(int DataSetIndex, int RegisterIdx);
	bool InputDataBool(int DataSetIndex, int RegisterIdx);

	float InputDataNoadvanceFloat(int DataSetIndex, int RegisterIdx);
	int InputDataNoadvanceInt(int DataSetIndex, int RegisterIdx);
	bool InputDataNoadvanceBool(int DataSetIndex, int RegisterIdx);

	void OutputDataFloat(int DataSetIndex, int RegisterIndex, int InstanceIndex, float Value);
	void OutputDataInt(int DataSetIndex, int RegisterIndex, int InstanceIndex, int Value);
	void OutputDataBool(int DataSetIndex, int RegisterIndex, int InstanceIndex, bool Value);
#line 683 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
	int OutputIndex(const int DataSetID, const bool bStageKillsParticles, const bool bIsValid)
	{
#line 698 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
			return AcquireIndex(DataSetID, bIsValid);
	}
#line 702 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"
#line 1 "/Engine/Generated/NiagaraEmitterInstance.ush"




struct NiagaraSpawnInfo
{
	int Count;
	float InterpStartDt;
	float IntervalDt;
	int SpawnGroup;
};

struct NiagaraID
{
	int Index;
	int AcquireTag;
};

cbuffer FNiagaraGlobalParameters
{
	float Engine_DeltaTime;
	float Engine_InverseDeltaTime;
	float Engine_Time;
	float Engine_RealTime;
}

cbuffer FNiagaraSystemParameters
{
}

cbuffer FNiagaraOwnerParameters
{
}

cbuffer FNiagaraEmitterParameters
{
}

cbuffer FNiagaraExternalParameters
{
	float Constants_SystemState_LoopDelay;
	float Constants_SystemState_LoopDuration;
	float Constants_NE_flare_EmitterState_LoopDuration;
	float Constants_NE_flare_EmitterState_LoopDelay;
	float Constants_NE_flare_Divide_Float_B;
	int Constants_NE_flare_SpawnRate_SpawnGroup;
	float Constants_NE_flare_SpawnRate_SpawnProbability;
	float Constants_NE_spriteBurst_EmitterState_LoopDuration;
	float Constants_NE_spriteBurst_EmitterState_LoopDelay;
	int Constants_NE_spriteBurst_SpawnRate_SpawnGroup;
	float Constants_NE_spriteBurst_SpawnRate_SpawnProbability;
	int Emitter_RandomSeed;
}

struct FParamMap0_Vector2DFromFloat
{
	float Value;
};

struct FParamMap0_User
{
	float3 SparksColor;
	float SparksSpawnRate;
	float Z_Gravity_Maximum;
	float Z_Gravity_Minimum;
};

struct FParamMap0_UniformRangedVector2D
{
	bool FixedRandomSeed;
	float2 Maximum;
	float2 Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedVector
{
	bool FixedRandomSeed;
	float3 Maximum;
	float3 Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat003
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat002
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat001
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_UniformRangedFloat
{
	bool FixedRandomSeed;
	float Maximum;
	float Minimum;
	bool OverrideRandomness;
	bool OverrideSeed;
	int RandomnessMode;
	int RandomSeed;
};

struct FParamMap0_Transient
{
	float CollisionDistanceToCollision;
	float CollisionFriction;
	bool CollisionIsResting;
	float3 CollisionNormal;
	float3 CollisionParticleRelativeCollisionLocation;
	float3 CollisionParticleWorldPosition;
	float CollisionRestitution;
	float CollisionSize;
	bool CollisionValid;
	float3 CollisionVelocity;
	float3 CollisionWorldPosition;
	float4 ParticleColorScaleFactor;
	float PhysicsDeltaTime;
	float PhysicsDrag;
	float3 PhysicsForce;
	int ScalabilityEmitterExecutionState;
	float ScalabilityEmitterSpawnCountScale;
	int ScalabilityExecutionState;
	bool SpawningbCanEverSpawn;
	float2 SpriteSizeScaleFactor;
};

struct FParamMap0_SystemState
{
	float LoopDelay;
	float LoopDuration;
	bool RecalculateDurationEachLoop;
};

struct FParamMap0_System
{
	float Age;
	bool bCompleteOnInactive;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
};

struct FParamMap0_SpawnRate
{
	int SpawnGroup;
	float SpawnProbability;
	float SpawnRate;
};

struct FParamMap0_SolveForcesAndVelocity
{
	float AccelerationLimit;
	float DeltaTime;
	float3 Force;
	float Mass;
	float3 Position;
	float3 PreviousVelocity;
	float SpeedLimit;
	float3 Velocity;
	bool WritetoIntrinsicProperties;
};

struct FParamMap0_ScaleSpriteSizeBySpeed
{
	float2 InitialSpriteSize;
	float2 MaxScaleFactor;
	float2 MinScaleFactor;
	bool SampleScaleFactorByCurve;
	float3 SourceVelocity;
	float VelocityThreshold;
};

struct FParamMap0_ScaleColor
{
	float4 ColorValueToScale;
	float ScaleAlpha;
	float3 ScaleRGB;
};

struct FParamMap0_ParticleState
{
	float DeltaTime;
	float Lifetime;
};

struct FParamMap0_Particles_Initial
{
	float4 Color;
	float2 SpriteSize;
};

struct FParamMap0_Particles_Collision_CollisionQueryAndResponse001
{
	int CollisionID;
};

struct FParamMap0_Particles_Collision_CollisionQueryAndResponse
{
	int CollisionID;
};

struct FParamMap0_Particles_Collision
{
	FParamMap0_Particles_Collision_CollisionQueryAndResponse CollisionQueryAndResponse;
	FParamMap0_Particles_Collision_CollisionQueryAndResponse001 CollisionQueryAndResponse001;
};

struct FParamMap0_Particles
{
	float Age;
	FParamMap0_Particles_Collision Collision;
	float4 Color;
	bool HasCollided;
	FParamMap0_Particles_Initial Initial;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float NormalizedAge;
	int NumberOfCollisions;
	float3 Position;
	float3 PreviousVelocity;
	float RestCounter;
	float3 Scale;
	float SpriteRotation;
	float2 SpriteSize;
	int UniqueID;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity
{
	float IncomingPhysicsDrag;
	float3 IncomingPhysicsForce;
	float3 Position;
	float3 Velocity;
};

struct FParamMap0_OUTPUT_VAR_ParticleState
{
	bool FirstFrame;
};

struct FParamMap0_OUTPUT_VAR_Collision_CollisionQueryAndResponse001
{
	float CollisionPenetrationDistance;
	bool DepthBasedCollisionParticleOccluded;
	bool ParticleOnScreen;
	bool PhysicsCollidesThisFrame;
};

struct FParamMap0_OUTPUT_VAR_Collision_CollisionQueryAndResponse
{
	float CollisionPenetrationDistance;
	bool DepthBasedCollisionParticleOccluded;
	bool ParticleOnScreen;
	bool PhysicsCollidesThisFrame;
};

struct FParamMap0_OUTPUT_VAR_Collision
{
	FParamMap0_OUTPUT_VAR_Collision_CollisionQueryAndResponse CollisionQueryAndResponse;
	FParamMap0_OUTPUT_VAR_Collision_CollisionQueryAndResponse001 CollisionQueryAndResponse001;
	bool CollisionValid;
	float3 ModuleCollision1Normal;
	bool ModuleCollision1Valid;
	float3 ModuleCollision2Normal;
	bool ModuleCollision2Valid;
	float3 ModuleCombinedCollisionNormal;
	float3 TempPreviousForce;
	float3 TempPreviousPosition;
	float3 TempPreviousVelocity;
};

struct FParamMap0_OUTPUT_VAR
{
	FParamMap0_OUTPUT_VAR_Collision Collision;
	FParamMap0_OUTPUT_VAR_ParticleState ParticleState;
	FParamMap0_OUTPUT_VAR_SolveForcesAndVelocity SolveForcesAndVelocity;
};

struct FParamMap0_NE_spriteBurst_SpawnRate
{
	NiagaraSpawnInfo SpawnOutputInfo;
	float SpawnRemainder;
};

struct FParamMap0_NE_spriteBurst_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_NE_spriteBurst
{
	float Age;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	bool LocalSpace;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	FParamMap0_NE_spriteBurst_Scalability Scalability;
	FParamMap0_NE_spriteBurst_SpawnRate SpawnRate;
};

struct FParamMap0_NE_flare_SpawnRate
{
	NiagaraSpawnInfo SpawnOutputInfo;
	float SpawnRemainder;
};

struct FParamMap0_NE_flare_Scalability
{
	float DistanceFraction;
};

struct FParamMap0_NE_flare
{
	float Age;
	float CurrentLoopDuration;
	int ExecutionState;
	int ExecutionStateSource;
	bool LocalSpace;
	int LoopCount;
	float LoopedAge;
	float NormalizedLoopAge;
	FParamMap0_NE_flare_Scalability Scalability;
	FParamMap0_NE_flare_SpawnRate SpawnRate;
};

struct FParamMap0_Local_SystemState
{
	bool LoopCountIncreased;
};

struct FParamMap0_Local_SpawnRate
{
	float InterpStartDT;
	float IntervalDT;
	int SpawnCount;
	float SpawnRate;
};

struct FParamMap0_Local_SolveForcesAndVelocity
{
	float DeltaTime;
	float Mass;
	float3 PhysicsForce;
};

struct FParamMap0_Local_ScaleSpriteSizeBySpeed
{
	float NormalizedVelocityRange;
};

struct FParamMap0_Local_EmitterState
{
	bool LoopCountIncreased;
	float LoopDuration;
	bool NoActiveEmitterParticles;
	int PreviousEmitterState;
};

struct FParamMap0_Local_Collision_CollisionQueryAndResponse001
{
	float3 ModuleAttemptedMovementThisUpdate;
	float3 ModuleForceContribution;
	float3 ModuleFrictionForceVectorInNewtons;
	float3 ModuleFrictionForceVelocityVector;
	bool ModuleInitialDataInstanceAlive;
	float3 ModuleInitialForceDividedByMass;
	float ModuleNormalForceInNewtons;
	float ModulePercentageOfTickDedicatedToUpdatingPosition;
	float ModulePhysicsDeltaTime;
	float3 ModulePlaneNormal;
	float3 ModulePlanePivotPoint;
	float3 ModuleReflectedVelocity;
	float3 ModuleReflectedVelocityWithFrictionApplied;
	bool ModuleRemoveRestitution;
	float3 ModuleReturnedCollisionNormal;
	bool ModuleReturnedCollisionValidBool;
	float3 ModuleReturnedCollisionWorldPosition;
	float ModuleReturnedFriction;
	float ModuleReturnedRestitution;
	float ModuleTickDeltaForThisCollisionUpdate;
	float3 ModuleTraceDirection;
	float3 ModuleTraceOrigin;
	float3 ModuleTraceVector;
	float3 ModuleTraceWorldEnd;
	float3 ModuleTraceWorldStart;
};

struct FParamMap0_Local_Collision_CollisionQueryAndResponse
{
	float3 ModuleAttemptedMovementThisUpdate;
	float3 ModuleForceContribution;
	float3 ModuleFrictionForceVectorInNewtons;
	float3 ModuleFrictionForceVelocityVector;
	bool ModuleInitialDataInstanceAlive;
	float3 ModuleInitialForceDividedByMass;
	float ModuleNormalForceInNewtons;
	float ModulePercentageOfTickDedicatedToUpdatingPosition;
	float ModulePhysicsDeltaTime;
	float3 ModulePlaneNormal;
	float3 ModulePlanePivotPoint;
	float3 ModuleReflectedVelocity;
	float3 ModuleReflectedVelocityWithFrictionApplied;
	bool ModuleRemoveRestitution;
	float3 ModuleReturnedCollisionNormal;
	bool ModuleReturnedCollisionValidBool;
	float3 ModuleReturnedCollisionWorldPosition;
	float ModuleReturnedFriction;
	float ModuleReturnedRestitution;
	float ModuleTickDeltaForThisCollisionUpdate;
	float3 ModuleTraceDirection;
	float3 ModuleTraceOrigin;
	float3 ModuleTraceVector;
	float3 ModuleTraceWorldEnd;
	float3 ModuleTraceWorldStart;
};

struct FParamMap0_Local_Collision
{
	FParamMap0_Local_Collision_CollisionQueryAndResponse CollisionQueryAndResponse;
	FParamMap0_Local_Collision_CollisionQueryAndResponse001 CollisionQueryAndResponse001;
	float ModuleParticleRadius;
	bool UpdateMeshRotation;
};

struct FParamMap0_Local_AddVelocityInCone
{
	float3 ConeVector;
	float DotBetweenConeVectorAndAxis;
};

struct FParamMap0_Local
{
	FParamMap0_Local_AddVelocityInCone AddVelocityInCone;
	FParamMap0_Local_Collision Collision;
	FParamMap0_Local_EmitterState EmitterState;
	FParamMap0_Local_ScaleSpriteSizeBySpeed ScaleSpriteSizeBySpeed;
	FParamMap0_Local_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_Local_SpawnRate SpawnRate;
	FParamMap0_Local_SystemState SystemState;
};

struct FParamMap0_InitializeParticle
{
	float4 Color;
	float Lifetime;
	float Mass;
	float MaterialRandom;
	float3 MeshScale;
	float3 Position;
	float SpriteRotation;
	float2 SpriteSize;
	bool WriteColor;
	bool WriteLifetime;
	bool WriteMass;
	bool WriteMaterialRandom;
	bool WritePosition;
	bool WriteScale;
	bool WriteSpriteRotation;
	bool WriteSpriteSize;
};

struct FParamMap0_GravityForce
{
	float3 Gravity;
};

struct FParamMap0_FloatFromCurve001
{
	float CurveIndex;
	float ScaleCurve;
};

struct FParamMap0_Engine_Owner
{
	int ExecutionState;
	float LODDistanceFraction;
	float3 Position;
	float4x4 SystemLocalToWorld;
	float4x4 SystemLocalToWorldNoScale;
	float4x4 SystemWorldToLocal;
	float4x4 SystemWorldToLocalNoScale;
};

struct FParamMap0_Engine_NE_spriteBurst
{
	int NumParticles;
	float SpawnCountScale;
};

struct FParamMap0_Engine_NE_flare
{
	int NumParticles;
	float SpawnCountScale;
};

struct FParamMap0_Engine_Emitter
{
	int TotalSpawnedParticles;
};

struct FParamMap0_Engine
{
	float DeltaTime;
	FParamMap0_Engine_Emitter Emitter;
	float InverseDeltaTime;
	FParamMap0_Engine_NE_flare NE_flare;
	FParamMap0_Engine_NE_spriteBurst NE_spriteBurst;
	FParamMap0_Engine_Owner Owner;
	float RealTime;
	float Time;
};

struct FParamMap0_EmitterState
{
	float LoopDelay;
	float LoopDuration;
	bool RecalculateDurationEachLoop;
};

struct FParamMap0_Emitter
{
	int RandomSeed;
};

struct FParamMap0_Divide_Float
{
	float A;
	float B;
};

struct FParamMap0_DataInstance
{
	bool Alive;
};

struct FParamMap0_Constants_SystemState
{
	float LoopDelay;
	float LoopDuration;
};

struct FParamMap0_Constants_NE_spriteBurst_SpawnRate
{
	int SpawnGroup;
	float SpawnProbability;
};

struct FParamMap0_Constants_NE_spriteBurst_EmitterState
{
	float LoopDelay;
	float LoopDuration;
};

struct FParamMap0_Constants_NE_spriteBurst
{
	FParamMap0_Constants_NE_spriteBurst_EmitterState EmitterState;
	FParamMap0_Constants_NE_spriteBurst_SpawnRate SpawnRate;
};

struct FParamMap0_Constants_NE_flare_SpawnRate
{
	int SpawnGroup;
	float SpawnProbability;
};

struct FParamMap0_Constants_NE_flare_EmitterState
{
	float LoopDelay;
	float LoopDuration;
};

struct FParamMap0_Constants_NE_flare_Divide_Float
{
	float B;
};

struct FParamMap0_Constants_NE_flare
{
	FParamMap0_Constants_NE_flare_Divide_Float Divide_Float;
	FParamMap0_Constants_NE_flare_EmitterState EmitterState;
	FParamMap0_Constants_NE_flare_SpawnRate SpawnRate;
};

struct FParamMap0_Constants
{
	FParamMap0_Constants_NE_flare NE_flare;
	FParamMap0_Constants_NE_spriteBurst NE_spriteBurst;
	FParamMap0_Constants_SystemState SystemState;
};

struct FParamMap0_Collision_CollisionQueryAndResponse001
{
	float BounceCollisionFriction;
	bool CollisionEnabled;
	float CollisionNormalRandomizationPercentage;
	int CPUFrictionMergeType;
	float DeltaTime;
	float DynamicFrictionCoefficient;
	float MaxIntersectionCorrectionDistance;
	float MaxTraceLength;
	float ParticleRadius;
	float ParticleRestitutionCoeffiecient;
	bool RandomizeCollisionNormal;
	float StaticFrictionCoefficient;
	float StaticFrictionEngagementSpeed;
	float TraceVectorLengthMultiplier;
	bool UpdateRotationalVelocity;
};

struct FParamMap0_Collision_CollisionQueryAndResponse
{
	float BounceCollisionFriction;
	bool CollisionEnabled;
	float CollisionNormalRandomizationPercentage;
	int CPUFrictionMergeType;
	float DeltaTime;
	float DynamicFrictionCoefficient;
	float MaxIntersectionCorrectionDistance;
	float MaxTraceLength;
	float ParticleRadius;
	float ParticleRestitutionCoeffiecient;
	bool RandomizeCollisionNormal;
	float StaticFrictionCoefficient;
	float StaticFrictionEngagementSpeed;
	float TraceVectorLengthMultiplier;
	bool UpdateRotationalVelocity;
};

struct FParamMap0_Collision
{
	float AdvancedAgingRate;
	bool CollisionEnabled;
	FParamMap0_Collision_CollisionQueryAndResponse CollisionQueryAndResponse;
	FParamMap0_Collision_CollisionQueryAndResponse001 CollisionQueryAndResponse001;
	bool ControlRestStateViaSurfaceNormal;
	bool CorrectInterpenetration;
	float CPUTraceVectorLengthMultiplier;
	bool EnableRestState;
	float Friction;
	float FrictionDuringaBounce;
	float MaxCPUTraceLength;
	float MaximumPenetrationCorrectionDistance;
	float MinimumCollisionNormalASC47RestNormalAlignmentPercentage;
	float ParticleRadiusScale;
	float PercentageofPenetrationBeforeRest;
	float RandomizeCollisionNormal;
	bool RandomizeCollisionNormalVector;
	float Restitution;
	float RestStateTimeRange;
	float StaticFriction;
	float StaticFrictionEngagementSpeed;
	float3 ValidCollisionPlaneNormalForRest;
};

struct FParamMap0_BreakVector001
{
	float X;
	float Y;
	float Z;
};

struct FParamMap0_BreakVector
{
	float X;
	float Y;
	float Z;
};

struct FParamMap0_AddVelocityInCone
{
	float ConeAngle;
	float3 ConeAxis;
	int ConeAxisCoordinateSpace;
	bool UseVelocityFalloffOnConeAxis;
	float VelocityDistributionAlongConeAxis;
	float VelocityFalloffAwayFromConeAxis;
	float VelocityStrength;
};

struct FParamMap0
{
	FParamMap0_AddVelocityInCone AddVelocityInCone;
	FParamMap0_BreakVector BreakVector;
	FParamMap0_BreakVector001 BreakVector001;
	FParamMap0_Collision Collision;
	FParamMap0_Constants Constants;
	FParamMap0_DataInstance DataInstance;
	FParamMap0_Divide_Float Divide_Float;
	FParamMap0_Emitter Emitter;
	FParamMap0_EmitterState EmitterState;
	FParamMap0_Engine Engine;
	FParamMap0_FloatFromCurve001 FloatFromCurve001;
	FParamMap0_GravityForce GravityForce;
	FParamMap0_InitializeParticle InitializeParticle;
	FParamMap0_Local Local;
	FParamMap0_NE_flare NE_flare;
	FParamMap0_NE_spriteBurst NE_spriteBurst;
	FParamMap0_OUTPUT_VAR OUTPUT_VAR;
	FParamMap0_Particles Particles;
	FParamMap0_ParticleState ParticleState;
	FParamMap0_ScaleColor ScaleColor;
	FParamMap0_ScaleSpriteSizeBySpeed ScaleSpriteSizeBySpeed;
	FParamMap0_SolveForcesAndVelocity SolveForcesAndVelocity;
	FParamMap0_SpawnRate SpawnRate;
	FParamMap0_System System;
	FParamMap0_SystemState SystemState;
	FParamMap0_Transient Transient;
	FParamMap0_UniformRangedFloat UniformRangedFloat;
	FParamMap0_UniformRangedFloat001 UniformRangedFloat001;
	FParamMap0_UniformRangedFloat002 UniformRangedFloat002;
	FParamMap0_UniformRangedFloat003 UniformRangedFloat003;
	FParamMap0_UniformRangedVector UniformRangedVector;
	FParamMap0_UniformRangedVector2D UniformRangedVector2D;
	FParamMap0_User User;
	FParamMap0_Vector2DFromFloat Vector2DFromFloat;
};

struct FSimulationContext
{
	FParamMap0 Map;
};

static float HackSpawnInterp = 1.0;
void SystemState_SystemChangeState002_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void SystemState_SystemChangeState_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void SystemState_SystemChangeState001_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void SystemState_Func_(inout FSimulationContext Context);
void EmitterState_EmitterChangeState002_NE_flare_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_EmitterChangeState005_NE_flare_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_EmitterChangeState003_NE_flare_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_NE_flare_Func_(inout FSimulationContext Context);
void Divide_Float_NE_flare_Func_(out float Out_Result, inout FSimulationContext Context);
void SpawnRate_NE_flare_Func_(inout FSimulationContext Context);
void NE_flare_Func_(inout FSimulationContext Context);
void EmitterState_EmitterChangeState002_NE_spriteBurst_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_EmitterChangeState005_NE_spriteBurst_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_EmitterChangeState003_NE_spriteBurst_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context);
void EmitterState_NE_spriteBurst_Func_(inout FSimulationContext Context);
void SpawnRate_NE_spriteBurst_Func_(inout FSimulationContext Context);
void NE_spriteBurst_Func_(inout FSimulationContext Context);
float GetSpawnInterpolation();
void SystemState_SystemChangeState002_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	bool Result11 = NiagaraAll(Context.Map.System.ExecutionStateSource <= In_NewStateSource);
	bool Result12 = In_Condition && Result11;
	int ENiagaraExecutionState_IfResult;
	int ENiagaraExecutionStateSource_IfResult;
	if(Result12)
	{
	ENiagaraExecutionState_IfResult = In_NewState;
	ENiagaraExecutionStateSource_IfResult = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult = Context.Map.System.ExecutionState;
	ENiagaraExecutionStateSource_IfResult = Context.Map.System.ExecutionStateSource;
	}
	Context.Map.System.ExecutionState = ENiagaraExecutionState_IfResult;
	Context.Map.System.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult;
}

void SystemState_SystemChangeState_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	bool Result13 = NiagaraAll(Context.Map.System.ExecutionStateSource <= In_NewStateSource);
	bool Result14 = In_Condition && Result13;
	int ENiagaraExecutionState_IfResult1;
	int ENiagaraExecutionStateSource_IfResult1;
	if(Result14)
	{
	ENiagaraExecutionState_IfResult1 = In_NewState;
	ENiagaraExecutionStateSource_IfResult1 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult1 = Context.Map.System.ExecutionState;
	ENiagaraExecutionStateSource_IfResult1 = Context.Map.System.ExecutionStateSource;
	}
	Context.Map.System.ExecutionState = ENiagaraExecutionState_IfResult1;
	Context.Map.System.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult1;
}

void SystemState_SystemChangeState001_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	bool Result16 = NiagaraAll(Context.Map.System.ExecutionStateSource <= In_NewStateSource);
	bool Result17 = In_Condition && Result16;
	int ENiagaraExecutionState_IfResult2;
	int ENiagaraExecutionStateSource_IfResult2;
	if(Result17)
	{
	ENiagaraExecutionState_IfResult2 = In_NewState;
	ENiagaraExecutionStateSource_IfResult2 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult2 = Context.Map.System.ExecutionState;
	ENiagaraExecutionStateSource_IfResult2 = Context.Map.System.ExecutionStateSource;
	}
	Context.Map.System.ExecutionState = ENiagaraExecutionState_IfResult2;
	Context.Map.System.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult2;
}

void SystemState_Func_(inout FSimulationContext Context)
{
	float Constant3 = 0;
	bool Result = NiagaraAll(Context.Map.System.Age == Constant3);
	float Constant4 = 0.016667;
	float Result1 = max(Context.Map.Constants.SystemState.LoopDuration, Constant4);
	float Duration_IfResult;
	if(Result)
	{
	Duration_IfResult = Result1;
	}
	else
	{
	Duration_IfResult = Context.Map.System.CurrentLoopDuration;
	}
	float Constant5 = 0;
	Context.Map.System.CurrentLoopDuration = Duration_IfResult;
	Context.Map.SystemState.LoopDelay = Constant5;
	float Result2 = Context.Map.System.Age + Context.Map.Engine.DeltaTime;
	float Result3 = Context.Map.Engine.DeltaTime + Context.Map.System.LoopedAge;
	float Result4 = Result3 / Context.Map.System.CurrentLoopDuration;
	int Count;
	Count = Result4;
	int Constant6 = 0;
	int Result5 = max(Count, Constant6);
	float Result6 = Result5 * Context.Map.System.CurrentLoopDuration;
	float Result7 = Result3 - Result6;
	int Constant7 = 0;
	bool Result8 = NiagaraAll(Result5 > Constant7);
	int Result9 = Result5 + Context.Map.System.LoopCount;
	Context.Map.System.Age = Result2;
	Context.Map.System.LoopedAge = Result7;
	Context.Map.Local.SystemState.LoopCountIncreased = Result8;
	Context.Map.System.LoopCount = Result9;
	float float_IfResult;
	if(Context.Map.SystemState.RecalculateDurationEachLoop)
	{
	float_IfResult = Context.Map.Constants.SystemState.LoopDuration;
	}
	else
	{
	float_IfResult = Context.Map.System.CurrentLoopDuration;
	}
	float CurrentLoopDuration_IfResult;
	float LoopedAge_IfResult;
	if(Context.Map.Local.SystemState.LoopCountIncreased)
	{
	CurrentLoopDuration_IfResult = float_IfResult;
	LoopedAge_IfResult = Context.Map.System.LoopedAge;
	}
	else
	{
	CurrentLoopDuration_IfResult = Context.Map.System.CurrentLoopDuration;
	LoopedAge_IfResult = Context.Map.System.LoopedAge;
	}
	Context.Map.System.CurrentLoopDuration = CurrentLoopDuration_IfResult;
	Context.Map.System.LoopedAge = LoopedAge_IfResult;
	float Result10 = Context.Map.System.LoopedAge / Context.Map.System.CurrentLoopDuration;
	Context.Map.System.NormalizedLoopAge = Result10;
	bool Constant8 = true;
	int Constant9 = 0;
	SystemState_SystemChangeState002_Func_(Context.Map.Transient.ScalabilityExecutionState, Constant8, Constant9, Context);
	int Constant10 = 3;
	bool Constant11 = false;
	int Constant12 = 3;
	SystemState_SystemChangeState_Func_(Constant10, Constant11, Constant12, Context);
	bool Constant13 = true;
	Context.Map.System.bCompleteOnInactive = Constant13;
	int Constant14 = 0;
	bool Result15 = NiagaraAll(Context.Map.Engine.Owner.ExecutionState != Constant14);
	int Constant15 = 2;
	SystemState_SystemChangeState001_Func_(Context.Map.Engine.Owner.ExecutionState, Result15, Constant15, Context);
}

void EmitterState_EmitterChangeState002_NE_flare_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant27 = 3;
	bool Result32 = NiagaraAll(Context.Map.NE_flare.ExecutionState != Constant27);
	int Constant28 = 4;
	bool Result33 = NiagaraAll(Context.Map.NE_flare.ExecutionState != Constant28);
	bool Result34 = Result32 && Result33;
	bool Result35 = In_Condition && Result34;
	bool Result36 = NiagaraAll(Context.Map.NE_flare.ExecutionStateSource <= In_NewStateSource);
	bool Result37 = Result35 && Result36;
	int ENiagaraExecutionState_IfResult3;
	int ENiagaraExecutionStateSource_IfResult3;
	if(Result37)
	{
	ENiagaraExecutionState_IfResult3 = In_NewState;
	ENiagaraExecutionStateSource_IfResult3 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult3 = Context.Map.NE_flare.ExecutionState;
	ENiagaraExecutionStateSource_IfResult3 = Context.Map.NE_flare.ExecutionStateSource;
	}
	Context.Map.NE_flare.ExecutionState = ENiagaraExecutionState_IfResult3;
	Context.Map.NE_flare.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult3;
}

void EmitterState_EmitterChangeState005_NE_flare_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant33 = 3;
	bool Result41 = NiagaraAll(Context.Map.NE_flare.ExecutionState != Constant33);
	int Constant34 = 4;
	bool Result42 = NiagaraAll(Context.Map.NE_flare.ExecutionState != Constant34);
	bool Result43 = Result41 && Result42;
	bool Result44 = In_Condition && Result43;
	bool Result45 = NiagaraAll(Context.Map.NE_flare.ExecutionStateSource <= In_NewStateSource);
	bool Result46 = Result44 && Result45;
	int ENiagaraExecutionState_IfResult4;
	int ENiagaraExecutionStateSource_IfResult4;
	if(Result46)
	{
	ENiagaraExecutionState_IfResult4 = In_NewState;
	ENiagaraExecutionStateSource_IfResult4 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult4 = Context.Map.NE_flare.ExecutionState;
	ENiagaraExecutionStateSource_IfResult4 = Context.Map.NE_flare.ExecutionStateSource;
	}
	Context.Map.NE_flare.ExecutionState = ENiagaraExecutionState_IfResult4;
	Context.Map.NE_flare.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult4;
}

void EmitterState_EmitterChangeState003_NE_flare_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant39 = 3;
	bool Result51 = NiagaraAll(Context.Map.NE_flare.ExecutionState != Constant39);
	int Constant40 = 4;
	bool Result52 = NiagaraAll(Context.Map.NE_flare.ExecutionState != Constant40);
	bool Result53 = Result51 && Result52;
	bool Result54 = In_Condition && Result53;
	bool Result55 = NiagaraAll(Context.Map.NE_flare.ExecutionStateSource <= In_NewStateSource);
	bool Result56 = Result54 && Result55;
	int ENiagaraExecutionState_IfResult5;
	int ENiagaraExecutionStateSource_IfResult5;
	if(Result56)
	{
	ENiagaraExecutionState_IfResult5 = In_NewState;
	ENiagaraExecutionStateSource_IfResult5 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult5 = Context.Map.NE_flare.ExecutionState;
	ENiagaraExecutionStateSource_IfResult5 = Context.Map.NE_flare.ExecutionStateSource;
	}
	Context.Map.NE_flare.ExecutionState = ENiagaraExecutionState_IfResult5;
	Context.Map.NE_flare.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult5;
}

void EmitterState_NE_flare_Func_(inout FSimulationContext Context)
{
	Context.Map.Local.EmitterState.PreviousEmitterState = Context.Map.NE_flare.ExecutionState;
	float Constant16 = 0.016667;
	float Result18 = max(Context.Map.Constants.NE_flare.EmitterState.LoopDuration, Constant16);
	Context.Map.Local.EmitterState.LoopDuration = Result18;
	float Constant17 = 0;
	bool Result19 = NiagaraAll(Context.Map.NE_flare.Age == Constant17);
	float Duration_IfResult1;
	if(Result19)
	{
	Duration_IfResult1 = Context.Map.Local.EmitterState.LoopDuration;
	}
	else
	{
	Duration_IfResult1 = Context.Map.NE_flare.CurrentLoopDuration;
	}
	float Constant18 = 0;
	Context.Map.NE_flare.CurrentLoopDuration = Duration_IfResult1;
	Context.Map.EmitterState.LoopDelay = Constant18;
	float Result20 = Context.Map.NE_flare.Age + Context.Map.Engine.DeltaTime;
	float Result21 = Context.Map.Engine.DeltaTime + Context.Map.NE_flare.LoopedAge;
	float Result22 = Result21 / Context.Map.NE_flare.CurrentLoopDuration;
	int Count1;
	Count1 = Result22;
	int Constant19 = 0;
	int Result23 = max(Count1, Constant19);
	float Result24 = Result23 * Context.Map.NE_flare.CurrentLoopDuration;
	float Result25 = Result21 - Result24;
	int Constant20 = 0;
	bool Result26 = NiagaraAll(Result23 > Constant20);
	int Result27 = Result23 + Context.Map.NE_flare.LoopCount;
	Context.Map.NE_flare.Age = Result20;
	Context.Map.NE_flare.LoopedAge = Result25;
	Context.Map.Local.EmitterState.LoopCountIncreased = Result26;
	Context.Map.NE_flare.LoopCount = Result27;
	bool Constant21 = false;
	Context.Map.EmitterState.RecalculateDurationEachLoop = Constant21;
	float float_IfResult1;
	if(Context.Map.EmitterState.RecalculateDurationEachLoop)
	{
	float_IfResult1 = Context.Map.Local.EmitterState.LoopDuration;
	}
	else
	{
	float_IfResult1 = Context.Map.NE_flare.CurrentLoopDuration;
	}
	float CurrentLoopDuration_IfResult1;
	float LoopedAge_IfResult1;
	if(Context.Map.Local.EmitterState.LoopCountIncreased)
	{
	CurrentLoopDuration_IfResult1 = float_IfResult1;
	LoopedAge_IfResult1 = Context.Map.NE_flare.LoopedAge;
	}
	else
	{
	CurrentLoopDuration_IfResult1 = Context.Map.NE_flare.CurrentLoopDuration;
	LoopedAge_IfResult1 = Context.Map.NE_flare.LoopedAge;
	}
	Context.Map.NE_flare.CurrentLoopDuration = CurrentLoopDuration_IfResult1;
	Context.Map.NE_flare.LoopedAge = LoopedAge_IfResult1;
	float Result28 = Context.Map.NE_flare.LoopedAge / Context.Map.NE_flare.CurrentLoopDuration;
	Context.Map.NE_flare.NormalizedLoopAge = Result28;
	float Constant22 = 0;
	float Constant23 = 1.0001;
	float Result29 = clamp(Context.Map.Engine.Owner.LODDistanceFraction,Constant22,Constant23);
	Context.Map.NE_flare.Scalability.DistanceFraction = Result29;
	int Constant24 = 0;
	Context.Map.Transient.ScalabilityEmitterExecutionState = Constant24;
	int Constant25 = 0;
	bool Result30 = NiagaraAll(Context.Map.Engine.NE_flare.NumParticles == Constant25);
	Context.Map.Local.EmitterState.NoActiveEmitterParticles = Result30;
	int Constant26 = 0;
	bool Result31 = NiagaraAll(Context.Map.System.ExecutionStateSource == Constant26);
	EmitterState_EmitterChangeState002_NE_flare_Func_(Context.Map.System.ExecutionState, Result31, Context.Map.System.ExecutionStateSource, Context);
	int Constant29 = 1;
	int Constant30 = 0;
	bool Result38 = NiagaraAll(Context.Map.System.ExecutionState != Constant30);
	int Constant31 = 2;
	bool Result39 = NiagaraAll(Context.Map.System.ExecutionStateSource == Constant31);
	bool Result40 = Result38 && Result39;
	int Constant32 = 1;
	EmitterState_EmitterChangeState005_NE_flare_Func_(Constant29, Result40, Constant32, Context);
	int Constant35 = 3;
	int Constant36 = 0;
	bool Result47 = NiagaraAll(Context.Map.NE_flare.ExecutionState != Constant36);
	int Constant37 = 0;
	bool Result48 = NiagaraAll(Context.Map.NE_flare.ExecutionStateSource != Constant37);
	bool Result49 = Result47 && Result48;
	bool Result50 = Context.Map.Local.EmitterState.NoActiveEmitterParticles && Result49;
	int Constant38 = 3;
	EmitterState_EmitterChangeState003_NE_flare_Func_(Constant35, Result50, Constant38, Context);
}

void Divide_Float_NE_flare_Func_(out float Out_Result, inout FSimulationContext Context)
{
	float Result57 = Context.Map.Divide_Float.A / Context.Map.Constants.NE_flare.Divide_Float.B;
	Out_Result = Result57;
}

void SpawnRate_NE_flare_Func_(inout FSimulationContext Context)
{
	float Constant41 = 1;
	Context.Map.Transient.ScalabilityEmitterSpawnCountScale = Constant41;
	float Result58 = Context.Map.SpawnRate.SpawnRate * Context.Map.Transient.ScalabilityEmitterSpawnCountScale * Context.Map.Engine.NE_flare.SpawnCountScale;
	float Result59 = Reciprocal(Result58);
	float Result60 = 1 - Context.Map.NE_flare.SpawnRate.SpawnRemainder;
	float Result61 = Result59 * Result60;
	Context.Map.Local.SpawnRate.SpawnRate = Result58;
	Context.Map.Local.SpawnRate.IntervalDT = Result59;
	Context.Map.Local.SpawnRate.InterpStartDT = Result61;
	float Constant42 = 0;
	bool Result62 = NiagaraAll(Context.Map.NE_flare.LoopedAge >= Constant42);
	float Constant43 = 1;
	float Constant44 = 0;
	float float_IfResult2;
	if(Result62)
	{
	float_IfResult2 = Constant43;
	}
	else
	{
	float_IfResult2 = Constant44;
	}
	float Result63 = Context.Map.Local.SpawnRate.SpawnRate * float_IfResult2;
	float Result64 = Result63 * Context.Map.Engine.DeltaTime + Context.Map.NE_flare.SpawnRate.SpawnRemainder;
	float Result65 = floor(Result64);
	float Result66 = Result64 - Result65;
	Context.Map.Local.SpawnRate.SpawnCount = Result65;
	Context.Map.NE_flare.SpawnRate.SpawnRemainder = Result66;
	NiagaraSpawnInfo Output1;
	Output1.Count = Context.Map.Local.SpawnRate.SpawnCount;
	Output1.InterpStartDt = Context.Map.Local.SpawnRate.InterpStartDT;
	Output1.IntervalDt = Context.Map.Local.SpawnRate.IntervalDT;
	Output1.SpawnGroup = Context.Map.Constants.NE_flare.SpawnRate.SpawnGroup;
	bool Constant45 = true;
	Context.Map.NE_flare.SpawnRate.SpawnOutputInfo = Output1;
	Context.Map.Transient.SpawningbCanEverSpawn = Constant45;
}

void NE_flare_Func_(inout FSimulationContext Context)
{
	EnterStatScope(3 );
	EmitterState_NE_flare_Func_(Context);
	ExitStatScope( );
	Context.Map.Divide_Float.A = Context.Map.User.SparksSpawnRate;
	float Divide_Float_NE_flare_Func_Output_Result;
	Divide_Float_NE_flare_Func_(Divide_Float_NE_flare_Func_Output_Result, Context);
	Context.Map.SpawnRate.SpawnRate = Divide_Float_NE_flare_Func_Output_Result;
	EnterStatScope(4 );
	SpawnRate_NE_flare_Func_(Context);
	ExitStatScope( );
}

void EmitterState_EmitterChangeState002_NE_spriteBurst_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant57 = 3;
	bool Result81 = NiagaraAll(Context.Map.NE_spriteBurst.ExecutionState != Constant57);
	int Constant58 = 4;
	bool Result82 = NiagaraAll(Context.Map.NE_spriteBurst.ExecutionState != Constant58);
	bool Result83 = Result81 && Result82;
	bool Result84 = In_Condition && Result83;
	bool Result85 = NiagaraAll(Context.Map.NE_spriteBurst.ExecutionStateSource <= In_NewStateSource);
	bool Result86 = Result84 && Result85;
	int ENiagaraExecutionState_IfResult6;
	int ENiagaraExecutionStateSource_IfResult6;
	if(Result86)
	{
	ENiagaraExecutionState_IfResult6 = In_NewState;
	ENiagaraExecutionStateSource_IfResult6 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult6 = Context.Map.NE_spriteBurst.ExecutionState;
	ENiagaraExecutionStateSource_IfResult6 = Context.Map.NE_spriteBurst.ExecutionStateSource;
	}
	Context.Map.NE_spriteBurst.ExecutionState = ENiagaraExecutionState_IfResult6;
	Context.Map.NE_spriteBurst.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult6;
}

void EmitterState_EmitterChangeState005_NE_spriteBurst_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant63 = 3;
	bool Result90 = NiagaraAll(Context.Map.NE_spriteBurst.ExecutionState != Constant63);
	int Constant64 = 4;
	bool Result91 = NiagaraAll(Context.Map.NE_spriteBurst.ExecutionState != Constant64);
	bool Result92 = Result90 && Result91;
	bool Result93 = In_Condition && Result92;
	bool Result94 = NiagaraAll(Context.Map.NE_spriteBurst.ExecutionStateSource <= In_NewStateSource);
	bool Result95 = Result93 && Result94;
	int ENiagaraExecutionState_IfResult7;
	int ENiagaraExecutionStateSource_IfResult7;
	if(Result95)
	{
	ENiagaraExecutionState_IfResult7 = In_NewState;
	ENiagaraExecutionStateSource_IfResult7 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult7 = Context.Map.NE_spriteBurst.ExecutionState;
	ENiagaraExecutionStateSource_IfResult7 = Context.Map.NE_spriteBurst.ExecutionStateSource;
	}
	Context.Map.NE_spriteBurst.ExecutionState = ENiagaraExecutionState_IfResult7;
	Context.Map.NE_spriteBurst.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult7;
}

void EmitterState_EmitterChangeState003_NE_spriteBurst_Func_(int In_NewState, bool In_Condition, int In_NewStateSource, inout FSimulationContext Context)
{
	int Constant69 = 3;
	bool Result100 = NiagaraAll(Context.Map.NE_spriteBurst.ExecutionState != Constant69);
	int Constant70 = 4;
	bool Result101 = NiagaraAll(Context.Map.NE_spriteBurst.ExecutionState != Constant70);
	bool Result102 = Result100 && Result101;
	bool Result103 = In_Condition && Result102;
	bool Result104 = NiagaraAll(Context.Map.NE_spriteBurst.ExecutionStateSource <= In_NewStateSource);
	bool Result105 = Result103 && Result104;
	int ENiagaraExecutionState_IfResult8;
	int ENiagaraExecutionStateSource_IfResult8;
	if(Result105)
	{
	ENiagaraExecutionState_IfResult8 = In_NewState;
	ENiagaraExecutionStateSource_IfResult8 = In_NewStateSource;
	}
	else
	{
	ENiagaraExecutionState_IfResult8 = Context.Map.NE_spriteBurst.ExecutionState;
	ENiagaraExecutionStateSource_IfResult8 = Context.Map.NE_spriteBurst.ExecutionStateSource;
	}
	Context.Map.NE_spriteBurst.ExecutionState = ENiagaraExecutionState_IfResult8;
	Context.Map.NE_spriteBurst.ExecutionStateSource = ENiagaraExecutionStateSource_IfResult8;
}

void EmitterState_NE_spriteBurst_Func_(inout FSimulationContext Context)
{
	Context.Map.Local.EmitterState.PreviousEmitterState = Context.Map.NE_spriteBurst.ExecutionState;
	float Constant46 = 0.016667;
	float Result67 = max(Context.Map.Constants.NE_spriteBurst.EmitterState.LoopDuration, Constant46);
	Context.Map.Local.EmitterState.LoopDuration = Result67;
	float Constant47 = 0;
	bool Result68 = NiagaraAll(Context.Map.NE_spriteBurst.Age == Constant47);
	float Duration_IfResult2;
	if(Result68)
	{
	Duration_IfResult2 = Context.Map.Local.EmitterState.LoopDuration;
	}
	else
	{
	Duration_IfResult2 = Context.Map.NE_spriteBurst.CurrentLoopDuration;
	}
	float Constant48 = 0;
	Context.Map.NE_spriteBurst.CurrentLoopDuration = Duration_IfResult2;
	Context.Map.EmitterState.LoopDelay = Constant48;
	float Result69 = Context.Map.NE_spriteBurst.Age + Context.Map.Engine.DeltaTime;
	float Result70 = Context.Map.Engine.DeltaTime + Context.Map.NE_spriteBurst.LoopedAge;
	float Result71 = Result70 / Context.Map.NE_spriteBurst.CurrentLoopDuration;
	int Count2;
	Count2 = Result71;
	int Constant49 = 0;
	int Result72 = max(Count2, Constant49);
	float Result73 = Result72 * Context.Map.NE_spriteBurst.CurrentLoopDuration;
	float Result74 = Result70 - Result73;
	int Constant50 = 0;
	bool Result75 = NiagaraAll(Result72 > Constant50);
	int Result76 = Result72 + Context.Map.NE_spriteBurst.LoopCount;
	Context.Map.NE_spriteBurst.Age = Result69;
	Context.Map.NE_spriteBurst.LoopedAge = Result74;
	Context.Map.Local.EmitterState.LoopCountIncreased = Result75;
	Context.Map.NE_spriteBurst.LoopCount = Result76;
	bool Constant51 = false;
	Context.Map.EmitterState.RecalculateDurationEachLoop = Constant51;
	float float_IfResult3;
	if(Context.Map.EmitterState.RecalculateDurationEachLoop)
	{
	float_IfResult3 = Context.Map.Local.EmitterState.LoopDuration;
	}
	else
	{
	float_IfResult3 = Context.Map.NE_spriteBurst.CurrentLoopDuration;
	}
	float CurrentLoopDuration_IfResult2;
	float LoopedAge_IfResult2;
	if(Context.Map.Local.EmitterState.LoopCountIncreased)
	{
	CurrentLoopDuration_IfResult2 = float_IfResult3;
	LoopedAge_IfResult2 = Context.Map.NE_spriteBurst.LoopedAge;
	}
	else
	{
	CurrentLoopDuration_IfResult2 = Context.Map.NE_spriteBurst.CurrentLoopDuration;
	LoopedAge_IfResult2 = Context.Map.NE_spriteBurst.LoopedAge;
	}
	Context.Map.NE_spriteBurst.CurrentLoopDuration = CurrentLoopDuration_IfResult2;
	Context.Map.NE_spriteBurst.LoopedAge = LoopedAge_IfResult2;
	float Result77 = Context.Map.NE_spriteBurst.LoopedAge / Context.Map.NE_spriteBurst.CurrentLoopDuration;
	Context.Map.NE_spriteBurst.NormalizedLoopAge = Result77;
	float Constant52 = 0;
	float Constant53 = 1.0001;
	float Result78 = clamp(Context.Map.Engine.Owner.LODDistanceFraction,Constant52,Constant53);
	Context.Map.NE_spriteBurst.Scalability.DistanceFraction = Result78;
	int Constant54 = 0;
	Context.Map.Transient.ScalabilityEmitterExecutionState = Constant54;
	int Constant55 = 0;
	bool Result79 = NiagaraAll(Context.Map.Engine.NE_spriteBurst.NumParticles == Constant55);
	Context.Map.Local.EmitterState.NoActiveEmitterParticles = Result79;
	int Constant56 = 0;
	bool Result80 = NiagaraAll(Context.Map.System.ExecutionStateSource == Constant56);
	EmitterState_EmitterChangeState002_NE_spriteBurst_Func_(Context.Map.System.ExecutionState, Result80, Context.Map.System.ExecutionStateSource, Context);
	int Constant59 = 1;
	int Constant60 = 0;
	bool Result87 = NiagaraAll(Context.Map.System.ExecutionState != Constant60);
	int Constant61 = 2;
	bool Result88 = NiagaraAll(Context.Map.System.ExecutionStateSource == Constant61);
	bool Result89 = Result87 && Result88;
	int Constant62 = 1;
	EmitterState_EmitterChangeState005_NE_spriteBurst_Func_(Constant59, Result89, Constant62, Context);
	int Constant65 = 3;
	int Constant66 = 0;
	bool Result96 = NiagaraAll(Context.Map.NE_spriteBurst.ExecutionState != Constant66);
	int Constant67 = 0;
	bool Result97 = NiagaraAll(Context.Map.NE_spriteBurst.ExecutionStateSource != Constant67);
	bool Result98 = Result96 && Result97;
	bool Result99 = Context.Map.Local.EmitterState.NoActiveEmitterParticles && Result98;
	int Constant68 = 3;
	EmitterState_EmitterChangeState003_NE_spriteBurst_Func_(Constant65, Result99, Constant68, Context);
}

void SpawnRate_NE_spriteBurst_Func_(inout FSimulationContext Context)
{
	float Result106 = Context.Map.SpawnRate.SpawnRate * Context.Map.Transient.ScalabilityEmitterSpawnCountScale * Context.Map.Engine.NE_spriteBurst.SpawnCountScale;
	float Result107 = Reciprocal(Result106);
	float Result108 = 1 - Context.Map.NE_spriteBurst.SpawnRate.SpawnRemainder;
	float Result109 = Result107 * Result108;
	Context.Map.Local.SpawnRate.SpawnRate = Result106;
	Context.Map.Local.SpawnRate.IntervalDT = Result107;
	Context.Map.Local.SpawnRate.InterpStartDT = Result109;
	float Constant71 = 0;
	bool Result110 = NiagaraAll(Context.Map.NE_spriteBurst.LoopedAge >= Constant71);
	float Constant72 = 1;
	float Constant73 = 0;
	float float_IfResult4;
	if(Result110)
	{
	float_IfResult4 = Constant72;
	}
	else
	{
	float_IfResult4 = Constant73;
	}
	float Result111 = Context.Map.Local.SpawnRate.SpawnRate * float_IfResult4;
	float Result112 = Result111 * Context.Map.Engine.DeltaTime + Context.Map.NE_spriteBurst.SpawnRate.SpawnRemainder;
	float Result113 = floor(Result112);
	float Result114 = Result112 - Result113;
	Context.Map.Local.SpawnRate.SpawnCount = Result113;
	Context.Map.NE_spriteBurst.SpawnRate.SpawnRemainder = Result114;
	NiagaraSpawnInfo Output11;
	Output11.Count = Context.Map.Local.SpawnRate.SpawnCount;
	Output11.InterpStartDt = Context.Map.Local.SpawnRate.InterpStartDT;
	Output11.IntervalDt = Context.Map.Local.SpawnRate.IntervalDT;
	Output11.SpawnGroup = Context.Map.Constants.NE_spriteBurst.SpawnRate.SpawnGroup;
	bool Constant74 = true;
	Context.Map.NE_spriteBurst.SpawnRate.SpawnOutputInfo = Output11;
	Context.Map.Transient.SpawningbCanEverSpawn = Constant74;
}

void NE_spriteBurst_Func_(inout FSimulationContext Context)
{
	EnterStatScope(6 );
	EmitterState_NE_spriteBurst_Func_(Context);
	ExitStatScope( );
	Context.Map.SpawnRate.SpawnRate = Context.Map.User.SparksSpawnRate;
	EnterStatScope(7 );
	SpawnRate_NE_spriteBurst_Func_(Context);
	ExitStatScope( );
}

float GetSpawnInterpolation()
{
	return 1.0f;}


void ReadDataSets(inout FSimulationContext Context)
{
}

void WriteDataSets(inout FSimulationContext Context)
{
}

void Simulate(inout FSimulationContext Context)
{
	EnterStatScope(0 );


	bool Constant = (false);
	Context.Map.Local.SystemState.LoopCountIncreased = Constant;
	bool Constant1 = false;
	Context.Map.SystemState.RecalculateDurationEachLoop = Constant1;
	int Constant2 = 0;
	Context.Map.Transient.ScalabilityExecutionState = Constant2;
	EnterStatScope(1 );
	SystemState_Func_(Context);
	ExitStatScope( );
	EnterStatScope(2 );
	NE_flare_Func_(Context);
	ExitStatScope( );
	EnterStatScope(5 );
	NE_spriteBurst_Func_(Context);
	ExitStatScope( );
	ExitStatScope( );
}
void SimulateMain()
{
EnterStatScope(8 );

	FSimulationContext Context = (FSimulationContext)0;
	Context.Map.Emitter.RandomSeed = InputDataInt(0, 0);
	Context.Map.NE_flare.Age = InputDataFloat(0, 1);
	Context.Map.NE_flare.CurrentLoopDuration = InputDataFloat(0, 2);
	Context.Map.NE_flare.ExecutionState = InputDataInt(0, 3);
	Context.Map.NE_flare.ExecutionStateSource = InputDataInt(0, 4);
	Context.Map.NE_flare.LocalSpace = InputDataBool(0, 5);
	Context.Map.NE_flare.LoopCount = InputDataInt(0, 6);
	Context.Map.NE_flare.LoopedAge = InputDataFloat(0, 7);
	Context.Map.NE_flare.NormalizedLoopAge = InputDataFloat(0, 8);
	Context.Map.NE_flare.Scalability.DistanceFraction = InputDataFloat(0, 9);
	Context.Map.NE_flare.SpawnRate.SpawnOutputInfo.Count = 0;
	Context.Map.NE_flare.SpawnRate.SpawnOutputInfo.InterpStartDt = 0.0f;
	Context.Map.NE_flare.SpawnRate.SpawnOutputInfo.IntervalDt = 0.0f;
	Context.Map.NE_flare.SpawnRate.SpawnOutputInfo.SpawnGroup = 0;
	Context.Map.NE_flare.SpawnRate.SpawnRemainder = InputDataFloat(0, 14);
	Context.Map.NE_spriteBurst.Age = InputDataFloat(0, 15);
	Context.Map.NE_spriteBurst.CurrentLoopDuration = InputDataFloat(0, 16);
	Context.Map.NE_spriteBurst.ExecutionState = InputDataInt(0, 17);
	Context.Map.NE_spriteBurst.ExecutionStateSource = InputDataInt(0, 18);
	Context.Map.NE_spriteBurst.LocalSpace = InputDataBool(0, 19);
	Context.Map.NE_spriteBurst.LoopCount = InputDataInt(0, 20);
	Context.Map.NE_spriteBurst.LoopedAge = InputDataFloat(0, 21);
	Context.Map.NE_spriteBurst.NormalizedLoopAge = InputDataFloat(0, 22);
	Context.Map.NE_spriteBurst.Scalability.DistanceFraction = InputDataFloat(0, 23);
	Context.Map.NE_spriteBurst.SpawnRate.SpawnOutputInfo.Count = 0;
	Context.Map.NE_spriteBurst.SpawnRate.SpawnOutputInfo.InterpStartDt = 0.0f;
	Context.Map.NE_spriteBurst.SpawnRate.SpawnOutputInfo.IntervalDt = 0.0f;
	Context.Map.NE_spriteBurst.SpawnRate.SpawnOutputInfo.SpawnGroup = 0;
	Context.Map.NE_spriteBurst.SpawnRate.SpawnRemainder = InputDataFloat(0, 28);
	Context.Map.System.Age = InputDataFloat(0, 29);
	Context.Map.System.bCompleteOnInactive = InputDataBool(0, 30);
	Context.Map.System.CurrentLoopDuration = InputDataFloat(0, 31);
	Context.Map.System.ExecutionState = InputDataInt(0, 32);
	Context.Map.System.ExecutionStateSource = InputDataInt(0, 33);
	Context.Map.System.LoopCount = InputDataInt(0, 34);
	Context.Map.System.LoopedAge = InputDataFloat(0, 35);
	Context.Map.System.NormalizedLoopAge = InputDataFloat(0, 36);
	Context.Map.Engine.Emitter.TotalSpawnedParticles = InputDataInt(1, 0);
	Context.Map.Engine.NE_flare.NumParticles = InputDataInt(1, 1);
	Context.Map.Engine.NE_flare.SpawnCountScale = InputDataFloat(1, 2);
	Context.Map.Engine.NE_spriteBurst.NumParticles = InputDataInt(1, 3);
	Context.Map.Engine.NE_spriteBurst.SpawnCountScale = InputDataFloat(1, 4);
	Context.Map.Engine.Owner.ExecutionState = InputDataInt(1, 5);
	Context.Map.Engine.Owner.LODDistanceFraction = InputDataFloat(1, 6);
	Context.Map.User.SparksSpawnRate = InputDataFloat(1, 7);
	Context.Map.Constants.SystemState.LoopDelay = Constants_SystemState_LoopDelay;
	Context.Map.Constants.SystemState.LoopDuration = Constants_SystemState_LoopDuration;
	Context.Map.Engine.DeltaTime = Engine_DeltaTime;
	Context.Map.Constants.NE_flare.EmitterState.LoopDuration = Constants_NE_flare_EmitterState_LoopDuration;
	Context.Map.Constants.NE_flare.EmitterState.LoopDelay = Constants_NE_flare_EmitterState_LoopDelay;
	Context.Map.Constants.NE_flare.Divide_Float.B = Constants_NE_flare_Divide_Float_B;
	Context.Map.Constants.NE_flare.SpawnRate.SpawnGroup = Constants_NE_flare_SpawnRate_SpawnGroup;
	Context.Map.Constants.NE_flare.SpawnRate.SpawnProbability = Constants_NE_flare_SpawnRate_SpawnProbability;
	Context.Map.Constants.NE_spriteBurst.EmitterState.LoopDuration = Constants_NE_spriteBurst_EmitterState_LoopDuration;
	Context.Map.Constants.NE_spriteBurst.EmitterState.LoopDelay = Constants_NE_spriteBurst_EmitterState_LoopDelay;
	Context.Map.Constants.NE_spriteBurst.SpawnRate.SpawnGroup = Constants_NE_spriteBurst_SpawnRate_SpawnGroup;
	Context.Map.Constants.NE_spriteBurst.SpawnRate.SpawnProbability = Constants_NE_spriteBurst_SpawnRate_SpawnProbability;
	Context.Map.Emitter.RandomSeed = Emitter_RandomSeed;
	ReadDataSets(Context);
	Simulate(Context);
	WriteDataSets(Context);
	{
	int TmpWriteIndex = OutputIndex(0, false, true);
	OutputDataInt(0, 0, TmpWriteIndex, Context.Map.Emitter.RandomSeed);
	OutputDataFloat(0, 1, TmpWriteIndex, Context.Map.NE_flare.Age);
	OutputDataFloat(0, 2, TmpWriteIndex, Context.Map.NE_flare.CurrentLoopDuration);
	OutputDataInt(0, 3, TmpWriteIndex, Context.Map.NE_flare.ExecutionState);
	OutputDataInt(0, 4, TmpWriteIndex, Context.Map.NE_flare.ExecutionStateSource);
	OutputDataBool(0, 5, TmpWriteIndex, Context.Map.NE_flare.LocalSpace);
	OutputDataInt(0, 6, TmpWriteIndex, Context.Map.NE_flare.LoopCount);
	OutputDataFloat(0, 7, TmpWriteIndex, Context.Map.NE_flare.LoopedAge);
	OutputDataFloat(0, 8, TmpWriteIndex, Context.Map.NE_flare.NormalizedLoopAge);
	OutputDataFloat(0, 9, TmpWriteIndex, Context.Map.NE_flare.Scalability.DistanceFraction);
	OutputDataInt(0, 10, TmpWriteIndex, Context.Map.NE_flare.SpawnRate.SpawnOutputInfo.Count);
	OutputDataFloat(0, 11, TmpWriteIndex, Context.Map.NE_flare.SpawnRate.SpawnOutputInfo.InterpStartDt);
	OutputDataFloat(0, 12, TmpWriteIndex, Context.Map.NE_flare.SpawnRate.SpawnOutputInfo.IntervalDt);
	OutputDataInt(0, 13, TmpWriteIndex, Context.Map.NE_flare.SpawnRate.SpawnOutputInfo.SpawnGroup);
	OutputDataFloat(0, 14, TmpWriteIndex, Context.Map.NE_flare.SpawnRate.SpawnRemainder);
	OutputDataFloat(0, 15, TmpWriteIndex, Context.Map.NE_spriteBurst.Age);
	OutputDataFloat(0, 16, TmpWriteIndex, Context.Map.NE_spriteBurst.CurrentLoopDuration);
	OutputDataInt(0, 17, TmpWriteIndex, Context.Map.NE_spriteBurst.ExecutionState);
	OutputDataInt(0, 18, TmpWriteIndex, Context.Map.NE_spriteBurst.ExecutionStateSource);
	OutputDataBool(0, 19, TmpWriteIndex, Context.Map.NE_spriteBurst.LocalSpace);
	OutputDataInt(0, 20, TmpWriteIndex, Context.Map.NE_spriteBurst.LoopCount);
	OutputDataFloat(0, 21, TmpWriteIndex, Context.Map.NE_spriteBurst.LoopedAge);
	OutputDataFloat(0, 22, TmpWriteIndex, Context.Map.NE_spriteBurst.NormalizedLoopAge);
	OutputDataFloat(0, 23, TmpWriteIndex, Context.Map.NE_spriteBurst.Scalability.DistanceFraction);
	OutputDataInt(0, 24, TmpWriteIndex, Context.Map.NE_spriteBurst.SpawnRate.SpawnOutputInfo.Count);
	OutputDataFloat(0, 25, TmpWriteIndex, Context.Map.NE_spriteBurst.SpawnRate.SpawnOutputInfo.InterpStartDt);
	OutputDataFloat(0, 26, TmpWriteIndex, Context.Map.NE_spriteBurst.SpawnRate.SpawnOutputInfo.IntervalDt);
	OutputDataInt(0, 27, TmpWriteIndex, Context.Map.NE_spriteBurst.SpawnRate.SpawnOutputInfo.SpawnGroup);
	OutputDataFloat(0, 28, TmpWriteIndex, Context.Map.NE_spriteBurst.SpawnRate.SpawnRemainder);
	OutputDataFloat(0, 29, TmpWriteIndex, Context.Map.System.Age);
	OutputDataBool(0, 30, TmpWriteIndex, Context.Map.System.bCompleteOnInactive);
	OutputDataFloat(0, 31, TmpWriteIndex, Context.Map.System.CurrentLoopDuration);
	OutputDataInt(0, 32, TmpWriteIndex, Context.Map.System.ExecutionState);
	OutputDataInt(0, 33, TmpWriteIndex, Context.Map.System.ExecutionStateSource);
	OutputDataInt(0, 34, TmpWriteIndex, Context.Map.System.LoopCount);
	OutputDataFloat(0, 35, TmpWriteIndex, Context.Map.System.LoopedAge);
	OutputDataFloat(0, 36, TmpWriteIndex, Context.Map.System.NormalizedLoopAge);
	}
ExitStatScope( );
}
#line 703 "/Plugin/FX/Niagara/Private/NiagaraEmitterInstanceShader.usf"

#if 0 /*BEGIN_RESOURCE_TABLES*/
NULL, 0
NULL, NULL, 0, 0
#endif /*END_RESOURCE_TABLES*/
